(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[211],{

/***/ "./examples/docs/fr-FR/tree.md":
/*!*************************************!*\
  !*** ./examples/docs/fr-FR/tree.md ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _tree_md_vue_type_template_id_faf63f7e__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tree.md?vue&type=template&id=faf63f7e */ \"./examples/docs/fr-FR/tree.md?vue&type=template&id=faf63f7e\");\n/* harmony import */ var _tree_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tree.md?vue&type=script&lang=js */ \"./examples/docs/fr-FR/tree.md?vue&type=script&lang=js\");\n/* empty/unused harmony star reexport */\n\n\n_tree_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].render = _tree_md_vue_type_template_id_faf63f7e__WEBPACK_IMPORTED_MODULE_0__[\"render\"]\n/* hot reload */\nif (true) {\n  _tree_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].__hmrId = \"faf63f7e\"\n  const api = __VUE_HMR_RUNTIME__\n  module.hot.accept()\n  if (!api.createRecord('faf63f7e', _tree_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])) {\n    api.reload('faf63f7e', _tree_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])\n  }\n  \n  module.hot.accept(/*! ./tree.md?vue&type=template&id=faf63f7e */ \"./examples/docs/fr-FR/tree.md?vue&type=template&id=faf63f7e\", function(__WEBPACK_OUTDATED_DEPENDENCIES__) { /* harmony import */ _tree_md_vue_type_template_id_faf63f7e__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tree.md?vue&type=template&id=faf63f7e */ \"./examples/docs/fr-FR/tree.md?vue&type=template&id=faf63f7e\");\n(() => {\n    api.rerender('faf63f7e', _tree_md_vue_type_template_id_faf63f7e__WEBPACK_IMPORTED_MODULE_0__[\"render\"])\n  })(__WEBPACK_OUTDATED_DEPENDENCIES__); }.bind(this))\n\n}\n\n_tree_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].__file = \"examples/docs/fr-FR/tree.md\"\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (_tree_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9leGFtcGxlcy9kb2NzL2ZyLUZSL3RyZWUubWQ/NDkzOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQSx3Q0FBZ0U7QUFDVjtBQUNMO0FBQ2pELHdFQUFNLFVBQVUsNkVBQU07QUFDdEI7QUFDQSxJQUFJLElBQVU7QUFDZCxFQUFFLHdFQUFNO0FBQ1I7QUFDQTtBQUNBLG9DQUFvQyx3RUFBTTtBQUMxQywyQkFBMkIsd0VBQU07QUFDakM7O0FBRUEsb0JBQW9CLDRHQUF5QyxFQUFFO0FBQUE7QUFDL0QsNkJBQTZCLDZFQUFNO0FBQ25DLEdBQUc7O0FBRUg7O0FBRUEsd0VBQU07O0FBRVMsdUkiLCJmaWxlIjoiLi9leGFtcGxlcy9kb2NzL2ZyLUZSL3RyZWUubWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXIgfSBmcm9tIFwiLi90cmVlLm1kP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWZhZjYzZjdlXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vdHJlZS5tZD92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5leHBvcnQgKiBmcm9tIFwiLi90cmVlLm1kP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcbnNjcmlwdC5yZW5kZXIgPSByZW5kZXJcbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHNjcmlwdC5fX2htcklkID0gXCJmYWY2M2Y3ZVwiXG4gIGNvbnN0IGFwaSA9IF9fVlVFX0hNUl9SVU5USU1FX19cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIWFwaS5jcmVhdGVSZWNvcmQoJ2ZhZjYzZjdlJywgc2NyaXB0KSkge1xuICAgIGFwaS5yZWxvYWQoJ2ZhZjYzZjdlJywgc2NyaXB0KVxuICB9XG4gIFxuICBtb2R1bGUuaG90LmFjY2VwdChcIi4vdHJlZS5tZD92dWUmdHlwZT10ZW1wbGF0ZSZpZD1mYWY2M2Y3ZVwiLCAoKSA9PiB7XG4gICAgYXBpLnJlcmVuZGVyKCdmYWY2M2Y3ZScsIHJlbmRlcilcbiAgfSlcblxufVxuXG5zY3JpcHQuX19maWxlID0gXCJleGFtcGxlcy9kb2NzL2ZyLUZSL3RyZWUubWRcIlxuXG5leHBvcnQgZGVmYXVsdCBzY3JpcHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./examples/docs/fr-FR/tree.md\n");

/***/ }),

/***/ "./examples/docs/fr-FR/tree.md?vue&type=script&lang=js":
/*!*************************************************************!*\
  !*** ./examples/docs/fr-FR/tree.md?vue&type=script&lang=js ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_dist_index_js_ref_3_0_build_md_loader_index_js_tree_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib!../../../node_modules/vue-loader/dist??ref--3-0!../../../build/md-loader!./tree.md?vue&type=script&lang=js */ \"./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/fr-FR/tree.md?vue&type=script&lang=js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_dist_index_js_ref_3_0_build_md_loader_index_js_tree_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; });\n\n/* empty/unused harmony star reexport */ \n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9leGFtcGxlcy9kb2NzL2ZyLUZSL3RyZWUubWQ/MTFmYiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHdDQUF5TSIsImZpbGUiOiIuL2V4YW1wbGVzL2RvY3MvZnItRlIvdHJlZS5tZD92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9yZWYtLTMtMCEuLi8uLi8uLi9idWlsZC9tZC1sb2FkZXIvaW5kZXguanMhLi90cmVlLm1kP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCI7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3JlZi0tMy0wIS4uLy4uLy4uL2J1aWxkL21kLWxvYWRlci9pbmRleC5qcyEuL3RyZWUubWQ/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./examples/docs/fr-FR/tree.md?vue&type=script&lang=js\n");

/***/ }),

/***/ "./examples/docs/fr-FR/tree.md?vue&type=template&id=faf63f7e":
/*!*******************************************************************!*\
  !*** ./examples/docs/fr-FR/tree.md?vue&type=template&id=faf63f7e ***!
  \*******************************************************************/
/*! exports provided: render */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_vue_loader_dist_templateLoader_js_ref_5_node_modules_vue_loader_dist_index_js_ref_3_0_build_md_loader_index_js_tree_md_vue_type_template_id_faf63f7e__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/vue-loader/dist/templateLoader.js??ref--5!../../../node_modules/vue-loader/dist??ref--3-0!../../../build/md-loader!./tree.md?vue&type=template&id=faf63f7e */ \"./node_modules/vue-loader/dist/templateLoader.js?!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/fr-FR/tree.md?vue&type=template&id=faf63f7e\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return _node_modules_vue_loader_dist_templateLoader_js_ref_5_node_modules_vue_loader_dist_index_js_ref_3_0_build_md_loader_index_js_tree_md_vue_type_template_id_faf63f7e__WEBPACK_IMPORTED_MODULE_0__[\"render\"]; });\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9leGFtcGxlcy9kb2NzL2ZyLUZSL3RyZWUubWQ/MjE1OCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQSIsImZpbGUiOiIuL2V4YW1wbGVzL2RvY3MvZnItRlIvdHJlZS5tZD92dWUmdHlwZT10ZW1wbGF0ZSZpZD1mYWY2M2Y3ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvdGVtcGxhdGVMb2FkZXIuanM/P3JlZi0tNSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9yZWYtLTMtMCEuLi8uLi8uLi9idWlsZC9tZC1sb2FkZXIvaW5kZXguanMhLi90cmVlLm1kP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWZhZjYzZjdlXCIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./examples/docs/fr-FR/tree.md?vue&type=template&id=faf63f7e\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/fr-FR/tree.md?vue&type=script&lang=js":
/*!********************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/vue-loader/dist??ref--3-0!./build/md-loader!./examples/docs/fr-FR/tree.md?vue&type=script&lang=js ***!
  \********************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm-bundler.js\");\n/* harmony import */ var highlight_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! highlight.js */ \"./node_modules/highlight.js/lib/index.js\");\n/* harmony import */ var highlight_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(highlight_js__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'component-doc',\n  components: {\n    \"element-demo0\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_0__;\n\n      function render(_ctx, _cache) {\n        const _component_el_tree = _resolveComponent(\"el-tree\");\n\n        return _openBlock(), _createBlock(_component_el_tree, {\n          data: _ctx.data,\n          props: _ctx.defaultProps,\n          \"onNode-click\": _ctx.handleNodeClick\n        }, null, 8\n        /* PROPS */\n        , [\"data\", \"props\", \"onNode-click\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            data: [{\n              label: 'Niveau un 1',\n              children: [{\n                label: 'Niveau deux 1-1',\n                children: [{\n                  label: 'Niveau trois 1-1-1'\n                }]\n              }]\n            }, {\n              label: 'Niveau un 2',\n              children: [{\n                label: 'Niveau deux 2-1',\n                children: [{\n                  label: 'Niveau trois 2-1-1'\n                }]\n              }, {\n                label: 'Niveau deux 2-2',\n                children: [{\n                  label: 'Niveau trois 2-2-1'\n                }]\n              }]\n            }, {\n              label: 'Niveau un 3',\n              children: [{\n                label: 'Niveau deux 3-1',\n                children: [{\n                  label: 'Niveau trois 3-1-1'\n                }]\n              }, {\n                label: 'Niveau deux 3-2',\n                children: [{\n                  label: 'Niveau trois 3-2-1'\n                }]\n              }]\n            }],\n            defaultProps: {\n              children: 'children',\n              label: 'label'\n            }\n          };\n        },\n\n        methods: {\n          handleNodeClick(data) {\n            console.log(data);\n          }\n\n        }\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_1___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo1\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_0__;\n\n      function render(_ctx, _cache) {\n        const _component_el_tree = _resolveComponent(\"el-tree\");\n\n        return _openBlock(), _createBlock(_component_el_tree, {\n          props: _ctx.props,\n          load: _ctx.loadNode,\n          lazy: \"\",\n          \"show-checkbox\": \"\",\n          \"onCheck-change\": _ctx.handleCheckChange\n        }, null, 8\n        /* PROPS */\n        , [\"props\", \"load\", \"onCheck-change\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            props: {\n              label: 'name',\n              children: 'zones'\n            },\n            count: 1\n          };\n        },\n\n        methods: {\n          handleCheckChange(data, checked, indeterminate) {\n            console.log(data, checked, indeterminate);\n          },\n\n          handleNodeClick(data) {\n            console.log(data);\n          },\n\n          loadNode(node, resolve) {\n            if (node.level === 0) {\n              return resolve([{\n                name: 'Root1'\n              }, {\n                name: 'Root2'\n              }]);\n            }\n\n            if (node.level > 3) return resolve([]);\n            var hasChild;\n\n            if (node.data.name === 'region1') {\n              hasChild = true;\n            } else if (node.data.name === 'region2') {\n              hasChild = false;\n            } else {\n              hasChild = Math.random() > 0.5;\n            }\n\n            setTimeout(() => {\n              var data;\n\n              if (hasChild) {\n                data = [{\n                  name: 'zone' + this.count++\n                }, {\n                  name: 'zone' + this.count++\n                }];\n              } else {\n                data = [];\n              }\n\n              resolve(data);\n            }, 500);\n          }\n\n        }\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_1___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo2\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_0__;\n\n      function render(_ctx, _cache) {\n        const _component_el_tree = _resolveComponent(\"el-tree\");\n\n        return _openBlock(), _createBlock(_component_el_tree, {\n          props: _ctx.props,\n          load: _ctx.loadNode,\n          lazy: \"\",\n          \"show-checkbox\": \"\"\n        }, null, 8\n        /* PROPS */\n        , [\"props\", \"load\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            props: {\n              label: 'name',\n              children: 'zones',\n              isLeaf: 'leaf'\n            }\n          };\n        },\n\n        methods: {\n          loadNode(node, resolve) {\n            if (node.level === 0) {\n              return resolve([{\n                name: 'region'\n              }]);\n            }\n\n            if (node.level > 1) return resolve([]);\n            setTimeout(() => {\n              const data = [{\n                name: 'leaf',\n                leaf: true\n              }, {\n                name: 'zone'\n              }];\n              resolve(data);\n            }, 500);\n          }\n\n        }\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_1___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo3\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_0__;\n\n      function render(_ctx, _cache) {\n        const _component_el_tree = _resolveComponent(\"el-tree\");\n\n        return _openBlock(), _createBlock(_component_el_tree, {\n          data: _ctx.data,\n          props: _ctx.defaultProps,\n          \"show-checkbox\": \"\",\n          \"onCheck-change\": _ctx.handleCheckChange\n        }, null, 8\n        /* PROPS */\n        , [\"data\", \"props\", \"onCheck-change\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            data: [{\n              id: 1,\n              label: 'Niveau un 1',\n              children: [{\n                id: 3,\n                label: 'Niveau deux 2-1',\n                children: [{\n                  id: 4,\n                  label: 'Niveau trois 3-1-1'\n                }, {\n                  id: 5,\n                  label: 'Niveau trois 3-1-2',\n                  disabled: true\n                }]\n              }, {\n                id: 2,\n                label: 'Niveau deux 2-2',\n                disabled: true,\n                children: [{\n                  id: 6,\n                  label: 'Niveau trois 3-2-1'\n                }, {\n                  id: 7,\n                  label: 'Niveau trois 3-2-2',\n                  disabled: true\n                }]\n              }]\n            }],\n            defaultProps: {\n              children: 'children',\n              label: 'label',\n              disabled: 'disabled'\n            }\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_1___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo4\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_0__;\n\n      function render(_ctx, _cache) {\n        const _component_el_tree = _resolveComponent(\"el-tree\");\n\n        return _openBlock(), _createBlock(_component_el_tree, {\n          data: _ctx.data,\n          \"show-checkbox\": \"\",\n          \"node-key\": \"id\",\n          \"default-expanded-keys\": [2, 3],\n          \"default-checked-keys\": [5],\n          props: _ctx.defaultProps\n        }, null, 8\n        /* PROPS */\n        , [\"data\", \"props\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            data: [{\n              id: 1,\n              label: 'Niveau un 1',\n              children: [{\n                id: 4,\n                label: 'Niveau deux 1-1',\n                children: [{\n                  id: 9,\n                  label: 'Niveau trois 1-1-1'\n                }, {\n                  id: 10,\n                  label: 'Niveau trois 1-1-2'\n                }]\n              }]\n            }, {\n              id: 2,\n              label: 'Niveau un 2',\n              children: [{\n                id: 5,\n                label: 'Niveau deux 2-1'\n              }, {\n                id: 6,\n                label: 'Niveau deux 2-2'\n              }]\n            }, {\n              id: 3,\n              label: 'Niveau un 3',\n              children: [{\n                id: 7,\n                label: 'Niveau deux 3-1'\n              }, {\n                id: 8,\n                label: 'Niveau deux 3-2'\n              }]\n            }],\n            defaultProps: {\n              children: 'children',\n              label: 'label'\n            }\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_1___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo5\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        createTextVNode: _createTextVNode,\n        withCtx: _withCtx,\n        Fragment: _Fragment,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_0__;\n\n      function render(_ctx, _cache) {\n        const _component_el_tree = _resolveComponent(\"el-tree\");\n\n        const _component_el_button = _resolveComponent(\"el-button\");\n\n        return _openBlock(), _createBlock(_Fragment, null, [_createVNode(_component_el_tree, {\n          data: _ctx.data,\n          \"show-checkbox\": \"\",\n          \"default-expand-all\": \"\",\n          \"node-key\": \"id\",\n          ref: \"tree\",\n          \"highlight-current\": \"\",\n          props: _ctx.defaultProps\n        }, null, 8\n        /* PROPS */\n        , [\"data\", \"props\"]), _createVNode(\"div\", {\n          class: \"buttons\"\n        }, [_createVNode(_component_el_button, {\n          onClick: _ctx.getCheckedNodes\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"Récupération par noeud\")]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"onClick\"]), _createVNode(_component_el_button, {\n          onClick: _ctx.getCheckedKeys\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"Récupération par clé\")]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"onClick\"]), _createVNode(_component_el_button, {\n          onClick: _ctx.setCheckedNodes\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"Sélection par noeud\")]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"onClick\"]), _createVNode(_component_el_button, {\n          onClick: _ctx.setCheckedKeys\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"Sélection par clé\")]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"onClick\"]), _createVNode(_component_el_button, {\n          onClick: _ctx.resetChecked\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"Reset\")]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"onClick\"])])], 64\n        /* STABLE_FRAGMENT */\n        );\n      }\n\n      const democomponentExport = {\n        methods: {\n          getCheckedNodes() {\n            console.log(this.$refs.tree.getCheckedNodes());\n          },\n\n          getCheckedKeys() {\n            console.log(this.$refs.tree.getCheckedKeys());\n          },\n\n          setCheckedNodes() {\n            this.$refs.tree.setCheckedNodes([{\n              id: 5,\n              label: 'Niveau deux 2-1'\n            }, {\n              id: 9,\n              label: 'Niveau trois 1-1-1'\n            }]);\n          },\n\n          setCheckedKeys() {\n            this.$refs.tree.setCheckedKeys([3]);\n          },\n\n          resetChecked() {\n            this.$refs.tree.setCheckedKeys([]);\n          }\n\n        },\n\n        data() {\n          return {\n            data: [{\n              id: 1,\n              label: 'Niveau un 1',\n              children: [{\n                id: 4,\n                label: 'Niveau deux 1-1',\n                children: [{\n                  id: 9,\n                  label: 'Niveau trois 1-1-1'\n                }, {\n                  id: 10,\n                  label: 'Niveau trois 1-1-2'\n                }]\n              }]\n            }, {\n              id: 2,\n              label: 'Niveau un 2',\n              children: [{\n                id: 5,\n                label: 'Niveau deux 2-1'\n              }, {\n                id: 6,\n                label: 'Niveau deux 2-2'\n              }]\n            }, {\n              id: 3,\n              label: 'Niveau un 3',\n              children: [{\n                id: 7,\n                label: 'Niveau deux 3-1'\n              }, {\n                id: 8,\n                label: 'Niveau deux 3-2'\n              }]\n            }],\n            defaultProps: {\n              children: 'children',\n              label: 'label'\n            }\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_1___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo6\": function () {\n      const {\n        createVNode: _createVNode,\n        resolveComponent: _resolveComponent,\n        toDisplayString: _toDisplayString,\n        createTextVNode: _createTextVNode,\n        withCtx: _withCtx,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_0__;\n\n      function render(_ctx, _cache) {\n        const _component_el_tree = _resolveComponent(\"el-tree\");\n\n        const _component_el_button = _resolveComponent(\"el-button\");\n\n        return _openBlock(), _createBlock(\"div\", {\n          class: \"custom-tree-container\"\n        }, [_createVNode(\"div\", {\n          class: \"block\"\n        }, [_createVNode(\"p\", null, \"Avec render-content\"), _createVNode(_component_el_tree, {\n          data: _ctx.data,\n          \"show-checkbox\": \"\",\n          \"node-key\": \"id\",\n          \"default-expand-all\": \"\",\n          \"expand-on-click-node\": false,\n          \"render-content\": _ctx.renderContent\n        }, null, 8\n        /* PROPS */\n        , [\"data\", \"render-content\"])]), _createVNode(\"div\", {\n          class: \"block\"\n        }, [_createVNode(\"p\", null, \"Avec un slot\"), _createVNode(_component_el_tree, {\n          data: _ctx.data,\n          \"show-checkbox\": \"\",\n          \"node-key\": \"id\",\n          \"default-expand-all\": \"\",\n          \"expand-on-click-node\": false\n        }, {\n          default: _withCtx(() => [_createVNode(\"span\", {\n            class: \"custom-tree-node\",\n            \"slot-scope\": \"{ node, data }\"\n          }, [_createVNode(\"span\", null, _toDisplayString(_ctx.node.label), 1\n          /* TEXT */\n          ), _createVNode(\"span\", null, [_createVNode(_component_el_button, {\n            type: \"text\",\n            size: \"mini\",\n            onClick: () => _ctx.append(_ctx.data)\n          }, {\n            default: _withCtx(() => [_createTextVNode(\" Ajouter \")]),\n            _: 1\n          }, 8\n          /* PROPS */\n          , [\"onClick\"]), _createVNode(_component_el_button, {\n            type: \"text\",\n            size: \"mini\",\n            onClick: () => _ctx.remove(_ctx.node, _ctx.data)\n          }, {\n            default: _withCtx(() => [_createTextVNode(\" Supprimer \")]),\n            _: 1\n          }, 8\n          /* PROPS */\n          , [\"onClick\"])])])]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"data\"])])]);\n      }\n\n      let id = 1000;\n      const democomponentExport = {\n        data() {\n          const data = [{\n            id: 1,\n            label: 'Niveau un 1',\n            children: [{\n              id: 4,\n              label: 'Niveau deux 1-1',\n              children: [{\n                id: 9,\n                label: 'Niveau trois 1-1-1'\n              }, {\n                id: 10,\n                label: 'Niveau trois 1-1-2'\n              }]\n            }]\n          }, {\n            id: 2,\n            label: 'Niveau un 2',\n            children: [{\n              id: 5,\n              label: 'Niveau deux 2-1'\n            }, {\n              id: 6,\n              label: 'Niveau deux 2-2'\n            }]\n          }, {\n            id: 3,\n            label: 'Niveau un 3',\n            children: [{\n              id: 7,\n              label: 'Niveau deux 3-1'\n            }, {\n              id: 8,\n              label: 'Niveau deux 3-2'\n            }]\n          }];\n          return {\n            data: JSON.parse(JSON.stringify(data)),\n            data: JSON.parse(JSON.stringify(data))\n          };\n        },\n\n        methods: {\n          append(data) {\n            const newChild = {\n              id: id++,\n              label: 'testtest',\n              children: []\n            };\n\n            if (!data.children) {\n              this.$set(data, 'children', []);\n            }\n\n            data.children.push(newChild);\n          },\n\n          remove(node, data) {\n            const parent = node.parent;\n            const children = parent.data.children || parent.data;\n            const index = children.findIndex(d => d.id === data.id);\n            children.splice(index, 1);\n          },\n\n          renderContent(h, {\n            node,\n            data,\n            store\n          }) {\n            return Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"span\", {\n              \"class\": \"custom-tree-node\"\n            }, [Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"span\", null, [node.label]), Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"span\", null, [Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"el-button\"), {\n              \"size\": \"mini\",\n              \"type\": \"text\",\n              \"on-click\": () => this.append(data)\n            }, {\n              default: () => [Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Ajouter\")]\n            }), Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"el-button\"), {\n              \"size\": \"mini\",\n              \"type\": \"text\",\n              \"on-click\": () => this.remove(node, data)\n            }, {\n              default: () => [Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Supprimer\")]\n            })])]);\n          }\n\n        }\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_1___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo7\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        Fragment: _Fragment,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_0__;\n\n      function render(_ctx, _cache) {\n        const _component_el_input = _resolveComponent(\"el-input\");\n\n        const _component_el_tree = _resolveComponent(\"el-tree\");\n\n        return _openBlock(), _createBlock(_Fragment, null, [_createVNode(_component_el_input, {\n          placeholder: \"Filter keyword\",\n          modelValue: _ctx.filterText,\n          \"onUpdate:modelValue\": $event => _ctx.filterText = $event\n        }, null, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"]), _createVNode(_component_el_tree, {\n          class: \"filter-tree\",\n          data: _ctx.data,\n          props: _ctx.defaultProps,\n          \"default-expand-all\": \"\",\n          \"filter-node-method\": _ctx.filterNode,\n          ref: \"tree\"\n        }, null, 8\n        /* PROPS */\n        , [\"data\", \"props\", \"filter-node-method\"])], 64\n        /* STABLE_FRAGMENT */\n        );\n      }\n\n      const democomponentExport = {\n        watch: {\n          filterText(val) {\n            this.$refs.tree.filter(val);\n          }\n\n        },\n        methods: {\n          filterNode(value, data) {\n            if (!value) return true;\n            return data.label.indexOf(value) !== -1;\n          }\n\n        },\n\n        data() {\n          return {\n            filterText: '',\n            data: [{\n              id: 1,\n              label: 'Niveau un 1',\n              children: [{\n                id: 4,\n                label: 'Niveau deux 1-1',\n                children: [{\n                  id: 9,\n                  label: 'Niveau trois 1-1-1'\n                }, {\n                  id: 10,\n                  label: 'Niveau trois 1-1-2'\n                }]\n              }]\n            }, {\n              id: 2,\n              label: 'Niveau un 2',\n              children: [{\n                id: 5,\n                label: 'Niveau deux 2-1'\n              }, {\n                id: 6,\n                label: 'Niveau deux 2-2'\n              }]\n            }, {\n              id: 3,\n              label: 'Niveau un 3',\n              children: [{\n                id: 7,\n                label: 'Niveau deux 3-1'\n              }, {\n                id: 8,\n                label: 'Niveau deux 3-2'\n              }]\n            }],\n            defaultProps: {\n              children: 'children',\n              label: 'label'\n            }\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_1___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo8\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_0__;\n\n      function render(_ctx, _cache) {\n        const _component_el_tree = _resolveComponent(\"el-tree\");\n\n        return _openBlock(), _createBlock(_component_el_tree, {\n          data: _ctx.data,\n          props: _ctx.defaultProps,\n          accordion: \"\",\n          \"onNode-click\": _ctx.handleNodeClick\n        }, null, 8\n        /* PROPS */\n        , [\"data\", \"props\", \"onNode-click\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            data: [{\n              label: 'Niveau un 1',\n              children: [{\n                label: 'Niveau deux 1-1',\n                children: [{\n                  label: 'Niveau trois 1-1-1'\n                }]\n              }]\n            }, {\n              label: 'Niveau un 2',\n              children: [{\n                label: 'Niveau deux 2-1',\n                children: [{\n                  label: 'Niveau trois 2-1-1'\n                }]\n              }, {\n                label: 'Niveau deux 2-2',\n                children: [{\n                  label: 'Niveau trois 2-2-1'\n                }]\n              }]\n            }, {\n              label: 'Niveau un 3',\n              children: [{\n                label: 'Niveau deux 3-1',\n                children: [{\n                  label: 'Niveau trois 3-1-1'\n                }]\n              }, {\n                label: 'Niveau deux 3-2',\n                children: [{\n                  label: 'Niveau trois 3-2-1'\n                }]\n              }]\n            }],\n            defaultProps: {\n              children: 'children',\n              label: 'label'\n            }\n          };\n        },\n\n        methods: {\n          handleNodeClick(data) {\n            console.log(data);\n          }\n\n        }\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_1___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo9\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_0__;\n\n      function render(_ctx, _cache) {\n        const _component_el_tree = _resolveComponent(\"el-tree\");\n\n        return _openBlock(), _createBlock(_component_el_tree, {\n          data: _ctx.data,\n          \"node-key\": \"id\",\n          \"default-expand-all\": \"\",\n          \"onNode-drag-start\": _ctx.handleDragStart,\n          \"onNode-drag-enter\": _ctx.handleDragEnter,\n          \"onNode-drag-leave\": _ctx.handleDragLeave,\n          \"onNode-drag-over\": _ctx.handleDragOver,\n          \"onNode-drag-end\": _ctx.handleDragEnd,\n          \"onNode-drop\": _ctx.handleDrop,\n          draggable: \"\",\n          \"allow-drop\": _ctx.allowDrop,\n          \"allow-drag\": _ctx.allowDrag\n        }, null, 8\n        /* PROPS */\n        , [\"data\", \"onNode-drag-start\", \"onNode-drag-enter\", \"onNode-drag-leave\", \"onNode-drag-over\", \"onNode-drag-end\", \"onNode-drop\", \"allow-drop\", \"allow-drag\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            data: [{\n              label: 'Niveau un 1',\n              children: [{\n                label: 'Niveau deux 1-1',\n                children: [{\n                  label: 'Niveau trois 1-1-1'\n                }]\n              }]\n            }, {\n              label: 'Niveau un 2',\n              children: [{\n                label: 'Niveau deux 2-1',\n                children: [{\n                  label: 'Niveau trois 2-1-1'\n                }]\n              }, {\n                label: 'Niveau deux 2-2',\n                children: [{\n                  label: 'Niveau trois 2-2-1'\n                }]\n              }]\n            }, {\n              label: 'Niveau un 3',\n              children: [{\n                label: 'Niveau deux 3-1',\n                children: [{\n                  label: 'Niveau trois 3-1-1'\n                }]\n              }, {\n                label: 'Niveau deux 3-2',\n                children: [{\n                  label: 'Niveau trois 3-2-1'\n                }]\n              }]\n            }],\n            defaultProps: {\n              children: 'children',\n              label: 'label'\n            }\n          };\n        },\n\n        methods: {\n          handleDragStart(node, ev) {\n            console.log('drag start', node);\n          },\n\n          handleDragEnter(draggingNode, dropNode, ev) {\n            console.log('tree drag enter: ', dropNode.label);\n          },\n\n          handleDragLeave(draggingNode, dropNode, ev) {\n            console.log('tree drag leave: ', dropNode.label);\n          },\n\n          handleDragOver(draggingNode, dropNode, ev) {\n            console.log('tree drag over: ', dropNode.label);\n          },\n\n          handleDragEnd(draggingNode, dropNode, dropType, ev) {\n            console.log('tree drag end: ', dropNode && dropNode.label, dropType);\n          },\n\n          handleDrop(draggingNode, dropNode, dropType, ev) {\n            console.log('tree drop: ', dropNode.label, dropType);\n          },\n\n          allowDrop(draggingNode, dropNode, type) {\n            if (dropNode.data.label === 'Niveau deux 3-1') {\n              return type !== 'inner';\n            } else {\n              return true;\n            }\n          },\n\n          allowDrag(draggingNode) {\n            return draggingNode.data.label.indexOf('Niveau trois 3-1-1') === -1;\n          }\n\n        }\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_1___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }()\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/fr-FR/tree.md?vue&type=script&lang=js\n");

/***/ }),

/***/ "./node_modules/vue-loader/dist/templateLoader.js?!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/fr-FR/tree.md?vue&type=template&id=faf63f7e":
/*!***************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/dist/templateLoader.js??ref--5!./node_modules/vue-loader/dist??ref--3-0!./build/md-loader!./examples/docs/fr-FR/tree.md?vue&type=template&id=faf63f7e ***!
  \***************************************************************************************************************************************************************************************/
/*! exports provided: render */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return render; });\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm-bundler.js\");\n\n\nconst _hoisted_1 = { class: \"content element-doc\" }\nconst _hoisted_2 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h2\", { id: \"tree\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#tree\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Tree\")\n], -1 /* HOISTED */)\nconst _hoisted_3 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Affiche un ensemble de données possédant plusieurs niveaux de hiérarchie ou d'imbrication.\", -1 /* HOISTED */)\nconst _hoisted_4 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"usage\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#usage\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Usage\")\n], -1 /* HOISTED */)\nconst _hoisted_5 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Voici la structure basique.\", -1 /* HOISTED */)\nconst _hoisted_6 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<el-tree :data=\\\"data\\\" :props=\\\"defaultProps\\\" @node-click=\\\"handleNodeClick\\\"></el-tree>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        data: [{\\n          label: 'Niveau un 1',\\n          children: [{\\n            label: 'Niveau deux 1-1',\\n            children: [{\\n              label: 'Niveau trois 1-1-1'\\n            }]\\n          }]\\n        }, {\\n          label: 'Niveau un 2',\\n          children: [{\\n            label: 'Niveau deux 2-1',\\n            children: [{\\n              label: 'Niveau trois 2-1-1'\\n            }]\\n          }, {\\n            label: 'Niveau deux 2-2',\\n            children: [{\\n              label: 'Niveau trois 2-2-1'\\n            }]\\n          }]\\n        }, {\\n          label: 'Niveau un 3',\\n          children: [{\\n            label: 'Niveau deux 3-1',\\n            children: [{\\n              label: 'Niveau trois 3-1-1'\\n            }]\\n          }, {\\n            label: 'Niveau deux 3-2',\\n            children: [{\\n              label: 'Niveau trois 3-2-1'\\n            }]\\n          }]\\n        }],\\n        defaultProps: {\\n          children: 'children',\\n          label: 'label'\\n        }\\n      };\\n    },\\n    methods: {\\n      handleNodeClick(data) {\\n        console.log(data);\\n      }\\n    }\\n  };\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_7 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"selection\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#selection\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Sélection\")\n], -1 /* HOISTED */)\nconst _hoisted_8 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Vous pouvez activer la sélection des noeuds.\", -1 /* HOISTED */)\nconst _hoisted_9 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"cet exemple montre également comment charger des données de manière asynchrone.\")\n], -1 /* HOISTED */)\nconst _hoisted_10 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<el-tree\\n  :props=\\\"props\\\"\\n  :load=\\\"loadNode\\\"\\n  lazy\\n  show-checkbox\\n  @check-change=\\\"handleCheckChange\\\">\\n</el-tree>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        props: {\\n          label: 'name',\\n          children: 'zones'\\n        },\\n        count: 1\\n      };\\n    },\\n    methods: {\\n      handleCheckChange(data, checked, indeterminate) {\\n        console.log(data, checked, indeterminate);\\n      },\\n      handleNodeClick(data) {\\n        console.log(data);\\n      },\\n      loadNode(node, resolve) {\\n        if (node.level === 0) {\\n          return resolve([{ name: 'Root1' }, { name: 'Root2' }]);\\n        }\\n        if (node.level > 3) return resolve([]);\\n\\n        var hasChild;\\n        if (node.data.name === 'region1') {\\n          hasChild = true;\\n        } else if (node.data.name === 'region2') {\\n          hasChild = false;\\n        } else {\\n          hasChild = Math.random() > 0.5;\\n        }\\n\\n        setTimeout(() => {\\n          var data;\\n          if (hasChild) {\\n            data = [{\\n              name: 'zone' + this.count++\\n            }, {\\n              name: 'zone' + this.count++\\n            }];\\n          } else {\\n            data = [];\\n          }\\n\\n          resolve(data);\\n        }, 500);\\n      }\\n    }\\n  };\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_11 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"noeud-feuille-personnalises-en-mode-lazy\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#noeud-feuille-personnalises-en-mode-lazy\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Noeud-feuille personnalisés en mode lazy\")\n], -1 /* HOISTED */)\nconst _hoisted_12 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Les données d'un noeud ne sont pas accessibles tant que la noeud n'est pas cliqué, l'arbre ne peut donc pas prédire si un noeud sera une feuille. C'est pourquoi un bouton de menu est ajouté à chaque noeud, et si c'est une feuille il disparaîtra après le clic. Vous pouvez également dire par avance à l'arbre si un noeud est une feuille, pour éviter l'apparition du bouton de menu.\")\n], -1 /* HOISTED */)\nconst _hoisted_13 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<el-tree\\n  :props=\\\"props\\\"\\n  :load=\\\"loadNode\\\"\\n  lazy\\n  show-checkbox>\\n</el-tree>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        props: {\\n          label: 'name',\\n          children: 'zones',\\n          isLeaf: 'leaf'\\n        },\\n      };\\n    },\\n    methods: {\\n      loadNode(node, resolve) {\\n        if (node.level === 0) {\\n          return resolve([{ name: 'region' }]);\\n        }\\n        if (node.level > 1) return resolve([]);\\n\\n        setTimeout(() => {\\n          const data = [{\\n            name: 'leaf',\\n            leaf: true\\n          }, {\\n            name: 'zone'\\n          }];\\n\\n          resolve(data);\\n        }, 500);\\n      }\\n    }\\n  };\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_14 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"checkbox-desactivees\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#checkbox-desactivees\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Checkbox désactivées\")\n], -1 /* HOISTED */)\nconst _hoisted_15 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Les checkbox des noeuds peuvent être désactivées individuellement.\", -1 /* HOISTED */)\nconst _hoisted_16 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Dans cet exemple, la propriété \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"disabled\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" est ajoutée à \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"defaultProps\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\", et certains noeuds ont \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"disabled:true\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\". Les checkbox correspondantes sont donc désactivées.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_17 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<el-tree\\n  :data=\\\"data\\\"\\n  :props=\\\"defaultProps\\\"\\n  show-checkbox\\n  @check-change=\\\"handleCheckChange\\\">\\n</el-tree>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        data: [{\\n          id: 1,\\n          label: 'Niveau un 1',\\n          children: [{\\n            id: 3,\\n            label: 'Niveau deux 2-1',\\n            children: [{\\n              id: 4,\\n              label: 'Niveau trois 3-1-1'\\n            }, {\\n              id: 5,\\n              label: 'Niveau trois 3-1-2',\\n              disabled: true\\n            }]\\n          }, {\\n            id: 2,\\n            label: 'Niveau deux 2-2',\\n            disabled: true,\\n            children: [{\\n              id: 6,\\n              label: 'Niveau trois 3-2-1'\\n            }, {\\n              id: 7,\\n              label: 'Niveau trois 3-2-2',\\n              disabled: true\\n            }]\\n          }]\\n        }],\\n        defaultProps: {\\n            children: 'children',\\n            label: 'label',\\n            disabled: 'disabled',\\n        },\\n      };\\n    }\\n  };\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_18 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"ouverture-et-selection-par-defaut\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#ouverture-et-selection-par-defaut\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Ouverture et sélection par défaut\")\n], -1 /* HOISTED */)\nconst _hoisted_19 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Certains noeuds peuvent être ouverts et/ou sélectionnés par défaut.\", -1 /* HOISTED */)\nconst _hoisted_20 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Utilisez \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"default-expanded-keys\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" et \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"default-checked-keys\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" pour réglez respectivement les noeuds ouverts et les noeuds sélectionnés par défaut. Notez que \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"node-key\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" est requis dans ce cas. Sa valeurs est le nom d'une clé dans l'objets data, et sa valeur devrait être unique dans tout l'arbre.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_21 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<el-tree\\n  :data=\\\"data\\\"\\n  show-checkbox\\n  node-key=\\\"id\\\"\\n  :default-expanded-keys=\\\"[2, 3]\\\"\\n  :default-checked-keys=\\\"[5]\\\"\\n  :props=\\\"defaultProps\\\">\\n</el-tree>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        data: [{\\n          id: 1,\\n          label: 'Niveau un 1',\\n          children: [{\\n            id: 4,\\n            label: 'Niveau deux 1-1',\\n            children: [{\\n              id: 9,\\n              label: 'Niveau trois 1-1-1'\\n            }, {\\n              id: 10,\\n              label: 'Niveau trois 1-1-2'\\n            }]\\n          }]\\n        }, {\\n          id: 2,\\n          label: 'Niveau un 2',\\n          children: [{\\n            id: 5,\\n            label: 'Niveau deux 2-1'\\n          }, {\\n            id: 6,\\n            label: 'Niveau deux 2-2'\\n          }]\\n        }, {\\n          id: 3,\\n          label: 'Niveau un 3',\\n          children: [{\\n            id: 7,\\n            label: 'Niveau deux 3-1'\\n          }, {\\n            id: 8,\\n            label: 'Niveau deux 3-2'\\n          }]\\n        }],\\n        defaultProps: {\\n          children: 'children',\\n          label: 'label'\\n        }\\n      };\\n    }\\n  };\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_22 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"selectionner-des-noeuds\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#selectionner-des-noeuds\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Sélectionner des noeuds\")\n], -1 /* HOISTED */)\nconst _hoisted_23 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Cet exemple montre comment récupérer et sélectionner des noeuds. Vous pouvez utiliser deux approches: les noeuds ou les clés. Dans le cas des clés, \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"node-key\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" est requis.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_24 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<el-tree\\n  :data=\\\"data\\\"\\n  show-checkbox\\n  default-expand-all\\n  node-key=\\\"id\\\"\\n  ref=\\\"tree\\\"\\n  highlight-current\\n  :props=\\\"defaultProps\\\">\\n</el-tree>\\n\\n<div class=\\\"buttons\\\">\\n  <el-button @click=\\\"getCheckedNodes\\\">Récupération par noeud</el-button>\\n  <el-button @click=\\\"getCheckedKeys\\\">Récupération par clé</el-button>\\n  <el-button @click=\\\"setCheckedNodes\\\">Sélection par noeud</el-button>\\n  <el-button @click=\\\"setCheckedKeys\\\">Sélection par clé</el-button>\\n  <el-button @click=\\\"resetChecked\\\">Reset</el-button>\\n</div>\\n\\n<script>\\n  export default {\\n    methods: {\\n      getCheckedNodes() {\\n        console.log(this.$refs.tree.getCheckedNodes());\\n      },\\n      getCheckedKeys() {\\n        console.log(this.$refs.tree.getCheckedKeys());\\n      },\\n      setCheckedNodes() {\\n        this.$refs.tree.setCheckedNodes([{\\n          id: 5,\\n          label: 'Niveau deux 2-1'\\n        }, {\\n          id: 9,\\n          label: 'Niveau trois 1-1-1'\\n        }]);\\n      },\\n      setCheckedKeys() {\\n        this.$refs.tree.setCheckedKeys([3]);\\n      },\\n      resetChecked() {\\n        this.$refs.tree.setCheckedKeys([]);\\n      }\\n    },\\n\\n    data() {\\n      return {\\n        data: [{\\n          id: 1,\\n          label: 'Niveau un 1',\\n          children: [{\\n            id: 4,\\n            label: 'Niveau deux 1-1',\\n            children: [{\\n              id: 9,\\n              label: 'Niveau trois 1-1-1'\\n            }, {\\n              id: 10,\\n              label: 'Niveau trois 1-1-2'\\n            }]\\n          }]\\n        }, {\\n          id: 2,\\n          label: 'Niveau un 2',\\n          children: [{\\n            id: 5,\\n            label: 'Niveau deux 2-1'\\n          }, {\\n            id: 6,\\n            label: 'Niveau deux 2-2'\\n          }]\\n        }, {\\n          id: 3,\\n          label: 'Niveau un 3',\\n          children: [{\\n            id: 7,\\n            label: 'Niveau deux 3-1'\\n          }, {\\n            id: 8,\\n            label: 'Niveau deux 3-2'\\n          }]\\n        }],\\n        defaultProps: {\\n          children: 'children',\\n          label: 'label'\\n        }\\n      };\\n    }\\n  };\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_25 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"contenu-personnalise\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#contenu-personnalise\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Contenu personnalisé\")\n], -1 /* HOISTED */)\nconst _hoisted_26 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Le contenu des noeuds peut être personnalisé, afin de pouvoir ajouter des icônes ou des boutons par exemple.\", -1 /* HOISTED */)\nconst _hoisted_27 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Il existe deux méthodes de personnalisation: \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"render-content\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" et les slots avec portée. Utilisez \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"render-content\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" pour assigner une fonction de rendu qui va générer le contenu des noeuds. Voire la documentation de Vue pour plus d'informations. Si vous préférez les slots, vous aurez accès à \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"node\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" et \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"data\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" dans le scope, corerspondant à l'objet TreeNode et aux données du noeud courant. Notez que la démo de \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"render-content\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" ne marche pas dans jsfiddle car il ne supporte pas JSX. Dans un vrai projet, \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"render-content\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" marchera si les dépendances sont satisfaites.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_28 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<div class=\\\"custom-tree-container\\\">\\n  <div class=\\\"block\\\">\\n    <p>Avec render-content</p>\\n    <el-tree\\n      :data=\\\"data\\\"\\n      show-checkbox\\n      node-key=\\\"id\\\"\\n      default-expand-all\\n      :expand-on-click-node=\\\"false\\\"\\n      :render-content=\\\"renderContent\\\">\\n    </el-tree>\\n  </div>\\n  <div class=\\\"block\\\">\\n    <p>Avec un slot</p>\\n    <el-tree\\n      :data=\\\"data\\\"\\n      show-checkbox\\n      node-key=\\\"id\\\"\\n      default-expand-all\\n      :expand-on-click-node=\\\"false\\\">\\n      <span class=\\\"custom-tree-node\\\" slot-scope=\\\"{ node, data }\\\">\\n        <span>{{ node.label }}</span>\\n        <span>\\n          <el-button\\n            type=\\\"text\\\"\\n            size=\\\"mini\\\"\\n            @click=\\\"() => append(data)\\\">\\n            Ajouter\\n          </el-button>\\n          <el-button\\n            type=\\\"text\\\"\\n            size=\\\"mini\\\"\\n            @click=\\\"() => remove(node, data)\\\">\\n            Supprimer\\n          </el-button>\\n        </span>\\n      </span>\\n    </el-tree>\\n  </div>\\n</div>\\n\\n<script>\\n  let id = 1000;\\n\\n  export default {\\n    data() {\\n      const data = [{\\n        id: 1,\\n        label: 'Niveau un 1',\\n        children: [{\\n          id: 4,\\n          label: 'Niveau deux 1-1',\\n          children: [{\\n            id: 9,\\n            label: 'Niveau trois 1-1-1'\\n          }, {\\n            id: 10,\\n            label: 'Niveau trois 1-1-2'\\n          }]\\n        }]\\n      }, {\\n        id: 2,\\n        label: 'Niveau un 2',\\n        children: [{\\n          id: 5,\\n          label: 'Niveau deux 2-1'\\n        }, {\\n          id: 6,\\n          label: 'Niveau deux 2-2'\\n        }]\\n      }, {\\n        id: 3,\\n        label: 'Niveau un 3',\\n        children: [{\\n          id: 7,\\n          label: 'Niveau deux 3-1'\\n        }, {\\n          id: 8,\\n          label: 'Niveau deux 3-2'\\n        }]\\n      }];\\n      return {\\n        data: JSON.parse(JSON.stringify(data)),\\n        data: JSON.parse(JSON.stringify(data))\\n      }\\n    },\\n\\n    methods: {\\n      append(data) {\\n        const newChild = { id: id++, label: 'testtest', children: [] };\\n        if (!data.children) {\\n          this.$set(data, 'children', []);\\n        }\\n        data.children.push(newChild);\\n      },\\n\\n      remove(node, data) {\\n        const parent = node.parent;\\n        const children = parent.data.children || parent.data;\\n        const index = children.findIndex(d => d.id === data.id);\\n        children.splice(index, 1);\\n      },\\n\\n      renderContent(h, { node, data, store }) {\\n        return (\\n          <span class=\\\"custom-tree-node\\\">\\n            <span>{node.label}</span>\\n            <span>\\n              <el-button size=\\\"mini\\\" type=\\\"text\\\" on-click={ () => this.append(data) }>Ajouter</el-button>\\n              <el-button size=\\\"mini\\\" type=\\\"text\\\" on-click={ () => this.remove(node, data) }>Supprimer</el-button>\\n            </span>\\n          </span>);\\n      }\\n    }\\n  };\\n</script>\\n\\n<style>\\n  .custom-tree-node {\\n    flex: 1;\\n    display: flex;\\n    align-items: center;\\n    justify-content: space-between;\\n    font-size: 14px;\\n    padding-right: 8px;\\n  }\\n</style>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_29 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"filtrage\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#filtrage\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Filtrage\")\n], -1 /* HOISTED */)\nconst _hoisted_30 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Les noeuds peuvent être filtrés par mot-clé.\", -1 /* HOISTED */)\nconst _hoisted_31 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Utilisez la méthode \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"filter\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" de l'instance de Tree pour pouvoir filtrer les noeuds, son paramètre étant le mot-clé. Notez que pour que cela fonctionne, \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"filter-node-method\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" est requis, sa valeur étant la méthode de filtrage.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_32 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<el-input\\n  placeholder=\\\"Filter keyword\\\"\\n  v-model=\\\"filterText\\\">\\n</el-input>\\n\\n<el-tree\\n  class=\\\"filter-tree\\\"\\n  :data=\\\"data\\\"\\n  :props=\\\"defaultProps\\\"\\n  default-expand-all\\n  :filter-node-method=\\\"filterNode\\\"\\n  ref=\\\"tree\\\">\\n</el-tree>\\n\\n<script>\\n  export default {\\n    watch: {\\n      filterText(val) {\\n        this.$refs.tree.filter(val);\\n      }\\n    },\\n\\n    methods: {\\n      filterNode(value, data) {\\n        if (!value) return true;\\n        return data.label.indexOf(value) !== -1;\\n      }\\n    },\\n\\n    data() {\\n      return {\\n        filterText: '',\\n        data: [{\\n          id: 1,\\n          label: 'Niveau un 1',\\n          children: [{\\n            id: 4,\\n            label: 'Niveau deux 1-1',\\n            children: [{\\n              id: 9,\\n              label: 'Niveau trois 1-1-1'\\n            }, {\\n              id: 10,\\n              label: 'Niveau trois 1-1-2'\\n            }]\\n          }]\\n        }, {\\n          id: 2,\\n          label: 'Niveau un 2',\\n          children: [{\\n            id: 5,\\n            label: 'Niveau deux 2-1'\\n          }, {\\n            id: 6,\\n            label: 'Niveau deux 2-2'\\n          }]\\n        }, {\\n          id: 3,\\n          label: 'Niveau un 3',\\n          children: [{\\n            id: 7,\\n            label: 'Niveau deux 3-1'\\n          }, {\\n            id: 8,\\n            label: 'Niveau deux 3-2'\\n          }]\\n        }],\\n        defaultProps: {\\n          children: 'children',\\n          label: 'label'\\n        }\\n      };\\n    }\\n  };\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_33 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"accordeon\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#accordeon\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Accordéon\")\n], -1 /* HOISTED */)\nconst _hoisted_34 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Vous pouvez utiliser un mode accordéon afin que seul un noeud par niveau soit ouvert.\", -1 /* HOISTED */)\nconst _hoisted_35 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<el-tree\\n  :data=\\\"data\\\"\\n  :props=\\\"defaultProps\\\"\\n  accordion\\n  @node-click=\\\"handleNodeClick\\\">\\n</el-tree>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        data: [{\\n          label: 'Niveau un 1',\\n          children: [{\\n            label: 'Niveau deux 1-1',\\n            children: [{\\n              label: 'Niveau trois 1-1-1'\\n            }]\\n          }]\\n        }, {\\n          label: 'Niveau un 2',\\n          children: [{\\n            label: 'Niveau deux 2-1',\\n            children: [{\\n              label: 'Niveau trois 2-1-1'\\n            }]\\n          }, {\\n            label: 'Niveau deux 2-2',\\n            children: [{\\n              label: 'Niveau trois 2-2-1'\\n            }]\\n          }]\\n        }, {\\n          label: 'Niveau un 3',\\n          children: [{\\n            label: 'Niveau deux 3-1',\\n            children: [{\\n              label: 'Niveau trois 3-1-1'\\n            }]\\n          }, {\\n            label: 'Niveau deux 3-2',\\n            children: [{\\n              label: 'Niveau trois 3-2-1'\\n            }]\\n          }]\\n        }],\\n        defaultProps: {\\n          children: 'children',\\n          label: 'label'\\n        }\\n      };\\n    },\\n    methods: {\\n      handleNodeClick(data) {\\n        console.log(data);\\n      }\\n    }\\n  };\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_36 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"noeuds-deplacables\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#noeuds-deplacables\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Noeuds déplaçables\")\n], -1 /* HOISTED */)\nconst _hoisted_37 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Vous pouvez déplacer les noeuds par drag'n drop en ajoutant l'attribut \"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"draggable\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\".\")\n], -1 /* HOISTED */)\nconst _hoisted_38 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<el-tree\\n  :data=\\\"data\\\"\\n  node-key=\\\"id\\\"\\n  default-expand-all\\n  @node-drag-start=\\\"handleDragStart\\\"\\n  @node-drag-enter=\\\"handleDragEnter\\\"\\n  @node-drag-leave=\\\"handleDragLeave\\\"\\n  @node-drag-over=\\\"handleDragOver\\\"\\n  @node-drag-end=\\\"handleDragEnd\\\"\\n  @node-drop=\\\"handleDrop\\\"\\n  draggable\\n  :allow-drop=\\\"allowDrop\\\"\\n  :allow-drag=\\\"allowDrag\\\">\\n</el-tree>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        data: [{\\n          label: 'Niveau un 1',\\n          children: [{\\n            label: 'Niveau deux 1-1',\\n            children: [{\\n              label: 'Niveau trois 1-1-1'\\n            }]\\n          }]\\n        }, {\\n          label: 'Niveau un 2',\\n          children: [{\\n            label: 'Niveau deux 2-1',\\n            children: [{\\n              label: 'Niveau trois 2-1-1'\\n            }]\\n          }, {\\n            label: 'Niveau deux 2-2',\\n            children: [{\\n              label: 'Niveau trois 2-2-1'\\n            }]\\n          }]\\n        }, {\\n          label: 'Niveau un 3',\\n          children: [{\\n            label: 'Niveau deux 3-1',\\n            children: [{\\n              label: 'Niveau trois 3-1-1'\\n            }]\\n          }, {\\n            label: 'Niveau deux 3-2',\\n            children: [{\\n              label: 'Niveau trois 3-2-1'\\n            }]\\n          }]\\n        }],\\n        defaultProps: {\\n          children: 'children',\\n          label: 'label'\\n        }\\n      };\\n    },\\n    methods: {\\n      handleDragStart(node, ev) {\\n        console.log('drag start', node);\\n      },\\n      handleDragEnter(draggingNode, dropNode, ev) {\\n        console.log('tree drag enter: ', dropNode.label);\\n      },\\n      handleDragLeave(draggingNode, dropNode, ev) {\\n        console.log('tree drag leave: ', dropNode.label);\\n      },\\n      handleDragOver(draggingNode, dropNode, ev) {\\n        console.log('tree drag over: ', dropNode.label);\\n      },\\n      handleDragEnd(draggingNode, dropNode, dropType, ev) {\\n        console.log('tree drag end: ', dropNode && dropNode.label, dropType);\\n      },\\n      handleDrop(draggingNode, dropNode, dropType, ev) {\\n        console.log('tree drop: ', dropNode.label, dropType);\\n      },\\n      allowDrop(draggingNode, dropNode, type) {\\n        if (dropNode.data.label === 'Niveau deux 3-1') {\\n          return type !== 'inner';\\n        } else {\\n          return true;\\n        }\\n      },\\n      allowDrag(draggingNode) {\\n        return draggingNode.data.label.indexOf('Niveau trois 3-1-1') === -1;\\n      }\\n    }\\n  };\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_39 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createStaticVNode\"])(\"<h3 id=\\\"attributs\\\"><a class=\\\"header-anchor\\\" href=\\\"#attributs\\\">¶</a> Attributs</h3><table><thead><tr><th>Attribut</th><th>Description</th><th>Type</th><th>Valeurs acceptées</th><th>Défaut</th></tr></thead><tbody><tr><td>data</td><td>Données de l&#39;arbre</td><td>array</td><td>—</td><td>—</td></tr><tr><td>empty-text</td><td>Texte à afficher quand il n&#39;y a pas de données.</td><td>string</td><td>—</td><td>—</td></tr><tr><td>node-key</td><td>Identifiant unique pour chaque noeud, doit être unique dans tout l&#39;arbre.</td><td>string</td><td>—</td><td>—</td></tr><tr><td>props</td><td>Options de configuration, voir table suivante.</td><td>object</td><td>—</td><td>—</td></tr><tr><td>render-after-expand</td><td>Si les noeuds enfants doivent être générés seulement après la première ouverture du parent.</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>load</td><td>Méthode pour charger les noeuds enfants, uniquement en mode <code>lazy</code>.</td><td>function(node, resolve)</td><td>—</td><td>—</td></tr><tr><td>render-content</td><td>Fonction de rendu pour les noeuds.</td><td>Function(h, { node, data, store }</td><td>—</td><td>—</td></tr><tr><td>highlight-current</td><td>Si le noeud courant est mis en valeur.</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>default-expand-all</td><td>Si tous les noeuds sont ouverts par défaut.</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>expand-on-click-node</td><td>Si l&#39;ouverture se fait aussi en cliquant sur le noeud. Si <code>false</code>, l&#39;ouverture ne se fera qu&#39;en cliquant sur l&#39;icône.</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>check-on-click-node</td><td>Si la sélection se fait aussi en cliquant sur le noeud. Si <code>false</code>, la sélection ne se fera qu&#39;en cliquant sur la checkbox.</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>auto-expand-parent</td><td>Si un noeud parent est automatiquement ouvert quand un noeud enfant s&#39;ouvre.</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>default-expanded-keys</td><td>Tableau des clés des noeuds initialement ouverts.</td><td>array</td><td>—</td><td>—</td></tr><tr><td>show-checkbox</td><td>Si un noeud est sélectionnable.</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>check-strictly</td><td>Si la sélection d&#39;un noeud affecte celle de son parent quand <code>show-checkbox</code> est <code>true</code>.</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>default-checked-keys</td><td>Tableau des clés des noeuds initialement sélectionnés.</td><td>array</td><td>—</td><td>—</td></tr><tr><td>current-node-key</td><td>Clé du noeud initialement sélectionné.</td><td>string, number</td><td>—</td><td>—</td></tr><tr><td>filter-node-method</td><td>Fonction exécutée sur chaque noeud pour le filtrage. Si elle retourne <code>false</code>, les noeuds seront cachés.</td><td>Function(value, data, node)</td><td>—</td><td>—</td></tr><tr><td>accordion</td><td>Si les noeuds fonctionnent en mode accordéon.</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>indent</td><td>Indentation horizontale des noeuds en px.</td><td>number</td><td>—</td><td>16</td></tr><tr><td>icon-class</td><td>Icône pour chaque noeud.</td><td>string</td><td>-</td><td>-</td></tr><tr><td>lazy</td><td>Si les noeuds sont chargés en mode lazy, utilisé avec l&#39;attribut <code>load</code>.</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>draggable</td><td>Si les noeuds sont déplaçables par drag&#39;n drop.</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>allow-drag</td><td>Fonction exécutée avant le déplacement d&#39;un noeud. Si <code>false</code> est retourné, le noeud ne sera pas déplaçable.</td><td>Function(node)</td><td>—</td><td>—</td></tr><tr><td>allow-drop</td><td>Fonction exécutée avant le placement d&#39;un noeud. Si <code>false</code> est retourné, le noeud ne pourra être placé sur la zone en question. <code>type</code> a trois valeurs possibles: &#39;prev&#39; (insertion avant le noeud cible), &#39;inner&#39; (insertion dans le noeud cible) and &#39;next&#39; (insertion après le noeud cible).</td><td>Function(draggingNode, dropNode, type)</td><td>—</td><td>—</td></tr></tbody></table><h3 id=\\\"props\\\"><a class=\\\"header-anchor\\\" href=\\\"#props\\\">¶</a> props</h3><table><thead><tr><th>Attribut</th><th>Description</th><th>Type</th><th>Valeurs acceptées</th><th>Défaut</th></tr></thead><tbody><tr><td>label</td><td>Détermine quelle clé de l&#39;objet noeud représente le label.</td><td>string, function(data, node)</td><td>—</td><td>—</td></tr><tr><td>children</td><td>Détermine quelle clé de l&#39;objet noeud représente les noeuds enfants.</td><td>string</td><td>—</td><td>—</td></tr><tr><td>disabled</td><td>Détermine quelle clé de l&#39;objet noeud représente la désactivation du noeud.</td><td>boolean, function(data, node)</td><td>—</td><td>—</td></tr><tr><td>isLeaf</td><td>Détermine si le noeud est une feuille, ne marche qu&#39;avec le mode lazy loading.</td><td>boolean, function(data, node)</td><td>—</td><td>—</td></tr></tbody></table><h3 id=\\\"methodes\\\"><a class=\\\"header-anchor\\\" href=\\\"#methodes\\\">¶</a> Méthodes</h3><p><code>Tree</code> possède les méthodes suivantes, qui retourne la sélection de noeuds actuelle.</p><table><thead><tr><th>Méthode</th><th>Description</th><th>Paramètres</th></tr></thead><tbody><tr><td>filter</td><td>Filtre les noeuds.</td><td>Accepte un paramètre qui sera le premier paramètre de <code>filter-node-method</code>.</td></tr><tr><td>updateKeyChildren</td><td>Ajoute de nouvelles données au noeud, ne marche que lorsque <code>node-key</code> est assigné.</td><td>(key, data) Accepte deux paramètres: 1. clé du noeud 2. nouvelles données.</td></tr><tr><td>getCheckedNodes</td><td>Si le noeud peut-être sélectionné (<code>show-checkbox</code> est <code>true</code>), il retourne un tableau des noeuds sélectionnés.</td><td>(leafOnly, includeHalfChecked) Accepte deux booléen: 1. Défaut à <code>false</code>. Si <code>true</code>, retourne seulement un tableau des sous-noeuds sélectionnés. 2. Défaut à <code>false</code>. Si <code>true</code>, retourne la moitié des noeuds sélectionnés.</td></tr><tr><td>setCheckedNodes</td><td>Détermine quels noeuds sont sélectionnés, ne marche que si <code>node_key</code> est assigné.</td><td>Un tableau de noeuds qui doivent être sélectionnés.</td></tr><tr><td>getCheckedKeys</td><td>Si le noeud peut être sélectionné (<code>show-checkbox</code> est <code>true</code>), retourne un tableau de clés des noeuds sélectionnés.</td><td>(leafOnly) Booléen, défaut à <code>false</code>. Si à <code>true</code>, Il retourne seulement un tableau des sous-noeuds sélectionnés.</td></tr><tr><td>setCheckedKeys</td><td>Détermine quels noeuds sont sélectionnés, ne marche que si <code>node_key</code> est assigné.</td><td>(keys, leafOnly) Accepte deux paramètres: 1. un tableau de clés de noeuds à sélectionner 2. un booléen avec pour défaut <code>false</code>. Si à <code>true</code>, Il retourne seulement un tableau des sous-noeuds sélectionnés.</td></tr><tr><td>setChecked</td><td>Détermine si un noeud est sélectionnable, ne marche que si <code>node_key</code> est assigné.</td><td>(key/data, checked, deep) Accepte trois paramètres: 1. La clé ou les données du noeud 2. un booléen indiquant si sélectionné. 3. un booléen indiquant si profond.</td></tr><tr><td>getHalfCheckedNodes</td><td>Si le noeud peut être sélectionné (<code>show-checkbox</code> est <code>true</code>), retourne la moitié des noeuds sélectionnés.</td><td>-</td></tr><tr><td>getHalfCheckedKeys</td><td>Si le noeud peut être sélectionné (<code>show-checkbox</code> est <code>true</code>), retourne les clés de la moitié des noeuds sélectionnés.</td><td>-</td></tr><tr><td>getCurrentKey</td><td>retourne la clé du noeud actuellement en valeur (<code>null</code> si aucun noeud n&#39;est en valeur).</td><td>—</td></tr><tr><td>getCurrentNode</td><td>retourne les données du noeud actuellement en valeur (<code>null</code> si aucun noeud n&#39;est en valeur).</td><td>—</td></tr><tr><td>setCurrentKey</td><td>Met un noeud en valeur par sa clé, ne marche que si <code>node_key</code> est assigné.</td><td>(key) la clé du noeud. Si <code>null</code>, annule la sélection actuelle.</td></tr><tr><td>setCurrentNode</td><td>Met un noeud en valeur, ne marche que si <code>node_key</code> est assigné.</td><td>(node) le noeud.</td></tr><tr><td>getNode</td><td>Retourne le noeud grâce à sa clé ou ses données.</td><td>(data) la clé ou les données du noeud.</td></tr><tr><td>remove</td><td>Supprime un noeud, ne marche que si node-key est assigné.</td><td>(data) le noeud ou ses données à supprimer.</td></tr><tr><td>append</td><td>Ajoute un noeud à un autre noeud.</td><td>(data, parentNode) 1. les données du noeud à ajouter 2. les données du parent, clé ou données.</td></tr><tr><td>insertBefore</td><td>Insère un noeud avant un autre noeud.</td><td>(data, refNode) 1. Les données du noeud à insérer 2. Clé ou noeud de référence.</td></tr><tr><td>insertAfter</td><td>Insère un noeud après un autre noeud.</td><td>(data, refNode) 1. Les données du noeud à insérer 2. Clé ou noeud de référence.</td></tr></tbody></table><h3 id=\\\"evenements\\\"><a class=\\\"header-anchor\\\" href=\\\"#evenements\\\">¶</a> Évènements</h3><table><thead><tr><th>Nom</th><th>Description</th><th>Paramètres</th></tr></thead><tbody><tr><td>node-click</td><td>Se déclenche quand est cliqué.</td><td>Le noeud cliqué, la propriété <code>node</code> de TreeNode, TreeNode lui-même.</td></tr><tr><td>node-contextmenu</td><td>Se déclenche quand un noeud reçoit un clic droit.</td><td>L&#39;évènement, le noeud cliqué, la propriété <code>node</code> de TreeNode, TreeNode lui-même.</td></tr><tr><td>check-change</td><td>Se déclenche quand quand la sélection d&#39;un noeud change.</td><td>Le noeud modifié, si le noeud est sélectionné, si des enfants sont sélectionnés.</td></tr><tr><td>check</td><td>Se déclenche après un clic sur le checkbox.</td><td>Le noeud modifié, l&#39;objet statut de l&#39;arbre avec quatre propriétés: checkedNodes, checkedKeys, halfCheckedNodes, halfCheckedKeys.</td></tr><tr><td>current-change</td><td>Se déclenche quand le noeud courant changes.</td><td>Le noeud courant, la propriété <code>node</code> de TreeNode</td></tr><tr><td>node-expand</td><td>Se déclenche quand le noeud courant s&#39;ouvre.</td><td>Le noeud ouvert, la propriété <code>node</code> de TreeNode, TreeNode lui-même.</td></tr><tr><td>node-collapse</td><td>Se déclenche quand le noeud courant se ferme.</td><td>Le noeud fermé, la propriété <code>node</code> de TreeNode, TreeNode lui-même.</td></tr><tr><td>node-drag-start</td><td>Se déclenche quand le déplacement commence.</td><td>Le noeud déplacé, l&#39;évènement.</td></tr><tr><td>node-drag-enter</td><td>Se déclenche quand le noeud déplacé entre dans un autre noeud.</td><td>Le noeud déplacé, l&#39;autre noeud, l&#39;évènement.</td></tr><tr><td>node-drag-leave</td><td>Se déclenche quand le noeud déplacé quitte un autre noeud.</td><td>Le noeud déplacé, l&#39;autre noeud, l&#39;évènement.</td></tr><tr><td>node-drag-over</td><td>Se déclenche quand le noeud passe au-dessus d&#39;un autre noeud (comme l&#39;évènement mouseover).</td><td>Le noeud déplacé, l&#39;autre noeud, l&#39;évènement.</td></tr><tr><td>node-drag-end</td><td>Se déclenche quand le déplacement se termine.</td><td>Le noeud déplacé, le noeud d&#39;arrivée (peut-être <code>undefined</code>), le type de placement (before / after / inner), l&#39;évènement.</td></tr><tr><td>node-drop</td><td>Se déclenche après que le noeud déplacé soit placé.</td><td>Le noeud déplacé, le noeud d&#39;arrivée, le type de placement (before / after / inner), l&#39;évènement.</td></tr></tbody></table><h3 id=\\\"slot-avec-portee\\\"><a class=\\\"header-anchor\\\" href=\\\"#slot-avec-portee\\\">¶</a> Slot avec portée</h3><table><thead><tr><th>Nom</th><th>Description</th></tr></thead><tbody><tr><td>—</td><td>Le contenu personnalisé des noeuds. les paramètres sont { node, data }.</td></tr></tbody></table>\", 11)\n\nfunction render(_ctx, _cache) {\n  const _component_element_demo0 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo0\")\n  const _component_demo_block = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"demo-block\")\n  const _component_element_demo1 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo1\")\n  const _component_element_demo2 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo2\")\n  const _component_element_demo3 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo3\")\n  const _component_element_demo4 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo4\")\n  const _component_element_demo5 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo5\")\n  const _component_element_demo6 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo6\")\n  const _component_element_demo7 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo7\")\n  const _component_element_demo8 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo8\")\n  const _component_element_demo9 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo9\")\n\n  return (Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"openBlock\"])(), Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createBlock\"])(\"section\", _hoisted_1, [\n    _hoisted_2,\n    _hoisted_3,\n    _hoisted_4,\n    _hoisted_5,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo0)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_6\n      ]),\n      _: 1\n    }),\n    _hoisted_7,\n    _hoisted_8,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo1)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_10\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_9\n      ]),\n      _: 1\n    }),\n    _hoisted_11,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo2)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_13\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_12\n      ]),\n      _: 1\n    }),\n    _hoisted_14,\n    _hoisted_15,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo3)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_17\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_16\n      ]),\n      _: 1\n    }),\n    _hoisted_18,\n    _hoisted_19,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo4)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_21\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_20\n      ]),\n      _: 1\n    }),\n    _hoisted_22,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo5)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_24\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_23\n      ]),\n      _: 1\n    }),\n    _hoisted_25,\n    _hoisted_26,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo6)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_28\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_27\n      ]),\n      _: 1\n    }),\n    _hoisted_29,\n    _hoisted_30,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo7)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_32\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_31\n      ]),\n      _: 1\n    }),\n    _hoisted_33,\n    _hoisted_34,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo8)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_35\n      ]),\n      _: 1\n    }),\n    _hoisted_36,\n    _hoisted_37,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo9)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_38\n      ]),\n      _: 1\n    }),\n    _hoisted_39\n  ]))\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vue-loader/dist/templateLoader.js?!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/fr-FR/tree.md?vue&type=template&id=faf63f7e\n");

/***/ })

}]);