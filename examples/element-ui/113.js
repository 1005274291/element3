(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[113],{

/***/ "./examples/docs/es/checkbox.md":
/*!**************************************!*\
  !*** ./examples/docs/es/checkbox.md ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _checkbox_md_vue_type_template_id_9fd2db76__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./checkbox.md?vue&type=template&id=9fd2db76 */ \"./examples/docs/es/checkbox.md?vue&type=template&id=9fd2db76\");\n/* harmony import */ var _checkbox_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./checkbox.md?vue&type=script&lang=js */ \"./examples/docs/es/checkbox.md?vue&type=script&lang=js\");\n/* empty/unused harmony star reexport */\n\n\n_checkbox_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].render = _checkbox_md_vue_type_template_id_9fd2db76__WEBPACK_IMPORTED_MODULE_0__[\"render\"]\n/* hot reload */\nif (true) {\n  _checkbox_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].__hmrId = \"9fd2db76\"\n  const api = __VUE_HMR_RUNTIME__\n  module.hot.accept()\n  if (!api.createRecord('9fd2db76', _checkbox_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])) {\n    api.reload('9fd2db76', _checkbox_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])\n  }\n  \n  module.hot.accept(/*! ./checkbox.md?vue&type=template&id=9fd2db76 */ \"./examples/docs/es/checkbox.md?vue&type=template&id=9fd2db76\", function(__WEBPACK_OUTDATED_DEPENDENCIES__) { /* harmony import */ _checkbox_md_vue_type_template_id_9fd2db76__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./checkbox.md?vue&type=template&id=9fd2db76 */ \"./examples/docs/es/checkbox.md?vue&type=template&id=9fd2db76\");\n(() => {\n    api.rerender('9fd2db76', _checkbox_md_vue_type_template_id_9fd2db76__WEBPACK_IMPORTED_MODULE_0__[\"render\"])\n  })(__WEBPACK_OUTDATED_DEPENDENCIES__); }.bind(this))\n\n}\n\n_checkbox_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].__file = \"examples/docs/es/checkbox.md\"\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (_checkbox_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9leGFtcGxlcy9kb2NzL2VzL2NoZWNrYm94Lm1kPzk3ZGUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUEsd0NBQW9FO0FBQ1Y7QUFDTDtBQUNyRCw0RUFBTSxVQUFVLGlGQUFNO0FBQ3RCO0FBQ0EsSUFBSSxJQUFVO0FBQ2QsRUFBRSw0RUFBTTtBQUNSO0FBQ0E7QUFDQSxvQ0FBb0MsNEVBQU07QUFDMUMsMkJBQTJCLDRFQUFNO0FBQ2pDOztBQUVBLG9CQUFvQixpSEFBNkMsRUFBRTtBQUFBO0FBQ25FLDZCQUE2QixpRkFBTTtBQUNuQyxHQUFHOztBQUVIOztBQUVBLDRFQUFNOztBQUVTLDJJIiwiZmlsZSI6Ii4vZXhhbXBsZXMvZG9jcy9lcy9jaGVja2JveC5tZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbmRlciB9IGZyb20gXCIuL2NoZWNrYm94Lm1kP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTlmZDJkYjc2XCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vY2hlY2tib3gubWQ/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuZXhwb3J0ICogZnJvbSBcIi4vY2hlY2tib3gubWQ/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuc2NyaXB0LnJlbmRlciA9IHJlbmRlclxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgc2NyaXB0Ll9faG1ySWQgPSBcIjlmZDJkYjc2XCJcbiAgY29uc3QgYXBpID0gX19WVUVfSE1SX1JVTlRJTUVfX1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghYXBpLmNyZWF0ZVJlY29yZCgnOWZkMmRiNzYnLCBzY3JpcHQpKSB7XG4gICAgYXBpLnJlbG9hZCgnOWZkMmRiNzYnLCBzY3JpcHQpXG4gIH1cbiAgXG4gIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9jaGVja2JveC5tZD92dWUmdHlwZT10ZW1wbGF0ZSZpZD05ZmQyZGI3NlwiLCAoKSA9PiB7XG4gICAgYXBpLnJlcmVuZGVyKCc5ZmQyZGI3NicsIHJlbmRlcilcbiAgfSlcblxufVxuXG5zY3JpcHQuX19maWxlID0gXCJleGFtcGxlcy9kb2NzL2VzL2NoZWNrYm94Lm1kXCJcblxuZXhwb3J0IGRlZmF1bHQgc2NyaXB0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./examples/docs/es/checkbox.md\n");

/***/ }),

/***/ "./examples/docs/es/checkbox.md?vue&type=script&lang=js":
/*!**************************************************************!*\
  !*** ./examples/docs/es/checkbox.md?vue&type=script&lang=js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_dist_index_js_ref_3_0_build_md_loader_index_js_checkbox_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib!../../../node_modules/vue-loader/dist??ref--3-0!../../../build/md-loader!./checkbox.md?vue&type=script&lang=js */ \"./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/es/checkbox.md?vue&type=script&lang=js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_dist_index_js_ref_3_0_build_md_loader_index_js_checkbox_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; });\n\n/* empty/unused harmony star reexport */ \n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9leGFtcGxlcy9kb2NzL2VzL2NoZWNrYm94Lm1kPzQyNjciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSx3Q0FBNk0iLCJmaWxlIjoiLi9leGFtcGxlcy9kb2NzL2VzL2NoZWNrYm94Lm1kP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3JlZi0tMy0wIS4uLy4uLy4uL2J1aWxkL21kLWxvYWRlci9pbmRleC5qcyEuL2NoZWNrYm94Lm1kP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCI7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3JlZi0tMy0wIS4uLy4uLy4uL2J1aWxkL21kLWxvYWRlci9pbmRleC5qcyEuL2NoZWNrYm94Lm1kP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./examples/docs/es/checkbox.md?vue&type=script&lang=js\n");

/***/ }),

/***/ "./examples/docs/es/checkbox.md?vue&type=template&id=9fd2db76":
/*!********************************************************************!*\
  !*** ./examples/docs/es/checkbox.md?vue&type=template&id=9fd2db76 ***!
  \********************************************************************/
/*! exports provided: render */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_vue_loader_dist_templateLoader_js_ref_5_node_modules_vue_loader_dist_index_js_ref_3_0_build_md_loader_index_js_checkbox_md_vue_type_template_id_9fd2db76__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/vue-loader/dist/templateLoader.js??ref--5!../../../node_modules/vue-loader/dist??ref--3-0!../../../build/md-loader!./checkbox.md?vue&type=template&id=9fd2db76 */ \"./node_modules/vue-loader/dist/templateLoader.js?!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/es/checkbox.md?vue&type=template&id=9fd2db76\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return _node_modules_vue_loader_dist_templateLoader_js_ref_5_node_modules_vue_loader_dist_index_js_ref_3_0_build_md_loader_index_js_checkbox_md_vue_type_template_id_9fd2db76__WEBPACK_IMPORTED_MODULE_0__[\"render\"]; });\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9leGFtcGxlcy9kb2NzL2VzL2NoZWNrYm94Lm1kPzcxODEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUEiLCJmaWxlIjoiLi9leGFtcGxlcy9kb2NzL2VzL2NoZWNrYm94Lm1kP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTlmZDJkYjc2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC90ZW1wbGF0ZUxvYWRlci5qcz8/cmVmLS01IS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3JlZi0tMy0wIS4uLy4uLy4uL2J1aWxkL21kLWxvYWRlci9pbmRleC5qcyEuL2NoZWNrYm94Lm1kP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTlmZDJkYjc2XCIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./examples/docs/es/checkbox.md?vue&type=template&id=9fd2db76\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/es/checkbox.md?vue&type=script&lang=js":
/*!*********************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/vue-loader/dist??ref--3-0!./build/md-loader!./examples/docs/es/checkbox.md?vue&type=script&lang=js ***!
  \*********************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var highlight_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! highlight.js */ \"./node_modules/highlight.js/lib/index.js\");\n/* harmony import */ var highlight_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(highlight_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm-bundler.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'component-doc',\n  components: {\n    \"element-demo0\": function () {\n      const {\n        createCommentVNode: _createCommentVNode,\n        createTextVNode: _createTextVNode,\n        resolveComponent: _resolveComponent,\n        withCtx: _withCtx,\n        createVNode: _createVNode,\n        Fragment: _Fragment,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_checkbox = _resolveComponent(\"el-checkbox\");\n\n        return _openBlock(), _createBlock(_Fragment, null, [_createCommentVNode(\" `checked` debe ser true o false \"), _createVNode(_component_el_checkbox, {\n          modelValue: _ctx.checked,\n          \"onUpdate:modelValue\": $event => _ctx.checked = $event\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"Opción\")]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"])], 64\n        /* STABLE_FRAGMENT */\n        );\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            checked: true\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo1\": function () {\n      const {\n        createTextVNode: _createTextVNode,\n        resolveComponent: _resolveComponent,\n        withCtx: _withCtx,\n        createVNode: _createVNode,\n        Fragment: _Fragment,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_checkbox = _resolveComponent(\"el-checkbox\");\n\n        return _openBlock(), _createBlock(_Fragment, null, [_createVNode(_component_el_checkbox, {\n          modelValue: _ctx.checked1,\n          \"onUpdate:modelValue\": $event => _ctx.checked1 = $event,\n          disabled: \"\"\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"Opción\")]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"]), _createVNode(_component_el_checkbox, {\n          modelValue: _ctx.checked2,\n          \"onUpdate:modelValue\": $event => _ctx.checked2 = $event,\n          disabled: \"\"\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"Opción\")]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"])], 64\n        /* STABLE_FRAGMENT */\n        );\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            checked1: false,\n            checked2: true\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo2\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_checkbox = _resolveComponent(\"el-checkbox\");\n\n        const _component_el_checkbox_group = _resolveComponent(\"el-checkbox-group\");\n\n        return _openBlock(), _createBlock(_component_el_checkbox_group, {\n          modelValue: _ctx.checkList,\n          \"onUpdate:modelValue\": $event => _ctx.checkList = $event\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_checkbox, {\n            label: \"Opción A\"\n          }), _createVNode(_component_el_checkbox, {\n            label: \"Opción B\"\n          }), _createVNode(_component_el_checkbox, {\n            label: \"Opción C\"\n          }), _createVNode(_component_el_checkbox, {\n            label: \"disabled\",\n            disabled: \"\"\n          }), _createVNode(_component_el_checkbox, {\n            label: \"Seleccionado y deshabilitado\",\n            disabled: \"\"\n          })]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            checkList: ['Seleccionado y deshabilitado', 'Opción A']\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo3\": function () {\n      const {\n        createTextVNode: _createTextVNode,\n        resolveComponent: _resolveComponent,\n        withCtx: _withCtx,\n        createVNode: _createVNode,\n        renderList: _renderList,\n        Fragment: _Fragment,\n        openBlock: _openBlock,\n        createBlock: _createBlock,\n        toDisplayString: _toDisplayString\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_checkbox = _resolveComponent(\"el-checkbox\");\n\n        const _component_el_checkbox_group = _resolveComponent(\"el-checkbox-group\");\n\n        return _openBlock(), _createBlock(_Fragment, null, [_createVNode(_component_el_checkbox, {\n          indeterminate: _ctx.isIndeterminate,\n          modelValue: _ctx.checkAll,\n          \"onUpdate:modelValue\": $event => _ctx.checkAll = $event,\n          onChange: _ctx.handleCheckAllChange\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"Marcar todos\")]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"indeterminate\", \"modelValue\", \"onUpdate:modelValue\", \"onChange\"]), _createVNode(\"div\", {\n          style: {\n            \"margin\": \"15px 0\"\n          }\n        }), _createVNode(_component_el_checkbox_group, {\n          modelValue: _ctx.checkedCities,\n          \"onUpdate:modelValue\": $event => _ctx.checkedCities = $event,\n          onChange: _ctx.handleCheckedCitiesChange\n        }, {\n          default: _withCtx(() => [(_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.cities, city => {\n            return _openBlock(), _createBlock(_component_el_checkbox, {\n              label: city,\n              key: city\n            }, {\n              default: _withCtx(() => [_createTextVNode(_toDisplayString(city), 1\n              /* TEXT */\n              )]),\n              _: 2\n            }, 1032\n            /* PROPS, DYNAMIC_SLOTS */\n            , [\"label\"]);\n          }), 128\n          /* KEYED_FRAGMENT */\n          ))]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\", \"onChange\"])], 64\n        /* STABLE_FRAGMENT */\n        );\n      }\n\n      const cityOptions = ['Shanghai', 'Beijing', 'Guangzhou', 'Shenzhen'];\n      const democomponentExport = {\n        data() {\n          return {\n            checkAll: false,\n            checkedCities: ['Shanghai', 'Beijing'],\n            cities: cityOptions,\n            isIndeterminate: true\n          };\n        },\n\n        methods: {\n          handleCheckAllChange(val) {\n            this.checkedCities = val ? cityOptions : [];\n            this.isIndeterminate = false;\n          },\n\n          handleCheckedCitiesChange(value) {\n            let checkedCount = value.length;\n            this.checkAll = checkedCount === this.cities.length;\n            this.isIndeterminate = checkedCount > 0 && checkedCount < this.cities.length;\n          }\n\n        }\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo4\": function () {\n      const {\n        renderList: _renderList,\n        Fragment: _Fragment,\n        openBlock: _openBlock,\n        createBlock: _createBlock,\n        toDisplayString: _toDisplayString,\n        createTextVNode: _createTextVNode,\n        resolveComponent: _resolveComponent,\n        withCtx: _withCtx,\n        createVNode: _createVNode\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_checkbox = _resolveComponent(\"el-checkbox\");\n\n        const _component_el_checkbox_group = _resolveComponent(\"el-checkbox-group\");\n\n        return _openBlock(), _createBlock(_component_el_checkbox_group, {\n          modelValue: _ctx.checkedCities,\n          \"onUpdate:modelValue\": $event => _ctx.checkedCities = $event,\n          min: 1,\n          max: 2\n        }, {\n          default: _withCtx(() => [(_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.cities, city => {\n            return _openBlock(), _createBlock(_component_el_checkbox, {\n              label: city,\n              key: city\n            }, {\n              default: _withCtx(() => [_createTextVNode(_toDisplayString(city), 1\n              /* TEXT */\n              )]),\n              _: 2\n            }, 1032\n            /* PROPS, DYNAMIC_SLOTS */\n            , [\"label\"]);\n          }), 128\n          /* KEYED_FRAGMENT */\n          ))]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"]);\n      }\n\n      const cityOptions = ['Shanghai', 'Beijing', 'Guangzhou', 'Shenzhen'];\n      const democomponentExport = {\n        data() {\n          return {\n            checkedCities: ['Shanghai', 'Beijing'],\n            cities: cityOptions\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo5\": function () {\n      const {\n        renderList: _renderList,\n        Fragment: _Fragment,\n        openBlock: _openBlock,\n        createBlock: _createBlock,\n        toDisplayString: _toDisplayString,\n        createTextVNode: _createTextVNode,\n        resolveComponent: _resolveComponent,\n        withCtx: _withCtx,\n        createVNode: _createVNode\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_checkbox_button = _resolveComponent(\"el-checkbox-button\");\n\n        const _component_el_checkbox_group = _resolveComponent(\"el-checkbox-group\");\n\n        return _openBlock(), _createBlock(_Fragment, null, [_createVNode(\"div\", null, [_createVNode(_component_el_checkbox_group, {\n          modelValue: _ctx.checkboxGroup1,\n          \"onUpdate:modelValue\": $event => _ctx.checkboxGroup1 = $event\n        }, {\n          default: _withCtx(() => [(_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.cities, city => {\n            return _openBlock(), _createBlock(_component_el_checkbox_button, {\n              label: city,\n              key: city\n            }, {\n              default: _withCtx(() => [_createTextVNode(_toDisplayString(city), 1\n              /* TEXT */\n              )]),\n              _: 2\n            }, 1032\n            /* PROPS, DYNAMIC_SLOTS */\n            , [\"label\"]);\n          }), 128\n          /* KEYED_FRAGMENT */\n          ))]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"])]), _createVNode(\"div\", {\n          style: {\n            \"margin-top\": \"20px\"\n          }\n        }, [_createVNode(_component_el_checkbox_group, {\n          modelValue: _ctx.checkboxGroup2,\n          \"onUpdate:modelValue\": $event => _ctx.checkboxGroup2 = $event,\n          size: \"medium\"\n        }, {\n          default: _withCtx(() => [(_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.cities, city => {\n            return _openBlock(), _createBlock(_component_el_checkbox_button, {\n              label: city,\n              key: city\n            }, {\n              default: _withCtx(() => [_createTextVNode(_toDisplayString(city), 1\n              /* TEXT */\n              )]),\n              _: 2\n            }, 1032\n            /* PROPS, DYNAMIC_SLOTS */\n            , [\"label\"]);\n          }), 128\n          /* KEYED_FRAGMENT */\n          ))]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"])]), _createVNode(\"div\", {\n          style: {\n            \"margin-top\": \"20px\"\n          }\n        }, [_createVNode(_component_el_checkbox_group, {\n          modelValue: _ctx.checkboxGroup3,\n          \"onUpdate:modelValue\": $event => _ctx.checkboxGroup3 = $event,\n          size: \"small\"\n        }, {\n          default: _withCtx(() => [(_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.cities, city => {\n            return _openBlock(), _createBlock(_component_el_checkbox_button, {\n              label: city,\n              disabled: city === 'Beijing',\n              key: city\n            }, {\n              default: _withCtx(() => [_createTextVNode(_toDisplayString(city), 1\n              /* TEXT */\n              )]),\n              _: 2\n            }, 1032\n            /* PROPS, DYNAMIC_SLOTS */\n            , [\"label\", \"disabled\"]);\n          }), 128\n          /* KEYED_FRAGMENT */\n          ))]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"])]), _createVNode(\"div\", {\n          style: {\n            \"margin-top\": \"20px\"\n          }\n        }, [_createVNode(_component_el_checkbox_group, {\n          modelValue: _ctx.checkboxGroup4,\n          \"onUpdate:modelValue\": $event => _ctx.checkboxGroup4 = $event,\n          size: \"mini\",\n          disabled: \"\"\n        }, {\n          default: _withCtx(() => [(_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.cities, city => {\n            return _openBlock(), _createBlock(_component_el_checkbox_button, {\n              label: city,\n              key: city\n            }, {\n              default: _withCtx(() => [_createTextVNode(_toDisplayString(city), 1\n              /* TEXT */\n              )]),\n              _: 2\n            }, 1032\n            /* PROPS, DYNAMIC_SLOTS */\n            , [\"label\"]);\n          }), 128\n          /* KEYED_FRAGMENT */\n          ))]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"])])], 64\n        /* STABLE_FRAGMENT */\n        );\n      }\n\n      const cityOptions = ['Shanghai', 'Beijing', 'Guangzhou', 'Shenzhen'];\n      const democomponentExport = {\n        data() {\n          return {\n            checkboxGroup1: ['Shanghai'],\n            checkboxGroup2: ['Shanghai'],\n            checkboxGroup3: ['Shanghai'],\n            checkboxGroup4: ['Shanghai'],\n            cities: cityOptions\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo6\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx,\n        Fragment: _Fragment,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_checkbox = _resolveComponent(\"el-checkbox\");\n\n        const _component_el_checkbox_group = _resolveComponent(\"el-checkbox-group\");\n\n        return _openBlock(), _createBlock(_Fragment, null, [_createVNode(\"div\", null, [_createVNode(_component_el_checkbox, {\n          modelValue: _ctx.checked1,\n          \"onUpdate:modelValue\": $event => _ctx.checked1 = $event,\n          label: \"Opción1\",\n          border: \"\"\n        }, null, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"]), _createVNode(_component_el_checkbox, {\n          modelValue: _ctx.checked2,\n          \"onUpdate:modelValue\": $event => _ctx.checked2 = $event,\n          label: \"Opción2\",\n          border: \"\"\n        }, null, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"])]), _createVNode(\"div\", {\n          style: {\n            \"margin-top\": \"20px\"\n          }\n        }, [_createVNode(_component_el_checkbox, {\n          modelValue: _ctx.checked3,\n          \"onUpdate:modelValue\": $event => _ctx.checked3 = $event,\n          label: \"Opción1\",\n          border: \"\",\n          size: \"medium\"\n        }, null, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"]), _createVNode(_component_el_checkbox, {\n          modelValue: _ctx.checked4,\n          \"onUpdate:modelValue\": $event => _ctx.checked4 = $event,\n          label: \"Opción2\",\n          border: \"\",\n          size: \"medium\"\n        }, null, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"])]), _createVNode(\"div\", {\n          style: {\n            \"margin-top\": \"20px\"\n          }\n        }, [_createVNode(_component_el_checkbox_group, {\n          modelValue: _ctx.checkboxGroup1,\n          \"onUpdate:modelValue\": $event => _ctx.checkboxGroup1 = $event,\n          size: \"small\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_checkbox, {\n            label: \"Opción1\",\n            border: \"\"\n          }), _createVNode(_component_el_checkbox, {\n            label: \"Opción2\",\n            border: \"\",\n            disabled: \"\"\n          })]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"])]), _createVNode(\"div\", {\n          style: {\n            \"margin-top\": \"20px\"\n          }\n        }, [_createVNode(_component_el_checkbox_group, {\n          modelValue: _ctx.checkboxGroup2,\n          \"onUpdate:modelValue\": $event => _ctx.checkboxGroup2 = $event,\n          size: \"mini\",\n          disabled: \"\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_checkbox, {\n            label: \"Opción1\",\n            border: \"\"\n          }), _createVNode(_component_el_checkbox, {\n            label: \"Opción2\",\n            border: \"\"\n          })]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"])])], 64\n        /* STABLE_FRAGMENT */\n        );\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            checked1: true,\n            checked2: false,\n            checked3: false,\n            checked4: true,\n            checkboxGroup1: [],\n            checkboxGroup2: []\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }()\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9leGFtcGxlcy9kb2NzL2VzL2NoZWNrYm94Lm1kPzNmNjYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBdWNNO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNlO0FBQ2IsTUFBSSxFQUFFLGVBRE87QUFFYixZQUFVLEVBQUU7QUFDVixxQkFBa0IsWUFBVztBQUVuQyxZQUFNO0FBQUUsMEJBQWtCLEVBQUUsbUJBQXRCO0FBQTJDLHVCQUFlLEVBQUUsZ0JBQTVEO0FBQThFLHdCQUFnQixFQUFFLGlCQUFoRztBQUFtSCxlQUFPLEVBQUUsUUFBNUg7QUFBc0ksbUJBQVcsRUFBRSxZQUFuSjtBQUFpSyxnQkFBUSxFQUFFLFNBQTNLO0FBQXNMLGlCQUFTLEVBQUUsVUFBak07QUFBNk0sbUJBQVcsRUFBRTtBQUExTixVQUEyTyxnQ0FBalA7O0FBRUosZUFBUyxNQUFULENBQWlCLElBQWpCLEVBQXVCLE1BQXZCLEVBQStCO0FBQzdCLGNBQU0sc0JBQXFCLEdBQUksaUJBQWlCLENBQUMsYUFBRCxDQUFoRDs7QUFFQSxlQUFRLFVBQVUsSUFBSSxZQUFZLENBQUMsU0FBRCxFQUFZLElBQVosRUFBa0IsQ0FDbEQsbUJBQW1CLENBQUMsbUNBQUQsQ0FEK0IsRUFFbEQsWUFBWSxDQUFDLHNCQUFELEVBQXlCO0FBQ25DLG9CQUFVLEVBQUUsSUFBSSxDQUFDLE9BRGtCO0FBRW5DLGlDQUF1QixNQUFLLElBQU0sSUFBSSxDQUFDLE9BQUwsR0FBZTtBQUZkLFNBQXpCLEVBR1Q7QUFDRCxpQkFBTyxFQUFFLFFBQVEsQ0FBQyxNQUFNLENBQ3RCLGdCQUFnQixDQUFDLFFBQUQsQ0FETSxDQUFQLENBRGhCO0FBSUQsV0FBQyxFQUFFO0FBSkYsU0FIUyxFQVFUO0FBQUU7QUFSTyxVQVFNLENBQUMsWUFBRCxFQUFlLHFCQUFmLENBUk4sQ0FGc0MsQ0FBbEIsRUFXL0I7QUFBRztBQVg0QixTQUFsQztBQVlGOztBQUVJLFlBQU0sbUJBQWtCLEdBQUk7QUFDNUIs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RUFBRTtBQUYyQixXQUF6QixDQUxVLENBQVAsQ0FEaEI7QUFXRCxXQUFDLEVBQUU7QUFYRixTQUxTLEVBaUJUO0FBQUU7QUFqQk8sVUFpQk0sQ0FBQyxZQUFELEVBQWUscUJBQWYsQ0FqQk4sQ0FEd0MsQ0FBMUMsQ0FuRHNDLENBQWxCLEVBdUUvQjtBQUFHO0FBdkU0QixTQUFsQztBQXdFRjs7QUFFSSxZQUFNLG1CQUFrQixHQUFJO0FBQzVCLFlBQUcsR0FBSztBQUNOLGlCQUFPO0FBQ0wsb0JBQVEsRUFBRSxJQURMO0FBRUwsb0JBQVEsRUFBRSxLQUZMO0FBR0wsb0JBQVEsRUFBRSxLQUhMO0FBSUwsb0JBQVEsRUFBRSxJQUpMO0FBS0wsMEJBQWMsRUFBRSxFQUxYO0FBTUwsMEJBQWMsRUFBRTtBQU5YLFdBQVA7QUFRRjs7QUFWNEIsT0FBNUI7QUFZQSxhQUFPO0FBQ0wsZUFBTyxHQUFFO0FBQ1AsZUFBSyxTQUFMLENBQWUsTUFBSTtBQUNqQixrQkFBTSxNQUFLLEdBQUksUUFBUSxDQUFDLGdCQUFULENBQTBCLHFCQUExQixDQUFmO0FBQ0EsaUJBQUssQ0FBQyxTQUFOLENBQWdCLE9BQWhCLENBQXdCLElBQXhCLENBQTZCLE1BQTdCLEVBQXFDLG1EQUFJLENBQUMsY0FBMUM7QUFDRCxXQUhEO0FBSUQsU0FOSTs7QUFPTCxjQVBLO0FBUUwsV0FBRztBQVJFLE9BQVA7QUFVRCxLQXhHcUI7QUFoWUo7QUFGQyxDQUFmIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPyEuL2J1aWxkL21kLWxvYWRlci9pbmRleC5qcyEuL2V4YW1wbGVzL2RvY3MvZXMvY2hlY2tib3gubWQ/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbiAgICA8dGVtcGxhdGU+XG4gICAgICA8c2VjdGlvbiBjbGFzcz1cImNvbnRlbnQgZWxlbWVudC1kb2NcIj5cbiAgICAgICAgPGgyIGlkPVwiY2hlY2tib3hcIj48YSBjbGFzcz1cImhlYWRlci1hbmNob3JcIiBocmVmPVwiI2NoZWNrYm94XCI+wrY8L2E+IENoZWNrYm94PC9oMj5cbjxwPlVuIGdydXBvIGRlIG9wY2lvbmVzIHBhcmEgbWFuZWphciBtw7psdGlwbGVzIGVsZWNjaW9uZXMuPC9wPlxuPGgzIGlkPVwidXNvLWJhc2ljb1wiPjxhIGNsYXNzPVwiaGVhZGVyLWFuY2hvclwiIGhyZWY9XCIjdXNvLWJhc2ljb1wiPsK2PC9hPiBVc28gYsOhc2ljbzwvaDM+XG48cD5DaGVja2JveCBwdWVkZSBzZXIgdXNhZG8gcGFyYSBhbHRlcm5hciBlbnRyZSBkb3MgZXN0YWRvcy48L3A+XG48ZGVtby1ibG9jaz5cbiAgICAgICAgPGRpdj48cD5EZWZpbmUgPGNvZGU+di1tb2RlbDwvY29kZT4oZW5sYXphIGxhIHZhcmlhYmxlKSBlbiA8Y29kZT5lbC1jaGVja2JveDwvY29kZT4uIEVsIHZhbG9yIHBvciBkZWZlY3RvIGVzIHVuIDxjb2RlPkJvb2xlYW48L2NvZGU+IHBhcmEgdW4gPGNvZGU+Y2hlY2tib3g8L2NvZGU+LCB5IHNlIGNvbnZpZXJ0ZSBlbiA8Y29kZT50cnVlPC9jb2RlPiBjdWFuZG8gZXN0ZSBlcyBzZWxlY2Npb25hZG8uIEVsIGNvbnRlbmlkbyBkZW50cm8gZGVsIHRhZyA8Y29kZT5lbC1jaGVja2JveDwvY29kZT4gc2UgY29udmllcnRlIGVuIGxhIGRlc2NyaXBjacOzbiBhbCBjb3N0YWRvIGRlbCBib3TDs24gZGVsIGNoZWNrYm94LjwvcD5cbjwvZGl2PlxuICAgICAgICA8dGVtcGxhdGUgI3NvdXJjZT48ZWxlbWVudC1kZW1vMCAvPjwvdGVtcGxhdGU+XG4gICAgICAgIDx0ZW1wbGF0ZSAjaGlnaGxpZ2h0PjxwcmUgdi1wcmU+PGNvZGUgY2xhc3M9XCJodG1sXCI+Jmx0O3RlbXBsYXRlJmd0O1xuICAmbHQ7IS0tIGBjaGVja2VkYCBkZWJlIHNlciB0cnVlIG8gZmFsc2UgLS0mZ3Q7XG4gICZsdDtlbC1jaGVja2JveCB2LW1vZGVsPSZxdW90O2NoZWNrZWQmcXVvdDsmZ3Q7T3BjacOzbiZsdDsvZWwtY2hlY2tib3gmZ3Q7XG4mbHQ7L3RlbXBsYXRlJmd0O1xuJmx0O3NjcmlwdCZndDtcbiAgZXhwb3J0IGRlZmF1bHQge1xuICAgIGRhdGEoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjaGVja2VkOiB0cnVlXG4gICAgICB9O1xuICAgIH1cbiAgfTtcbiZsdDsvc2NyaXB0Jmd0O1xuPC9jb2RlPjwvcHJlPjwvdGVtcGxhdGU+PC9kZW1vLWJsb2NrPjxoMyBpZD1cImVzdGFkby1kZXNoYWJpbGl0YWRvXCI+PGEgY2xhc3M9XCJoZWFkZXItYW5jaG9yXCIgaHJlZj1cIiNlc3RhZG8tZGVzaGFiaWxpdGFkb1wiPsK2PC9hPiBFc3RhZG8gRGVzaGFiaWxpdGFkbzwvaDM+XG48cD5Fc3RhZG8gZGVzaGFiaWxpdGFkbyBwYXJhIGVsIGNoZWNrYm94LjwvcD5cbjxkZW1vLWJsb2NrPlxuICAgICAgICA8ZGl2PjxwPlNldGVhciBlbCBhdHJpYnV0byA8Y29kZT5kaXNhYmxlZDwvY29kZT4uPC9wPlxuPC9kaXY+XG4gICAgICAgIDx0ZW1wbGF0ZSAjc291cmNlPjxlbGVtZW50LWRlbW8xIC8+PC90ZW1wbGF0ZT5cbiAgICAgICAgPHRlbXBsYXRlICNoaWdobGlnaHQ+PHByZSB2LXByZT48Y29kZSBjbGFzcz1cImh0bWxcIj4mbHQ7dGVtcGxhdGUmZ3Q7XG4gICZsdDtlbC1jaGVja2JveCB2LW1vZGVsPSZxdW90O2NoZWNrZWQxJnF1b3Q7IGRpc2FibGVkJmd0O09wY2nDs24mbHQ7L2VsLWNoZWNrYm94Jmd0O1xuICAmbHQ7ZWwtY2hlY2tib3ggdi1tb2RlbD0mcXVvdDtjaGVja2VkMiZxdW90OyBkaXNhYmxlZCZndDtPcGNpw7NuJmx0Oy9lbC1jaGVja2JveCZndDtcbiZsdDsvdGVtcGxhdGUmZ3Q7XG4mbHQ7c2NyaXB0Jmd0O1xuICBleHBvcnQgZGVmYXVsdCB7XG4gICAgZGF0YSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNoZWNrZWQxOiBmYWxzZSxcbiAgICAgICAgY2hlY2tlZDI6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICB9O1xuJmx0Oy9zY3JpcHQmZ3Q7XG48L2NvZGU+PC9wcmU+PC90ZW1wbGF0ZT48L2RlbW8tYmxvY2s+PGgzIGlkPVwiZ3J1cG8tZGUtY2hlY2tib3hlc1wiPjxhIGNsYXNzPVwiaGVhZGVyLWFuY2hvclwiIGhyZWY9XCIjZ3J1cG8tZGUtY2hlY2tib3hlc1wiPsK2PC9hPiBHcnVwbyBkZSBDaGVja2JveGVzPC9oMz5cbjxwPkVzIHVzYWRvIHBvciBtw7psdGlwbGVzIGNoZWNrYm94ZXMgbG9zIGN1YWxlcyBlc3TDoW4gZW5sYXphZG9zIGEgdW4gZ3J1cG8sIGluZGljYSBzaSB1bmEgb3BjacOzbiBlc3TDoSBzZWxlY2Npb25hZGEgdmVyaWZpY2FuZG8gc2kgZXN0YSBlc3TDoSBtYXJjYWRhLjwvcD5cbjxkZW1vLWJsb2NrPlxuICAgICAgICA8ZGl2PjxwPkVsIGVsZW1lbnRvIDxjb2RlPmNoZWNrYm94LWdyb3VwPC9jb2RlPiBwdWVkZSBtYW5lamFyIG3Dumx0aXBsZXMgY2hlY2tib3hlcyBlbiB1biBncnVwbyB1c2FuZG8gPGNvZGU+di1tb2RlbDwvY29kZT4gZWwgY3XDoWwgZXN0w6EgZW5sYXphZG8gYSB1biA8Y29kZT5BcnJheTwvY29kZT4uIERlbnRybyBkZWwgZWxlbWVudG8gPGNvZGU+ZWwtY2hlY2tib3g8L2NvZGU+LCA8Y29kZT5sYWJlbDwvY29kZT4gZXMgZWwgdmFsb3IgZGVsIGNoZWNrYm94LiBTaSBlbiBlc2UgdGFnIG5vIGhheSBjb250ZW5pZG8gYW5pZGFkbywgPGNvZGU+bGFiZWw8L2NvZGU+IHZhIGEgc2VyIG1vc3RyYWRvIGNvbW8gbGEgZGVzY3JpcGNpw7NuIGFsIGxhZG8gZGVsIGJvdMOzbiBkZWwgY2hlY2tib3guIDxjb2RlPmxhYmVsPC9jb2RlPiB0YW1iacOpbiBzZSBjb3JyZXNwb25kZSBjb24gbG9zIHZhbG9yZXMgZGVsIGFycmF5LiBFcyBzZWxlY2Npb25hZG8gc2kgZWwgdmFsb3IgZXNwZWNpZmljYWRvIGV4aXN0ZSBlbiBlbCBhcnJheSB5IHZpY2V2ZXJzYS48L3A+XG48L2Rpdj5cbiAgICAgICAgPHRlbXBsYXRlICNzb3VyY2U+PGVsZW1lbnQtZGVtbzIgLz48L3RlbXBsYXRlPlxuICAgICAgICA8dGVtcGxhdGUgI2hpZ2hsaWdodD48cHJlIHYtcHJlPjxjb2RlIGNsYXNzPVwiaHRtbFwiPiZsdDt0ZW1wbGF0ZSZndDtcbiAgJmx0O2VsLWNoZWNrYm94LWdyb3VwIHYtbW9kZWw9JnF1b3Q7Y2hlY2tMaXN0JnF1b3Q7Jmd0O1xuICAgICZsdDtlbC1jaGVja2JveCBsYWJlbD0mcXVvdDtPcGNpw7NuIEEmcXVvdDsmZ3Q7Jmx0Oy9lbC1jaGVja2JveCZndDtcbiAgICAmbHQ7ZWwtY2hlY2tib3ggbGFiZWw9JnF1b3Q7T3BjacOzbiBCJnF1b3Q7Jmd0OyZsdDsvZWwtY2hlY2tib3gmZ3Q7XG4gICAgJmx0O2VsLWNoZWNrYm94IGxhYmVsPSZxdW90O09wY2nDs24gQyZxdW90OyZndDsmbHQ7L2VsLWNoZWNrYm94Jmd0O1xuICAgICZsdDtlbC1jaGVja2JveCBsYWJlbD0mcXVvdDtkaXNhYmxlZCZxdW90OyBkaXNhYmxlZCZndDsmbHQ7L2VsLWNoZWNrYm94Jmd0O1xuICAgICZsdDtlbC1jaGVja2JveCBsYWJlbD0mcXVvdDtTZWxlY2Npb25hZG8geSBkZXNoYWJpbGl0YWRvJnF1b3Q7IGRpc2FibGVkJmd0OyZsdDsvZWwtY2hlY2tib3gmZ3Q7XG4gICZsdDsvZWwtY2hlY2tib3gtZ3JvdXAmZ3Q7XG4mbHQ7L3RlbXBsYXRlJmd0O1xuXG4mbHQ7c2NyaXB0Jmd0O1xuICBleHBvcnQgZGVmYXVsdCB7XG4gICAgZGF0YSAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjaGVja0xpc3Q6IFsnU2VsZWNjaW9uYWRvIHkgZGVzaGFiaWxpdGFkbycsJ09wY2nDs24gQSddXG4gICAgICB9O1xuICAgIH1cbiAgfTtcbiZsdDsvc2NyaXB0Jmd0O1xuPC9jb2RlPjwvcHJlPjwvdGVtcGxhdGU+PC9kZW1vLWJsb2NrPjxoMyBpZD1cImluZGV0ZXJtaW5hZG9cIj48YSBjbGFzcz1cImhlYWRlci1hbmNob3JcIiBocmVmPVwiI2luZGV0ZXJtaW5hZG9cIj7CtjwvYT4gSW5kZXRlcm1pbmFkbzwvaDM+XG48cD5MYSBwcm9waWVkYWQgPGNvZGU+aW5kZXRlcm1pbmF0ZTwvY29kZT4gcHVlZGUgc2VyIHVzYWRhIHBhcmEgZ2VuZXJhciBlbCBlZmVjdG8gZGUgbWFyY2FyIHRvZG9zIChjaGVjayBhbGwpLjwvcD5cbjxkZW1vLWJsb2NrPlxuICAgICAgICBcbiAgICAgICAgPHRlbXBsYXRlICNzb3VyY2U+PGVsZW1lbnQtZGVtbzMgLz48L3RlbXBsYXRlPlxuICAgICAgICA8dGVtcGxhdGUgI2hpZ2hsaWdodD48cHJlIHYtcHJlPjxjb2RlIGNsYXNzPVwiaHRtbFwiPiZsdDt0ZW1wbGF0ZSZndDtcbiAgJmx0O2VsLWNoZWNrYm94IDppbmRldGVybWluYXRlPSZxdW90O2lzSW5kZXRlcm1pbmF0ZSZxdW90OyB2LW1vZGVsPSZxdW90O2NoZWNrQWxsJnF1b3Q7IEBjaGFuZ2U9JnF1b3Q7aGFuZGxlQ2hlY2tBbGxDaGFuZ2UmcXVvdDsmZ3Q7TWFyY2FyIHRvZG9zJmx0Oy9lbC1jaGVja2JveCZndDtcbiAgJmx0O2RpdiBzdHlsZT0mcXVvdDttYXJnaW46IDE1cHggMDsmcXVvdDsmZ3Q7Jmx0Oy9kaXYmZ3Q7XG4gICZsdDtlbC1jaGVja2JveC1ncm91cCB2LW1vZGVsPSZxdW90O2NoZWNrZWRDaXRpZXMmcXVvdDsgQGNoYW5nZT0mcXVvdDtoYW5kbGVDaGVja2VkQ2l0aWVzQ2hhbmdlJnF1b3Q7Jmd0O1xuICAgICZsdDtlbC1jaGVja2JveCB2LWZvcj0mcXVvdDtjaXR5IGluIGNpdGllcyZxdW90OyA6bGFiZWw9JnF1b3Q7Y2l0eSZxdW90OyA6a2V5PSZxdW90O2NpdHkmcXVvdDsmZ3Q7e3tjaXR5fX0mbHQ7L2VsLWNoZWNrYm94Jmd0O1xuICAmbHQ7L2VsLWNoZWNrYm94LWdyb3VwJmd0O1xuJmx0Oy90ZW1wbGF0ZSZndDtcbiZsdDtzY3JpcHQmZ3Q7XG4gIGNvbnN0IGNpdHlPcHRpb25zID0gWydTaGFuZ2hhaScsICdCZWlqaW5nJywgJ0d1YW5nemhvdScsICdTaGVuemhlbiddO1xuICBleHBvcnQgZGVmYXVsdCB7XG4gICAgZGF0YSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNoZWNrQWxsOiBmYWxzZSxcbiAgICAgICAgY2hlY2tlZENpdGllczogWydTaGFuZ2hhaScsICdCZWlqaW5nJ10sXG4gICAgICAgIGNpdGllczogY2l0eU9wdGlvbnMsXG4gICAgICAgIGlzSW5kZXRlcm1pbmF0ZTogdHJ1ZVxuICAgICAgfTtcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgIGhhbmRsZUNoZWNrQWxsQ2hhbmdlKHZhbCkge1xuICAgICAgICB0aGlzLmNoZWNrZWRDaXRpZXMgPSB2YWwgPyBjaXR5T3B0aW9ucyA6IFtdO1xuICAgICAgICB0aGlzLmlzSW5kZXRlcm1pbmF0ZSA9IGZhbHNlO1xuICAgICAgfSxcbiAgICAgIGhhbmRsZUNoZWNrZWRDaXRpZXNDaGFuZ2UodmFsdWUpIHtcbiAgICAgICAgbGV0IGNoZWNrZWRDb3VudCA9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgdGhpcy5jaGVja0FsbCA9IGNoZWNrZWRDb3VudCA9PT0gdGhpcy5jaXRpZXMubGVuZ3RoO1xuICAgICAgICB0aGlzLmlzSW5kZXRlcm1pbmF0ZSA9IGNoZWNrZWRDb3VudCAmZ3Q7IDAgJmFtcDsmYW1wOyBjaGVja2VkQ291bnQgJmx0OyB0aGlzLmNpdGllcy5sZW5ndGg7XG4gICAgICB9XG4gICAgfVxuICB9O1xuJmx0Oy9zY3JpcHQmZ3Q7XG48L2NvZGU+PC9wcmU+PC90ZW1wbGF0ZT48L2RlbW8tYmxvY2s+PGgzIGlkPVwiY2FudGlkYWQtbWluaW1hLW1heGltYS1kZS1lbGVtZW50b3Mtc2VsZWNjaW9uYWRvc1wiPjxhIGNsYXNzPVwiaGVhZGVyLWFuY2hvclwiIGhyZWY9XCIjY2FudGlkYWQtbWluaW1hLW1heGltYS1kZS1lbGVtZW50b3Mtc2VsZWNjaW9uYWRvc1wiPsK2PC9hPiBDYW50aWRhZCBNw61uaW1hIC8gTcOheGltYSBkZSBlbGVtZW50b3Mgc2VsZWNjaW9uYWRvczwvaDM+XG48cD5MYXMgcHJvcGllZGFkZXMgPGNvZGU+bWluPC9jb2RlPiB5IDxjb2RlPm1heDwvY29kZT4gcHVlZGVuIGxpbWl0YXIgbGEgY2FudGlkYWQgZGUgZWxlbWVudG9zIHNlbGVjY2lvbmFkb3MuPC9wPlxuPGRlbW8tYmxvY2s+XG4gICAgICAgIFxuICAgICAgICA8dGVtcGxhdGUgI3NvdXJjZT48ZWxlbWVudC1kZW1vNCAvPjwvdGVtcGxhdGU+XG4gICAgICAgIDx0ZW1wbGF0ZSAjaGlnaGxpZ2h0PjxwcmUgdi1wcmU+PGNvZGUgY2xhc3M9XCJodG1sXCI+Jmx0O3RlbXBsYXRlJmd0O1xuICAmbHQ7ZWwtY2hlY2tib3gtZ3JvdXAgXG4gICAgdi1tb2RlbD0mcXVvdDtjaGVja2VkQ2l0aWVzJnF1b3Q7XG4gICAgOm1pbj0mcXVvdDsxJnF1b3Q7XG4gICAgOm1heD0mcXVvdDsyJnF1b3Q7Jmd0O1xuICAgICZsdDtlbC1jaGVja2JveCB2LWZvcj0mcXVvdDtjaXR5IGluIGNpdGllcyZxdW90OyA6bGFiZWw9JnF1b3Q7Y2l0eSZxdW90OyA6a2V5PSZxdW90O2NpdHkmcXVvdDsmZ3Q7e3tjaXR5fX0mbHQ7L2VsLWNoZWNrYm94Jmd0O1xuICAmbHQ7L2VsLWNoZWNrYm94LWdyb3VwJmd0O1xuJmx0Oy90ZW1wbGF0ZSZndDtcbiZsdDtzY3JpcHQmZ3Q7XG4gIGNvbnN0IGNpdHlPcHRpb25zID0gWydTaGFuZ2hhaScsICdCZWlqaW5nJywgJ0d1YW5nemhvdScsICdTaGVuemhlbiddO1xuICBleHBvcnQgZGVmYXVsdCB7XG4gICAgZGF0YSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNoZWNrZWRDaXRpZXM6IFsnU2hhbmdoYWknLCAnQmVpamluZyddLFxuICAgICAgICBjaXRpZXM6IGNpdHlPcHRpb25zXG4gICAgICB9O1xuICAgIH1cbiAgfTtcbiZsdDsvc2NyaXB0Jmd0O1xuPC9jb2RlPjwvcHJlPjwvdGVtcGxhdGU+PC9kZW1vLWJsb2NrPjxoMyBpZD1cImVzdGlsby10aXBvLWJvdG9uXCI+PGEgY2xhc3M9XCJoZWFkZXItYW5jaG9yXCIgaHJlZj1cIiNlc3RpbG8tdGlwby1ib3RvblwiPsK2PC9hPiBFc3RpbG8gdGlwbyBCb3TDs248L2gzPlxuPHA+Q2hlY2tib3ggY29uIGVzdGlsbyB0aXBvIEJvdMOzbi48L3A+XG48ZGVtby1ibG9jaz5cbiAgICAgICAgPGRpdj48cD5Tw7NsbyBkZWJlIGNhbWJpYXIgZWwgZWxlbWVudG8gPGNvZGU+ZWwtY2hlY2tib3g8L2NvZGU+IHBvciBlbCBlbGVtZW50byA8Y29kZT5lbC1jaGVja2JveC1idXR0b248L2NvZGU+LiBUYW1iacOpbiBwcm92ZWVtb3MgZWwgYXRyaWJ1dG8gPGNvZGU+c2l6ZTwvY29kZT4uPC9wPlxuPC9kaXY+XG4gICAgICAgIDx0ZW1wbGF0ZSAjc291cmNlPjxlbGVtZW50LWRlbW81IC8+PC90ZW1wbGF0ZT5cbiAgICAgICAgPHRlbXBsYXRlICNoaWdobGlnaHQ+PHByZSB2LXByZT48Y29kZSBjbGFzcz1cImh0bWxcIj4mbHQ7dGVtcGxhdGUmZ3Q7XG4gICZsdDtkaXYmZ3Q7XG4gICAgJmx0O2VsLWNoZWNrYm94LWdyb3VwIHYtbW9kZWw9JnF1b3Q7Y2hlY2tib3hHcm91cDEmcXVvdDsmZ3Q7XG4gICAgICAmbHQ7ZWwtY2hlY2tib3gtYnV0dG9uIHYtZm9yPSZxdW90O2NpdHkgaW4gY2l0aWVzJnF1b3Q7IDpsYWJlbD0mcXVvdDtjaXR5JnF1b3Q7IDprZXk9JnF1b3Q7Y2l0eSZxdW90OyZndDt7e2NpdHl9fSZsdDsvZWwtY2hlY2tib3gtYnV0dG9uJmd0O1xuICAgICZsdDsvZWwtY2hlY2tib3gtZ3JvdXAmZ3Q7XG4gICZsdDsvZGl2Jmd0O1xuICAmbHQ7ZGl2IHN0eWxlPSZxdW90O21hcmdpbi10b3A6IDIwcHgmcXVvdDsmZ3Q7XG4gICAgJmx0O2VsLWNoZWNrYm94LWdyb3VwIHYtbW9kZWw9JnF1b3Q7Y2hlY2tib3hHcm91cDImcXVvdDsgc2l6ZT0mcXVvdDttZWRpdW0mcXVvdDsmZ3Q7XG4gICAgICAmbHQ7ZWwtY2hlY2tib3gtYnV0dG9uIHYtZm9yPSZxdW90O2NpdHkgaW4gY2l0aWVzJnF1b3Q7IDpsYWJlbD0mcXVvdDtjaXR5JnF1b3Q7IDprZXk9JnF1b3Q7Y2l0eSZxdW90OyZndDt7e2NpdHl9fSZsdDsvZWwtY2hlY2tib3gtYnV0dG9uJmd0O1xuICAgICZsdDsvZWwtY2hlY2tib3gtZ3JvdXAmZ3Q7XG4gICZsdDsvZGl2Jmd0O1xuICAmbHQ7ZGl2IHN0eWxlPSZxdW90O21hcmdpbi10b3A6IDIwcHgmcXVvdDsmZ3Q7XG4gICAgJmx0O2VsLWNoZWNrYm94LWdyb3VwIHYtbW9kZWw9JnF1b3Q7Y2hlY2tib3hHcm91cDMmcXVvdDsgc2l6ZT0mcXVvdDtzbWFsbCZxdW90OyZndDtcbiAgICAgICZsdDtlbC1jaGVja2JveC1idXR0b24gdi1mb3I9JnF1b3Q7Y2l0eSBpbiBjaXRpZXMmcXVvdDsgOmxhYmVsPSZxdW90O2NpdHkmcXVvdDsgOmRpc2FibGVkPSZxdW90O2NpdHkgPT09ICdCZWlqaW5nJyZxdW90OyA6a2V5PSZxdW90O2NpdHkmcXVvdDsmZ3Q7e3tjaXR5fX0mbHQ7L2VsLWNoZWNrYm94LWJ1dHRvbiZndDtcbiAgICAmbHQ7L2VsLWNoZWNrYm94LWdyb3VwJmd0O1xuICAmbHQ7L2RpdiZndDtcbiAgJmx0O2RpdiBzdHlsZT0mcXVvdDttYXJnaW4tdG9wOiAyMHB4JnF1b3Q7Jmd0O1xuICAgICZsdDtlbC1jaGVja2JveC1ncm91cCB2LW1vZGVsPSZxdW90O2NoZWNrYm94R3JvdXA0JnF1b3Q7IHNpemU9JnF1b3Q7bWluaSZxdW90OyBkaXNhYmxlZCZndDtcbiAgICAgICZsdDtlbC1jaGVja2JveC1idXR0b24gdi1mb3I9JnF1b3Q7Y2l0eSBpbiBjaXRpZXMmcXVvdDsgOmxhYmVsPSZxdW90O2NpdHkmcXVvdDsgOmtleT0mcXVvdDtjaXR5JnF1b3Q7Jmd0O3t7Y2l0eX19Jmx0Oy9lbC1jaGVja2JveC1idXR0b24mZ3Q7XG4gICAgJmx0Oy9lbC1jaGVja2JveC1ncm91cCZndDtcbiAgJmx0Oy9kaXYmZ3Q7XG4mbHQ7L3RlbXBsYXRlJmd0O1xuJmx0O3NjcmlwdCZndDtcbiAgY29uc3QgY2l0eU9wdGlvbnMgPSBbJ1NoYW5naGFpJywgJ0JlaWppbmcnLCAnR3Vhbmd6aG91JywgJ1NoZW56aGVuJ107XG5cbiAgZXhwb3J0IGRlZmF1bHQge1xuICAgIGRhdGEgKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY2hlY2tib3hHcm91cDE6IFsnU2hhbmdoYWknXSxcbiAgICAgICAgY2hlY2tib3hHcm91cDI6IFsnU2hhbmdoYWknXSxcbiAgICAgICAgY2hlY2tib3hHcm91cDM6IFsnU2hhbmdoYWknXSxcbiAgICAgICAgY2hlY2tib3hHcm91cDQ6IFsnU2hhbmdoYWknXSxcbiAgICAgICAgY2l0aWVzOiBjaXR5T3B0aW9uc1xuICAgICAgfTtcbiAgICB9XG4gIH1cbiZsdDsvc2NyaXB0Jmd0O1xuPC9jb2RlPjwvcHJlPjwvdGVtcGxhdGU+PC9kZW1vLWJsb2NrPjxoMyBpZD1cImNvbi1ib3JkZXNcIj48YSBjbGFzcz1cImhlYWRlci1hbmNob3JcIiBocmVmPVwiI2Nvbi1ib3JkZXNcIj7CtjwvYT4gQ29uIGJvcmRlczwvaDM+XG48ZGVtby1ibG9jaz5cbiAgICAgICAgPGRpdj48cD5FbCBhdHJpYnV0byA8Y29kZT5ib3JkZXI8L2NvZGU+IGFncmVnYSB1biBib3JkZSBhIGxvcyBDaGVja2JveGVzLjwvcD5cbjwvZGl2PlxuICAgICAgICA8dGVtcGxhdGUgI3NvdXJjZT48ZWxlbWVudC1kZW1vNiAvPjwvdGVtcGxhdGU+XG4gICAgICAgIDx0ZW1wbGF0ZSAjaGlnaGxpZ2h0PjxwcmUgdi1wcmU+PGNvZGUgY2xhc3M9XCJodG1sXCI+Jmx0O3RlbXBsYXRlJmd0O1xuICAmbHQ7ZGl2Jmd0O1xuICAgICZsdDtlbC1jaGVja2JveCB2LW1vZGVsPSZxdW90O2NoZWNrZWQxJnF1b3Q7IGxhYmVsPSZxdW90O09wY2nDs24xJnF1b3Q7IGJvcmRlciZndDsmbHQ7L2VsLWNoZWNrYm94Jmd0O1xuICAgICZsdDtlbC1jaGVja2JveCB2LW1vZGVsPSZxdW90O2NoZWNrZWQyJnF1b3Q7IGxhYmVsPSZxdW90O09wY2nDs24yJnF1b3Q7IGJvcmRlciZndDsmbHQ7L2VsLWNoZWNrYm94Jmd0O1xuICAmbHQ7L2RpdiZndDtcbiAgJmx0O2RpdiBzdHlsZT0mcXVvdDttYXJnaW4tdG9wOiAyMHB4JnF1b3Q7Jmd0O1xuICAgICZsdDtlbC1jaGVja2JveCB2LW1vZGVsPSZxdW90O2NoZWNrZWQzJnF1b3Q7IGxhYmVsPSZxdW90O09wY2nDs24xJnF1b3Q7IGJvcmRlciBzaXplPSZxdW90O21lZGl1bSZxdW90OyZndDsmbHQ7L2VsLWNoZWNrYm94Jmd0O1xuICAgICZsdDtlbC1jaGVja2JveCB2LW1vZGVsPSZxdW90O2NoZWNrZWQ0JnF1b3Q7IGxhYmVsPSZxdW90O09wY2nDs24yJnF1b3Q7IGJvcmRlciBzaXplPSZxdW90O21lZGl1bSZxdW90OyZndDsmbHQ7L2VsLWNoZWNrYm94Jmd0O1xuICAmbHQ7L2RpdiZndDtcbiAgJmx0O2RpdiBzdHlsZT0mcXVvdDttYXJnaW4tdG9wOiAyMHB4JnF1b3Q7Jmd0O1xuICAgICZsdDtlbC1jaGVja2JveC1ncm91cCB2LW1vZGVsPSZxdW90O2NoZWNrYm94R3JvdXAxJnF1b3Q7IHNpemU9JnF1b3Q7c21hbGwmcXVvdDsmZ3Q7XG4gICAgICAmbHQ7ZWwtY2hlY2tib3ggbGFiZWw9JnF1b3Q7T3BjacOzbjEmcXVvdDsgYm9yZGVyJmd0OyZsdDsvZWwtY2hlY2tib3gmZ3Q7XG4gICAgICAmbHQ7ZWwtY2hlY2tib3ggbGFiZWw9JnF1b3Q7T3BjacOzbjImcXVvdDsgYm9yZGVyIGRpc2FibGVkJmd0OyZsdDsvZWwtY2hlY2tib3gmZ3Q7XG4gICAgJmx0Oy9lbC1jaGVja2JveC1ncm91cCZndDtcbiAgJmx0Oy9kaXYmZ3Q7XG4gICZsdDtkaXYgc3R5bGU9JnF1b3Q7bWFyZ2luLXRvcDogMjBweCZxdW90OyZndDtcbiAgICAmbHQ7ZWwtY2hlY2tib3gtZ3JvdXAgdi1tb2RlbD0mcXVvdDtjaGVja2JveEdyb3VwMiZxdW90OyBzaXplPSZxdW90O21pbmkmcXVvdDsgZGlzYWJsZWQmZ3Q7XG4gICAgICAmbHQ7ZWwtY2hlY2tib3ggbGFiZWw9JnF1b3Q7T3BjacOzbjEmcXVvdDsgYm9yZGVyJmd0OyZsdDsvZWwtY2hlY2tib3gmZ3Q7XG4gICAgICAmbHQ7ZWwtY2hlY2tib3ggbGFiZWw9JnF1b3Q7T3BjacOzbjImcXVvdDsgYm9yZGVyJmd0OyZsdDsvZWwtY2hlY2tib3gmZ3Q7XG4gICAgJmx0Oy9lbC1jaGVja2JveC1ncm91cCZndDtcbiAgJmx0Oy9kaXYmZ3Q7XG4mbHQ7L3RlbXBsYXRlJmd0O1xuXG4mbHQ7c2NyaXB0Jmd0O1xuICBleHBvcnQgZGVmYXVsdCB7XG4gICAgZGF0YSAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjaGVja2VkMTogdHJ1ZSxcbiAgICAgICAgY2hlY2tlZDI6IGZhbHNlLFxuICAgICAgICBjaGVja2VkMzogZmFsc2UsXG4gICAgICAgIGNoZWNrZWQ0OiB0cnVlLFxuICAgICAgICBjaGVja2JveEdyb3VwMTogW10sXG4gICAgICAgIGNoZWNrYm94R3JvdXAyOiBbXVxuICAgICAgfTtcbiAgICB9XG4gIH1cbiZsdDsvc2NyaXB0Jmd0O1xuPC9jb2RlPjwvcHJlPjwvdGVtcGxhdGU+PC9kZW1vLWJsb2NrPjxoMyBpZD1cImF0cmlidXRvcy1kZS1jaGVja2JveFwiPjxhIGNsYXNzPVwiaGVhZGVyLWFuY2hvclwiIGhyZWY9XCIjYXRyaWJ1dG9zLWRlLWNoZWNrYm94XCI+wrY8L2E+IEF0cmlidXRvcyBkZSBDaGVja2JveDwvaDM+XG48dGFibGU+XG48dGhlYWQ+XG48dHI+XG48dGg+QXRyaWJ1dG88L3RoPlxuPHRoPkRlc2NyaXBjacOzbjwvdGg+XG48dGg+VGlwbzwvdGg+XG48dGg+VmFsb3JlcyBhY2VwdGFkb3M8L3RoPlxuPHRoPlBvciBkZWZlY3RvPC90aD5cbjwvdHI+XG48L3RoZWFkPlxuPHRib2R5PlxuPHRyPlxuPHRkPnZhbHVlIC8gdi1tb2RlbDwvdGQ+XG48dGQ+dmFsb3IgZW5sYXphZG88L3RkPlxuPHRkPnN0cmluZyAvIG51bWJlciAvIGJvb2xlYW48L3RkPlxuPHRkPuKAlDwvdGQ+XG48dGQ+4oCUPC90ZD5cbjwvdHI+XG48dHI+XG48dGQ+bGFiZWw8L3RkPlxuPHRkPnZhbG9yIGRlbCBDaGVja2JveCBzaSBlcyB1c2FkbyBkZW50cm8gZGUgdW4gdGFnIDxjb2RlPmNoZWNrYm94LWdyb3VwPC9jb2RlPjwvdGQ+XG48dGQ+c3RyaW5nIC8gbnVtYmVyIC8gYm9vbGVhbjwvdGQ+XG48dGQ+4oCUPC90ZD5cbjx0ZD7igJQ8L3RkPlxuPC90cj5cbjx0cj5cbjx0ZD50cnVlLWxhYmVsPC90ZD5cbjx0ZD52YWxvciBkZWwgQ2hlY2tib3ggc2kgZXN0w6EgbWFyY2FkbzwvdGQ+XG48dGQ+c3RyaW5nIC8gbnVtYmVyPC90ZD5cbjx0ZD7igJQ8L3RkPlxuPHRkPuKAlDwvdGQ+XG48L3RyPlxuPHRyPlxuPHRkPmZhbHNlLWxhYmVsPC90ZD5cbjx0ZD52YWxvciBkZWwgQ2hlY2tib3ggc2kgbm8gZXN0w6EgbWFyY2FkbzwvdGQ+XG48dGQ+c3RyaW5nIC8gbnVtYmVyPC90ZD5cbjx0ZD7igJQ8L3RkPlxuPHRkPuKAlDwvdGQ+XG48L3RyPlxuPHRyPlxuPHRkPmRpc2FibGVkPC90ZD5cbjx0ZD5lc3BlY2lmaWNhIHNpIGVsIENoZWNrYm94IGVzdMOhIGRlc2hhYmlsaXRhZG88L3RkPlxuPHRkPmJvb2xlYW48L3RkPlxuPHRkPuKAlDwvdGQ+XG48dGQ+ZmFsc2U8L3RkPlxuPC90cj5cbjx0cj5cbjx0ZD5ib3JkZXI8L3RkPlxuPHRkPmVzcGVjaWZpY2Egc2kgYWdyZWdhIHVuIGJvcmRlIGFscmVkZWRvciBkZWwgQ2hlY2tib3g8L3RkPlxuPHRkPmJvb2xlYW48L3RkPlxuPHRkPuKAlDwvdGQ+XG48dGQ+ZmFsc2U8L3RkPlxuPC90cj5cbjx0cj5cbjx0ZD5zaXplPC90ZD5cbjx0ZD50YW1hw7FvIGRlbCBDaGVja2JveCwgc8OzbG8gZnVuY2lvbmEgc2kgPGNvZGU+Ym9yZGVyPC9jb2RlPiBlcyB0cnVlPC90ZD5cbjx0ZD5zdHJpbmc8L3RkPlxuPHRkPm1lZGl1bSAvIHNtYWxsIC8gbWluaTwvdGQ+XG48dGQ+4oCUPC90ZD5cbjwvdHI+XG48dHI+XG48dGQ+bmFtZTwvdGQ+XG48dGQ+YXRyaWJ1dG8gPGNvZGU+bmFtZTwvY29kZT4gbmF0aXZvPC90ZD5cbjx0ZD5zdHJpbmc8L3RkPlxuPHRkPuKAlDwvdGQ+XG48dGQ+4oCUPC90ZD5cbjwvdHI+XG48dHI+XG48dGQ+Y2hlY2tlZDwvdGQ+XG48dGQ+ZXNwZWNpZmljYSBzaSBlbCBDaGVja2JveCBlc3TDoSBtYXJjYWRvPC90ZD5cbjx0ZD5ib29sZWFuPC90ZD5cbjx0ZD7igJQ8L3RkPlxuPHRkPmZhbHNlPC90ZD5cbjwvdHI+XG48dHI+XG48dGQ+aW5kZXRlcm1pbmF0ZTwvdGQ+XG48dGQ+c2ltaWxhciBhIDxjb2RlPmluZGV0ZXJtaW5hdGU8L2NvZGU+IGVuIGVsIGNoZWNrYm94IG5hdGl2bzwvdGQ+XG48dGQ+Ym9vbGVhbjwvdGQ+XG48dGQ+4oCUPC90ZD5cbjx0ZD5mYWxzZTwvdGQ+XG48L3RyPlxuPC90Ym9keT5cbjwvdGFibGU+XG48aDMgaWQ9XCJldmVudG9zLWRlLWNoZWNrYm94XCI+PGEgY2xhc3M9XCJoZWFkZXItYW5jaG9yXCIgaHJlZj1cIiNldmVudG9zLWRlLWNoZWNrYm94XCI+wrY8L2E+IEV2ZW50b3MgZGUgQ2hlY2tib3g8L2gzPlxuPHRhYmxlPlxuPHRoZWFkPlxuPHRyPlxuPHRoPk5vbWJyZTwvdGg+XG48dGg+RGVzY3JpcGNpw7NuPC90aD5cbjx0aD5QYXJhbWV0cm9zPC90aD5cbjwvdHI+XG48L3RoZWFkPlxuPHRib2R5PlxuPHRyPlxuPHRkPmNoYW5nZTwvdGQ+XG48dGQ+c2UgZWplY3V0YSBjdWFuZG8gZWwgdmFsb3IgZW5sYXphZG8gY2FtYmlhPC90ZD5cbjx0ZD5lbCB2YWxvciBhY3R1YWxpemFkbzwvdGQ+XG48L3RyPlxuPC90Ym9keT5cbjwvdGFibGU+XG48aDMgaWQ9XCJhdHJpYnV0b3MtZGUtY2hlY2tib3gtZ3JvdXBcIj48YSBjbGFzcz1cImhlYWRlci1hbmNob3JcIiBocmVmPVwiI2F0cmlidXRvcy1kZS1jaGVja2JveC1ncm91cFwiPsK2PC9hPiBBdHJpYnV0b3MgZGUgQ2hlY2tib3gtZ3JvdXA8L2gzPlxuPHRhYmxlPlxuPHRoZWFkPlxuPHRyPlxuPHRoPkF0cmlidXRvPC90aD5cbjx0aD5EZXNjcmlwY2nDs248L3RoPlxuPHRoPlRpcG88L3RoPlxuPHRoPlZhbG9yZXMgYWNlcHRhZG9zPC90aD5cbjx0aD5Qb3IgRGVmZWN0bzwvdGg+XG48L3RyPlxuPC90aGVhZD5cbjx0Ym9keT5cbjx0cj5cbjx0ZD52YWx1ZSAvIHYtbW9kZWw8L3RkPlxuPHRkPnZhbG9yIGVubGF6YWRvPC90ZD5cbjx0ZD5hcnJheTwvdGQ+XG48dGQ+4oCUPC90ZD5cbjx0ZD7igJQ8L3RkPlxuPC90cj5cbjx0cj5cbjx0ZD5zaXplPC90ZD5cbjx0ZD50YW1hw7FvIGRlIGxvcyBjaGVja2JveGVzIGRlIHRpcG8gYm90w7NuIG8gbG9zIGNoZWNrYm94ZXMgY29uIGJvcmRlcjwvdGQ+XG48dGQ+c3RyaW5nPC90ZD5cbjx0ZD5tZWRpdW0gLyBzbWFsbCAvIG1pbmk8L3RkPlxuPHRkPuKAlDwvdGQ+XG48L3RyPlxuPHRyPlxuPHRkPmRpc2FibGVkPC90ZD5cbjx0ZD5lc3BlY2lmaWNhIHNpIGxvcyBjaGVja2JveGVzIGFuaWRhZG9zIGVzdMOhbiBkZXNoYWJpbGl0YWRvczwvdGQ+XG48dGQ+Ym9vbGVhbjwvdGQ+XG48dGQ+4oCUPC90ZD5cbjx0ZD5mYWxzZTwvdGQ+XG48L3RyPlxuPHRyPlxuPHRkPm1pbjwvdGQ+XG48dGQ+Y2FudGlkYWQgbcOtbmltYSBkZSBjaGVja2JveGVzIHF1ZSBkZWJlbiBzZXIgbWFyY2Fkb3M8L3RkPlxuPHRkPm51bWJlcjwvdGQ+XG48dGQ+4oCUPC90ZD5cbjx0ZD7igJQ8L3RkPlxuPC90cj5cbjx0cj5cbjx0ZD5tYXg8L3RkPlxuPHRkPmNhbnRpZGFkIG3DoXhpbWEgZGUgY2hlY2tib3hlcyBxdWUgcHVlZGVuIHNlciBtYXJjYWRvczwvdGQ+XG48dGQ+bnVtYmVyPC90ZD5cbjx0ZD7igJQ8L3RkPlxuPHRkPuKAlDwvdGQ+XG48L3RyPlxuPHRyPlxuPHRkPnRleHQtY29sb3I8L3RkPlxuPHRkPmNvbG9yIGRlIGZ1ZW50ZSBjdWFuZG8gZWwgYm90w7NuIGVzdMOhIGFjdGl2bzwvdGQ+XG48dGQ+c3RyaW5nPC90ZD5cbjx0ZD7igJQ8L3RkPlxuPHRkPiNmZmZmZmY8L3RkPlxuPC90cj5cbjx0cj5cbjx0ZD5maWxsPC90ZD5cbjx0ZD5jb2xvciBkZSBib3JkZXIgeSBkZSBmb25kbyBjdWFuZG8gZWwgYm90w7NuIGVzdMOhIGFjdGl2bzwvdGQ+XG48dGQ+c3RyaW5nPC90ZD5cbjx0ZD7igJQ8L3RkPlxuPHRkPiM0MDlFRkY8L3RkPlxuPC90cj5cbjwvdGJvZHk+XG48L3RhYmxlPlxuPGgzIGlkPVwiZXZlbnRvcy1kZS1jaGVja2JveC1ncm91cFwiPjxhIGNsYXNzPVwiaGVhZGVyLWFuY2hvclwiIGhyZWY9XCIjZXZlbnRvcy1kZS1jaGVja2JveC1ncm91cFwiPsK2PC9hPiBFdmVudG9zIGRlIENoZWNrYm94LWdyb3VwPC9oMz5cbjx0YWJsZT5cbjx0aGVhZD5cbjx0cj5cbjx0aD5Ob21icmUgZGUgRXZlbnRvPC90aD5cbjx0aD5EZXNjcmlwY2nDs248L3RoPlxuPHRoPlBhcmFtZXRyb3M8L3RoPlxuPC90cj5cbjwvdGhlYWQ+XG48dGJvZHk+XG48dHI+XG48dGQ+Y2hhbmdlPC90ZD5cbjx0ZD5zZSBlamVjdXRhIGN1YW5kbyBlbCB2YWxvciBlbmxhemFkbyBjYW1iaWE8L3RkPlxuPHRkPmVsIHZhbG9yIGFjdHVhbGl6YWRvPC90ZD5cbjwvdHI+XG48L3Rib2R5PlxuPC90YWJsZT5cbjxoMyBpZD1cImF0cmlidXRvcy1kZS1jaGVja2JveC1idXR0b25cIj48YSBjbGFzcz1cImhlYWRlci1hbmNob3JcIiBocmVmPVwiI2F0cmlidXRvcy1kZS1jaGVja2JveC1idXR0b25cIj7CtjwvYT4gQXRyaWJ1dG9zIGRlIENoZWNrYm94LWJ1dHRvbjwvaDM+XG48dGFibGU+XG48dGhlYWQ+XG48dHI+XG48dGg+QXRyaWJ1dG88L3RoPlxuPHRoPkRlc2NyaXBjacOzbjwvdGg+XG48dGg+VGlwbzwvdGg+XG48dGg+VmFsb3JlcyBhY2VwdGFkb3M8L3RoPlxuPHRoPlBvciBkZWZlY3RvPC90aD5cbjwvdHI+XG48L3RoZWFkPlxuPHRib2R5PlxuPHRyPlxuPHRkPmxhYmVsPC90ZD5cbjx0ZD52YWxvciBkZWwgY2hlY2tib3ggY3VhbmRvIGVzIHVzYWRvIGRlbnRybyBkZSB1biA8Y29kZT5jaGVja2JveC1ncm91cDwvY29kZT48L3RkPlxuPHRkPnN0cmluZyAvIG51bWJlciAvIGJvb2xlYW48L3RkPlxuPHRkPuKAlDwvdGQ+XG48dGQ+4oCUPC90ZD5cbjwvdHI+XG48dHI+XG48dGQ+dHJ1ZS1sYWJlbDwvdGQ+XG48dGQ+dmFsb3IgZGVsIGNoZWNrYm94IHNpIGVzdGUgZXN0w6EgbWFyY2FkbzwvdGQ+XG48dGQ+c3RyaW5nIC8gbnVtYmVyPC90ZD5cbjx0ZD7igJQ8L3RkPlxuPHRkPuKAlDwvdGQ+XG48L3RyPlxuPHRyPlxuPHRkPmZhbHNlLWxhYmVsPC90ZD5cbjx0ZD52YWxvciBkZWwgY2hlY2tib3ggc2kgZXN0ZSBubyBlc3TDoSBtYXJjYWRvPC90ZD5cbjx0ZD5zdHJpbmcgLyBudW1iZXI8L3RkPlxuPHRkPuKAlDwvdGQ+XG48dGQ+4oCUPC90ZD5cbjwvdHI+XG48dHI+XG48dGQ+ZGlzYWJsZWQ8L3RkPlxuPHRkPmVzcGVjaWZpY2Egc2kgZWwgY2hlY2tib3ggZXN0w6EgZGVzaGFiaWxpdGFkbzwvdGQ+XG48dGQ+Ym9vbGVhbjwvdGQ+XG48dGQ+4oCUPC90ZD5cbjx0ZD5mYWxzZTwvdGQ+XG48L3RyPlxuPHRyPlxuPHRkPm5hbWU8L3RkPlxuPHRkPmF0cmlidXRvICduYW1lJyBkZWwgY2hlY2JveCBuYXRpdm88L3RkPlxuPHRkPnN0cmluZzwvdGQ+XG48dGQ+4oCUPC90ZD5cbjx0ZD7igJQ8L3RkPlxuPC90cj5cbjx0cj5cbjx0ZD5jaGVja2VkPC90ZD5cbjx0ZD5zaSBlbCBjaGVja2JveCBlc3TDoSBtYXJjYWRvPC90ZD5cbjx0ZD5ib29sZWFuPC90ZD5cbjx0ZD7igJQ8L3RkPlxuPHRkPmZhbHNlPC90ZD5cbjwvdHI+XG48L3Rib2R5PlxuPC90YWJsZT5cblxuICAgICAgPC9zZWN0aW9uPlxuICAgIDwvdGVtcGxhdGU+XG4gICAgPHNjcmlwdD5cbiAgICAgIGltcG9ydCBobGpzIGZyb20gJ2hpZ2hsaWdodC5qcydcbiAgICAgIGltcG9ydCAqIGFzIFZ1ZSBmcm9tIFwidnVlXCJcbiAgICAgIGV4cG9ydCBkZWZhdWx0IHtcbiAgICAgICAgbmFtZTogJ2NvbXBvbmVudC1kb2MnLFxuICAgICAgICBjb21wb25lbnRzOiB7XG4gICAgICAgICAgXCJlbGVtZW50LWRlbW8wXCI6IChmdW5jdGlvbigpIHtcbiAgICBcbiAgICBjb25zdCB7IGNyZWF0ZUNvbW1lbnRWTm9kZTogX2NyZWF0ZUNvbW1lbnRWTm9kZSwgY3JlYXRlVGV4dFZOb2RlOiBfY3JlYXRlVGV4dFZOb2RlLCByZXNvbHZlQ29tcG9uZW50OiBfcmVzb2x2ZUNvbXBvbmVudCwgd2l0aEN0eDogX3dpdGhDdHgsIGNyZWF0ZVZOb2RlOiBfY3JlYXRlVk5vZGUsIEZyYWdtZW50OiBfRnJhZ21lbnQsIG9wZW5CbG9jazogX29wZW5CbG9jaywgY3JlYXRlQmxvY2s6IF9jcmVhdGVCbG9jayB9ID0gVnVlXG5cbmZ1bmN0aW9uIHJlbmRlciAoX2N0eCwgX2NhY2hlKSB7XG4gIGNvbnN0IF9jb21wb25lbnRfZWxfY2hlY2tib3ggPSBfcmVzb2x2ZUNvbXBvbmVudChcImVsLWNoZWNrYm94XCIpXG5cbiAgcmV0dXJuIChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhfRnJhZ21lbnQsIG51bGwsIFtcbiAgICBfY3JlYXRlQ29tbWVudFZOb2RlKFwiIGBjaGVja2VkYCBkZWJlIHNlciB0cnVlIG8gZmFsc2UgXCIpLFxuICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2VsX2NoZWNrYm94LCB7XG4gICAgICBtb2RlbFZhbHVlOiBfY3R4LmNoZWNrZWQsXG4gICAgICBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjogJGV2ZW50ID0+IChfY3R4LmNoZWNrZWQgPSAkZXZlbnQpXG4gICAgfSwge1xuICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICBfY3JlYXRlVGV4dFZOb2RlKFwiT3BjacOzblwiKVxuICAgICAgXSksXG4gICAgICBfOiAxXG4gICAgfSwgOCAvKiBQUk9QUyAqLywgW1wibW9kZWxWYWx1ZVwiLCBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIl0pXG4gIF0sIDY0IC8qIFNUQUJMRV9GUkFHTUVOVCAqLykpXG59XG4gIFxuICAgIGNvbnN0IGRlbW9jb21wb25lbnRFeHBvcnQgPSB7XG4gICAgZGF0YSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNoZWNrZWQ6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICB9O1xuICAgIHJldHVybiB7XG4gICAgICBtb3VudGVkKCl7XG4gICAgICAgIHRoaXMuJG5leHRUaWNrKCgpPT57XG4gICAgICAgICAgY29uc3QgYmxvY2tzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgncHJlIGNvZGU6bm90KC5obGpzKScpXG4gICAgICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChibG9ja3MsIGhsanMuaGlnaGxpZ2h0QmxvY2spXG4gICAgICAgIH0pXG4gICAgICB9LFxuICAgICAgcmVuZGVyLFxuICAgICAgLi4uZGVtb2NvbXBvbmVudEV4cG9ydFxuICAgIH1cbiAgfSkoKSxcImVsZW1lbnQtZGVtbzFcIjogKGZ1bmN0aW9uKCkge1xuICAgIFxuICAgIGNvbnN0IHsgY3JlYXRlVGV4dFZOb2RlOiBfY3JlYXRlVGV4dFZOb2RlLCByZXNvbHZlQ29tcG9uZW50OiBfcmVzb2x2ZUNvbXBvbmVudCwgd2l0aEN0eDogX3dpdGhDdHgsIGNyZWF0ZVZOb2RlOiBfY3JlYXRlVk5vZGUsIEZyYWdtZW50OiBfRnJhZ21lbnQsIG9wZW5CbG9jazogX29wZW5CbG9jaywgY3JlYXRlQmxvY2s6IF9jcmVhdGVCbG9jayB9ID0gVnVlXG5cbmZ1bmN0aW9uIHJlbmRlciAoX2N0eCwgX2NhY2hlKSB7XG4gIGNvbnN0IF9jb21wb25lbnRfZWxfY2hlY2tib3ggPSBfcmVzb2x2ZUNvbXBvbmVudChcImVsLWNoZWNrYm94XCIpXG5cbiAgcmV0dXJuIChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhfRnJhZ21lbnQsIG51bGwsIFtcbiAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF9jaGVja2JveCwge1xuICAgICAgbW9kZWxWYWx1ZTogX2N0eC5jaGVja2VkMSxcbiAgICAgIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOiAkZXZlbnQgPT4gKF9jdHguY2hlY2tlZDEgPSAkZXZlbnQpLFxuICAgICAgZGlzYWJsZWQ6IFwiXCJcbiAgICB9LCB7XG4gICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgIF9jcmVhdGVUZXh0Vk5vZGUoXCJPcGNpw7NuXCIpXG4gICAgICBdKSxcbiAgICAgIF86IDFcbiAgICB9LCA4IC8qIFBST1BTICovLCBbXCJtb2RlbFZhbHVlXCIsIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiXSksXG4gICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfY2hlY2tib3gsIHtcbiAgICAgIG1vZGVsVmFsdWU6IF9jdHguY2hlY2tlZDIsXG4gICAgICBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjogJGV2ZW50ID0+IChfY3R4LmNoZWNrZWQyID0gJGV2ZW50KSxcbiAgICAgIGRpc2FibGVkOiBcIlwiXG4gICAgfSwge1xuICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICBfY3JlYXRlVGV4dFZOb2RlKFwiT3BjacOzblwiKVxuICAgICAgXSksXG4gICAgICBfOiAxXG4gICAgfSwgOCAvKiBQUk9QUyAqLywgW1wibW9kZWxWYWx1ZVwiLCBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIl0pXG4gIF0sIDY0IC8qIFNUQUJMRV9GUkFHTUVOVCAqLykpXG59XG4gIFxuICAgIGNvbnN0IGRlbW9jb21wb25lbnRFeHBvcnQgPSB7XG4gICAgZGF0YSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNoZWNrZWQxOiBmYWxzZSxcbiAgICAgICAgY2hlY2tlZDI6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICB9O1xuICAgIHJldHVybiB7XG4gICAgICBtb3VudGVkKCl7XG4gICAgICAgIHRoaXMuJG5leHRUaWNrKCgpPT57XG4gICAgICAgICAgY29uc3QgYmxvY2tzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgncHJlIGNvZGU6bm90KC5obGpzKScpXG4gICAgICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChibG9ja3MsIGhsanMuaGlnaGxpZ2h0QmxvY2spXG4gICAgICAgIH0pXG4gICAgICB9LFxuICAgICAgcmVuZGVyLFxuICAgICAgLi4uZGVtb2NvbXBvbmVudEV4cG9ydFxuICAgIH1cbiAgfSkoKSxcImVsZW1lbnQtZGVtbzJcIjogKGZ1bmN0aW9uKCkge1xuICAgIFxuICAgIGNvbnN0IHsgcmVzb2x2ZUNvbXBvbmVudDogX3Jlc29sdmVDb21wb25lbnQsIGNyZWF0ZVZOb2RlOiBfY3JlYXRlVk5vZGUsIHdpdGhDdHg6IF93aXRoQ3R4LCBvcGVuQmxvY2s6IF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrOiBfY3JlYXRlQmxvY2sgfSA9IFZ1ZVxuXG5mdW5jdGlvbiByZW5kZXIgKF9jdHgsIF9jYWNoZSkge1xuICBjb25zdCBfY29tcG9uZW50X2VsX2NoZWNrYm94ID0gX3Jlc29sdmVDb21wb25lbnQoXCJlbC1jaGVja2JveFwiKVxuICBjb25zdCBfY29tcG9uZW50X2VsX2NoZWNrYm94X2dyb3VwID0gX3Jlc29sdmVDb21wb25lbnQoXCJlbC1jaGVja2JveC1ncm91cFwiKVxuXG4gIHJldHVybiAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9lbF9jaGVja2JveF9ncm91cCwge1xuICAgIG1vZGVsVmFsdWU6IF9jdHguY2hlY2tMaXN0LFxuICAgIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOiAkZXZlbnQgPT4gKF9jdHguY2hlY2tMaXN0ID0gJGV2ZW50KVxuICB9LCB7XG4gICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfY2hlY2tib3gsIHsgbGFiZWw6IFwiT3BjacOzbiBBXCIgfSksXG4gICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF9jaGVja2JveCwgeyBsYWJlbDogXCJPcGNpw7NuIEJcIiB9KSxcbiAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2VsX2NoZWNrYm94LCB7IGxhYmVsOiBcIk9wY2nDs24gQ1wiIH0pLFxuICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfY2hlY2tib3gsIHtcbiAgICAgICAgbGFiZWw6IFwiZGlzYWJsZWRcIixcbiAgICAgICAgZGlzYWJsZWQ6IFwiXCJcbiAgICAgIH0pLFxuICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfY2hlY2tib3gsIHtcbiAgICAgICAgbGFiZWw6IFwiU2VsZWNjaW9uYWRvIHkgZGVzaGFiaWxpdGFkb1wiLFxuICAgICAgICBkaXNhYmxlZDogXCJcIlxuICAgICAgfSlcbiAgICBdKSxcbiAgICBfOiAxXG4gIH0sIDggLyogUFJPUFMgKi8sIFtcIm1vZGVsVmFsdWVcIiwgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCJdKSlcbn1cbiAgXG4gICAgY29uc3QgZGVtb2NvbXBvbmVudEV4cG9ydCA9IHtcbiAgICBkYXRhICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNoZWNrTGlzdDogWydTZWxlY2Npb25hZG8geSBkZXNoYWJpbGl0YWRvJywnT3BjacOzbiBBJ11cbiAgICAgIH07XG4gICAgfVxuICB9O1xuICAgIHJldHVybiB7XG4gICAgICBtb3VudGVkKCl7XG4gICAgICAgIHRoaXMuJG5leHRUaWNrKCgpPT57XG4gICAgICAgICAgY29uc3QgYmxvY2tzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgncHJlIGNvZGU6bm90KC5obGpzKScpXG4gICAgICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChibG9ja3MsIGhsanMuaGlnaGxpZ2h0QmxvY2spXG4gICAgICAgIH0pXG4gICAgICB9LFxuICAgICAgcmVuZGVyLFxuICAgICAgLi4uZGVtb2NvbXBvbmVudEV4cG9ydFxuICAgIH1cbiAgfSkoKSxcImVsZW1lbnQtZGVtbzNcIjogKGZ1bmN0aW9uKCkge1xuICAgIFxuICAgIGNvbnN0IHsgY3JlYXRlVGV4dFZOb2RlOiBfY3JlYXRlVGV4dFZOb2RlLCByZXNvbHZlQ29tcG9uZW50OiBfcmVzb2x2ZUNvbXBvbmVudCwgd2l0aEN0eDogX3dpdGhDdHgsIGNyZWF0ZVZOb2RlOiBfY3JlYXRlVk5vZGUsIHJlbmRlckxpc3Q6IF9yZW5kZXJMaXN0LCBGcmFnbWVudDogX0ZyYWdtZW50LCBvcGVuQmxvY2s6IF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrOiBfY3JlYXRlQmxvY2ssIHRvRGlzcGxheVN0cmluZzogX3RvRGlzcGxheVN0cmluZyB9ID0gVnVlXG5cbmZ1bmN0aW9uIHJlbmRlciAoX2N0eCwgX2NhY2hlKSB7XG4gIGNvbnN0IF9jb21wb25lbnRfZWxfY2hlY2tib3ggPSBfcmVzb2x2ZUNvbXBvbmVudChcImVsLWNoZWNrYm94XCIpXG4gIGNvbnN0IF9jb21wb25lbnRfZWxfY2hlY2tib3hfZ3JvdXAgPSBfcmVzb2x2ZUNvbXBvbmVudChcImVsLWNoZWNrYm94LWdyb3VwXCIpXG5cbiAgcmV0dXJuIChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhfRnJhZ21lbnQsIG51bGwsIFtcbiAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF9jaGVja2JveCwge1xuICAgICAgaW5kZXRlcm1pbmF0ZTogX2N0eC5pc0luZGV0ZXJtaW5hdGUsXG4gICAgICBtb2RlbFZhbHVlOiBfY3R4LmNoZWNrQWxsLFxuICAgICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6ICRldmVudCA9PiAoX2N0eC5jaGVja0FsbCA9ICRldmVudCksXG4gICAgICBvbkNoYW5nZTogX2N0eC5oYW5kbGVDaGVja0FsbENoYW5nZVxuICAgIH0sIHtcbiAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgX2NyZWF0ZVRleHRWTm9kZShcIk1hcmNhciB0b2Rvc1wiKVxuICAgICAgXSksXG4gICAgICBfOiAxXG4gICAgfSwgOCAvKiBQUk9QUyAqLywgW1wiaW5kZXRlcm1pbmF0ZVwiLCBcIm1vZGVsVmFsdWVcIiwgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCIsIFwib25DaGFuZ2VcIl0pLFxuICAgIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7IHN0eWxlOiB7XCJtYXJnaW5cIjpcIjE1cHggMFwifSB9KSxcbiAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF9jaGVja2JveF9ncm91cCwge1xuICAgICAgbW9kZWxWYWx1ZTogX2N0eC5jaGVja2VkQ2l0aWVzLFxuICAgICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6ICRldmVudCA9PiAoX2N0eC5jaGVja2VkQ2l0aWVzID0gJGV2ZW50KSxcbiAgICAgIG9uQ2hhbmdlOiBfY3R4LmhhbmRsZUNoZWNrZWRDaXRpZXNDaGFuZ2VcbiAgICB9LCB7XG4gICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgIChfb3BlbkJsb2NrKHRydWUpLCBfY3JlYXRlQmxvY2soX0ZyYWdtZW50LCBudWxsLCBfcmVuZGVyTGlzdChfY3R4LmNpdGllcywgKGNpdHkpID0+IHtcbiAgICAgICAgICByZXR1cm4gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9jb21wb25lbnRfZWxfY2hlY2tib3gsIHtcbiAgICAgICAgICAgIGxhYmVsOiBjaXR5LFxuICAgICAgICAgICAga2V5OiBjaXR5XG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICBfY3JlYXRlVGV4dFZOb2RlKF90b0Rpc3BsYXlTdHJpbmcoY2l0eSksIDEgLyogVEVYVCAqLylcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgXzogMlxuICAgICAgICAgIH0sIDEwMzIgLyogUFJPUFMsIERZTkFNSUNfU0xPVFMgKi8sIFtcImxhYmVsXCJdKSlcbiAgICAgICAgfSksIDEyOCAvKiBLRVlFRF9GUkFHTUVOVCAqLykpXG4gICAgICBdKSxcbiAgICAgIF86IDFcbiAgICB9LCA4IC8qIFBST1BTICovLCBbXCJtb2RlbFZhbHVlXCIsIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiLCBcIm9uQ2hhbmdlXCJdKVxuICBdLCA2NCAvKiBTVEFCTEVfRlJBR01FTlQgKi8pKVxufVxuICBcbiAgICBjb25zdCBjaXR5T3B0aW9ucyA9IFsnU2hhbmdoYWknLCAnQmVpamluZycsICdHdWFuZ3pob3UnLCAnU2hlbnpoZW4nXTtcbiAgY29uc3QgZGVtb2NvbXBvbmVudEV4cG9ydCA9IHtcbiAgICBkYXRhKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY2hlY2tBbGw6IGZhbHNlLFxuICAgICAgICBjaGVja2VkQ2l0aWVzOiBbJ1NoYW5naGFpJywgJ0JlaWppbmcnXSxcbiAgICAgICAgY2l0aWVzOiBjaXR5T3B0aW9ucyxcbiAgICAgICAgaXNJbmRldGVybWluYXRlOiB0cnVlXG4gICAgICB9O1xuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgaGFuZGxlQ2hlY2tBbGxDaGFuZ2UodmFsKSB7XG4gICAgICAgIHRoaXMuY2hlY2tlZENpdGllcyA9IHZhbCA/IGNpdHlPcHRpb25zIDogW107XG4gICAgICAgIHRoaXMuaXNJbmRldGVybWluYXRlID0gZmFsc2U7XG4gICAgICB9LFxuICAgICAgaGFuZGxlQ2hlY2tlZENpdGllc0NoYW5nZSh2YWx1ZSkge1xuICAgICAgICBsZXQgY2hlY2tlZENvdW50ID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICB0aGlzLmNoZWNrQWxsID0gY2hlY2tlZENvdW50ID09PSB0aGlzLmNpdGllcy5sZW5ndGg7XG4gICAgICAgIHRoaXMuaXNJbmRldGVybWluYXRlID0gY2hlY2tlZENvdW50ID4gMCAmJiBjaGVja2VkQ291bnQgPCB0aGlzLmNpdGllcy5sZW5ndGg7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICAgIHJldHVybiB7XG4gICAgICBtb3VudGVkKCl7XG4gICAgICAgIHRoaXMuJG5leHRUaWNrKCgpPT57XG4gICAgICAgICAgY29uc3QgYmxvY2tzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgncHJlIGNvZGU6bm90KC5obGpzKScpXG4gICAgICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChibG9ja3MsIGhsanMuaGlnaGxpZ2h0QmxvY2spXG4gICAgICAgIH0pXG4gICAgICB9LFxuICAgICAgcmVuZGVyLFxuICAgICAgLi4uZGVtb2NvbXBvbmVudEV4cG9ydFxuICAgIH1cbiAgfSkoKSxcImVsZW1lbnQtZGVtbzRcIjogKGZ1bmN0aW9uKCkge1xuICAgIFxuICAgIGNvbnN0IHsgcmVuZGVyTGlzdDogX3JlbmRlckxpc3QsIEZyYWdtZW50OiBfRnJhZ21lbnQsIG9wZW5CbG9jazogX29wZW5CbG9jaywgY3JlYXRlQmxvY2s6IF9jcmVhdGVCbG9jaywgdG9EaXNwbGF5U3RyaW5nOiBfdG9EaXNwbGF5U3RyaW5nLCBjcmVhdGVUZXh0Vk5vZGU6IF9jcmVhdGVUZXh0Vk5vZGUsIHJlc29sdmVDb21wb25lbnQ6IF9yZXNvbHZlQ29tcG9uZW50LCB3aXRoQ3R4OiBfd2l0aEN0eCwgY3JlYXRlVk5vZGU6IF9jcmVhdGVWTm9kZSB9ID0gVnVlXG5cbmZ1bmN0aW9uIHJlbmRlciAoX2N0eCwgX2NhY2hlKSB7XG4gIGNvbnN0IF9jb21wb25lbnRfZWxfY2hlY2tib3ggPSBfcmVzb2x2ZUNvbXBvbmVudChcImVsLWNoZWNrYm94XCIpXG4gIGNvbnN0IF9jb21wb25lbnRfZWxfY2hlY2tib3hfZ3JvdXAgPSBfcmVzb2x2ZUNvbXBvbmVudChcImVsLWNoZWNrYm94LWdyb3VwXCIpXG5cbiAgcmV0dXJuIChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhfY29tcG9uZW50X2VsX2NoZWNrYm94X2dyb3VwLCB7XG4gICAgbW9kZWxWYWx1ZTogX2N0eC5jaGVja2VkQ2l0aWVzLFxuICAgIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOiAkZXZlbnQgPT4gKF9jdHguY2hlY2tlZENpdGllcyA9ICRldmVudCksXG4gICAgbWluOiAxLFxuICAgIG1heDogMlxuICB9LCB7XG4gICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgKF9vcGVuQmxvY2sodHJ1ZSksIF9jcmVhdGVCbG9jayhfRnJhZ21lbnQsIG51bGwsIF9yZW5kZXJMaXN0KF9jdHguY2l0aWVzLCAoY2l0eSkgPT4ge1xuICAgICAgICByZXR1cm4gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9jb21wb25lbnRfZWxfY2hlY2tib3gsIHtcbiAgICAgICAgICBsYWJlbDogY2l0eSxcbiAgICAgICAgICBrZXk6IGNpdHlcbiAgICAgICAgfSwge1xuICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgIF9jcmVhdGVUZXh0Vk5vZGUoX3RvRGlzcGxheVN0cmluZyhjaXR5KSwgMSAvKiBURVhUICovKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIF86IDJcbiAgICAgICAgfSwgMTAzMiAvKiBQUk9QUywgRFlOQU1JQ19TTE9UUyAqLywgW1wibGFiZWxcIl0pKVxuICAgICAgfSksIDEyOCAvKiBLRVlFRF9GUkFHTUVOVCAqLykpXG4gICAgXSksXG4gICAgXzogMVxuICB9LCA4IC8qIFBST1BTICovLCBbXCJtb2RlbFZhbHVlXCIsIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiXSkpXG59XG4gIFxuICAgIGNvbnN0IGNpdHlPcHRpb25zID0gWydTaGFuZ2hhaScsICdCZWlqaW5nJywgJ0d1YW5nemhvdScsICdTaGVuemhlbiddO1xuICBjb25zdCBkZW1vY29tcG9uZW50RXhwb3J0ID0ge1xuICAgIGRhdGEoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjaGVja2VkQ2l0aWVzOiBbJ1NoYW5naGFpJywgJ0JlaWppbmcnXSxcbiAgICAgICAgY2l0aWVzOiBjaXR5T3B0aW9uc1xuICAgICAgfTtcbiAgICB9XG4gIH07XG4gICAgcmV0dXJuIHtcbiAgICAgIG1vdW50ZWQoKXtcbiAgICAgICAgdGhpcy4kbmV4dFRpY2soKCk9PntcbiAgICAgICAgICBjb25zdCBibG9ja3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdwcmUgY29kZTpub3QoLmhsanMpJylcbiAgICAgICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGJsb2NrcywgaGxqcy5oaWdobGlnaHRCbG9jaylcbiAgICAgICAgfSlcbiAgICAgIH0sXG4gICAgICByZW5kZXIsXG4gICAgICAuLi5kZW1vY29tcG9uZW50RXhwb3J0XG4gICAgfVxuICB9KSgpLFwiZWxlbWVudC1kZW1vNVwiOiAoZnVuY3Rpb24oKSB7XG4gICAgXG4gICAgY29uc3QgeyByZW5kZXJMaXN0OiBfcmVuZGVyTGlzdCwgRnJhZ21lbnQ6IF9GcmFnbWVudCwgb3BlbkJsb2NrOiBfb3BlbkJsb2NrLCBjcmVhdGVCbG9jazogX2NyZWF0ZUJsb2NrLCB0b0Rpc3BsYXlTdHJpbmc6IF90b0Rpc3BsYXlTdHJpbmcsIGNyZWF0ZVRleHRWTm9kZTogX2NyZWF0ZVRleHRWTm9kZSwgcmVzb2x2ZUNvbXBvbmVudDogX3Jlc29sdmVDb21wb25lbnQsIHdpdGhDdHg6IF93aXRoQ3R4LCBjcmVhdGVWTm9kZTogX2NyZWF0ZVZOb2RlIH0gPSBWdWVcblxuZnVuY3Rpb24gcmVuZGVyIChfY3R4LCBfY2FjaGUpIHtcbiAgY29uc3QgX2NvbXBvbmVudF9lbF9jaGVja2JveF9idXR0b24gPSBfcmVzb2x2ZUNvbXBvbmVudChcImVsLWNoZWNrYm94LWJ1dHRvblwiKVxuICBjb25zdCBfY29tcG9uZW50X2VsX2NoZWNrYm94X2dyb3VwID0gX3Jlc29sdmVDb21wb25lbnQoXCJlbC1jaGVja2JveC1ncm91cFwiKVxuXG4gIHJldHVybiAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX0ZyYWdtZW50LCBudWxsLCBbXG4gICAgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIG51bGwsIFtcbiAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2VsX2NoZWNrYm94X2dyb3VwLCB7XG4gICAgICAgIG1vZGVsVmFsdWU6IF9jdHguY2hlY2tib3hHcm91cDEsXG4gICAgICAgIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOiAkZXZlbnQgPT4gKF9jdHguY2hlY2tib3hHcm91cDEgPSAkZXZlbnQpXG4gICAgICB9LCB7XG4gICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAoX29wZW5CbG9jayh0cnVlKSwgX2NyZWF0ZUJsb2NrKF9GcmFnbWVudCwgbnVsbCwgX3JlbmRlckxpc3QoX2N0eC5jaXRpZXMsIChjaXR5KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9jb21wb25lbnRfZWxfY2hlY2tib3hfYnV0dG9uLCB7XG4gICAgICAgICAgICAgIGxhYmVsOiBjaXR5LFxuICAgICAgICAgICAgICBrZXk6IGNpdHlcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgIF9jcmVhdGVUZXh0Vk5vZGUoX3RvRGlzcGxheVN0cmluZyhjaXR5KSwgMSAvKiBURVhUICovKVxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgXzogMlxuICAgICAgICAgICAgfSwgMTAzMiAvKiBQUk9QUywgRFlOQU1JQ19TTE9UUyAqLywgW1wibGFiZWxcIl0pKVxuICAgICAgICAgIH0pLCAxMjggLyogS0VZRURfRlJBR01FTlQgKi8pKVxuICAgICAgICBdKSxcbiAgICAgICAgXzogMVxuICAgICAgfSwgOCAvKiBQUk9QUyAqLywgW1wibW9kZWxWYWx1ZVwiLCBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIl0pXG4gICAgXSksXG4gICAgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHsgc3R5bGU6IHtcIm1hcmdpbi10b3BcIjpcIjIwcHhcIn0gfSwgW1xuICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfY2hlY2tib3hfZ3JvdXAsIHtcbiAgICAgICAgbW9kZWxWYWx1ZTogX2N0eC5jaGVja2JveEdyb3VwMixcbiAgICAgICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6ICRldmVudCA9PiAoX2N0eC5jaGVja2JveEdyb3VwMiA9ICRldmVudCksXG4gICAgICAgIHNpemU6IFwibWVkaXVtXCJcbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgIChfb3BlbkJsb2NrKHRydWUpLCBfY3JlYXRlQmxvY2soX0ZyYWdtZW50LCBudWxsLCBfcmVuZGVyTGlzdChfY3R4LmNpdGllcywgKGNpdHkpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9lbF9jaGVja2JveF9idXR0b24sIHtcbiAgICAgICAgICAgICAgbGFiZWw6IGNpdHksXG4gICAgICAgICAgICAgIGtleTogY2l0eVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgICAgX2NyZWF0ZVRleHRWTm9kZShfdG9EaXNwbGF5U3RyaW5nKGNpdHkpLCAxIC8qIFRFWFQgKi8pXG4gICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICBfOiAyXG4gICAgICAgICAgICB9LCAxMDMyIC8qIFBST1BTLCBEWU5BTUlDX1NMT1RTICovLCBbXCJsYWJlbFwiXSkpXG4gICAgICAgICAgfSksIDEyOCAvKiBLRVlFRF9GUkFHTUVOVCAqLykpXG4gICAgICAgIF0pLFxuICAgICAgICBfOiAxXG4gICAgICB9LCA4IC8qIFBST1BTICovLCBbXCJtb2RlbFZhbHVlXCIsIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiXSlcbiAgICBdKSxcbiAgICBfY3JlYXRlVk5vZGUoXCJkaXZcIiwgeyBzdHlsZToge1wibWFyZ2luLXRvcFwiOlwiMjBweFwifSB9LCBbXG4gICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF9jaGVja2JveF9ncm91cCwge1xuICAgICAgICBtb2RlbFZhbHVlOiBfY3R4LmNoZWNrYm94R3JvdXAzLFxuICAgICAgICBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjogJGV2ZW50ID0+IChfY3R4LmNoZWNrYm94R3JvdXAzID0gJGV2ZW50KSxcbiAgICAgICAgc2l6ZTogXCJzbWFsbFwiXG4gICAgICB9LCB7XG4gICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAoX29wZW5CbG9jayh0cnVlKSwgX2NyZWF0ZUJsb2NrKF9GcmFnbWVudCwgbnVsbCwgX3JlbmRlckxpc3QoX2N0eC5jaXRpZXMsIChjaXR5KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9jb21wb25lbnRfZWxfY2hlY2tib3hfYnV0dG9uLCB7XG4gICAgICAgICAgICAgIGxhYmVsOiBjaXR5LFxuICAgICAgICAgICAgICBkaXNhYmxlZDogY2l0eSA9PT0gJ0JlaWppbmcnLFxuICAgICAgICAgICAgICBrZXk6IGNpdHlcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgIF9jcmVhdGVUZXh0Vk5vZGUoX3RvRGlzcGxheVN0cmluZyhjaXR5KSwgMSAvKiBURVhUICovKVxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgXzogMlxuICAgICAgICAgICAgfSwgMTAzMiAvKiBQUk9QUywgRFlOQU1JQ19TTE9UUyAqLywgW1wibGFiZWxcIiwgXCJkaXNhYmxlZFwiXSkpXG4gICAgICAgICAgfSksIDEyOCAvKiBLRVlFRF9GUkFHTUVOVCAqLykpXG4gICAgICAgIF0pLFxuICAgICAgICBfOiAxXG4gICAgICB9LCA4IC8qIFBST1BTICovLCBbXCJtb2RlbFZhbHVlXCIsIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiXSlcbiAgICBdKSxcbiAgICBfY3JlYXRlVk5vZGUoXCJkaXZcIiwgeyBzdHlsZToge1wibWFyZ2luLXRvcFwiOlwiMjBweFwifSB9LCBbXG4gICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF9jaGVja2JveF9ncm91cCwge1xuICAgICAgICBtb2RlbFZhbHVlOiBfY3R4LmNoZWNrYm94R3JvdXA0LFxuICAgICAgICBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjogJGV2ZW50ID0+IChfY3R4LmNoZWNrYm94R3JvdXA0ID0gJGV2ZW50KSxcbiAgICAgICAgc2l6ZTogXCJtaW5pXCIsXG4gICAgICAgIGRpc2FibGVkOiBcIlwiXG4gICAgICB9LCB7XG4gICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAoX29wZW5CbG9jayh0cnVlKSwgX2NyZWF0ZUJsb2NrKF9GcmFnbWVudCwgbnVsbCwgX3JlbmRlckxpc3QoX2N0eC5jaXRpZXMsIChjaXR5KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9jb21wb25lbnRfZWxfY2hlY2tib3hfYnV0dG9uLCB7XG4gICAgICAgICAgICAgIGxhYmVsOiBjaXR5LFxuICAgICAgICAgICAgICBrZXk6IGNpdHlcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgIF9jcmVhdGVUZXh0Vk5vZGUoX3RvRGlzcGxheVN0cmluZyhjaXR5KSwgMSAvKiBURVhUICovKVxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgXzogMlxuICAgICAgICAgICAgfSwgMTAzMiAvKiBQUk9QUywgRFlOQU1JQ19TTE9UUyAqLywgW1wibGFiZWxcIl0pKVxuICAgICAgICAgIH0pLCAxMjggLyogS0VZRURfRlJBR01FTlQgKi8pKVxuICAgICAgICBdKSxcbiAgICAgICAgXzogMVxuICAgICAgfSwgOCAvKiBQUk9QUyAqLywgW1wibW9kZWxWYWx1ZVwiLCBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIl0pXG4gICAgXSlcbiAgXSwgNjQgLyogU1RBQkxFX0ZSQUdNRU5UICovKSlcbn1cbiAgXG4gICAgY29uc3QgY2l0eU9wdGlvbnMgPSBbJ1NoYW5naGFpJywgJ0JlaWppbmcnLCAnR3Vhbmd6aG91JywgJ1NoZW56aGVuJ107XG5cbiAgY29uc3QgZGVtb2NvbXBvbmVudEV4cG9ydCA9IHtcbiAgICBkYXRhICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNoZWNrYm94R3JvdXAxOiBbJ1NoYW5naGFpJ10sXG4gICAgICAgIGNoZWNrYm94R3JvdXAyOiBbJ1NoYW5naGFpJ10sXG4gICAgICAgIGNoZWNrYm94R3JvdXAzOiBbJ1NoYW5naGFpJ10sXG4gICAgICAgIGNoZWNrYm94R3JvdXA0OiBbJ1NoYW5naGFpJ10sXG4gICAgICAgIGNpdGllczogY2l0eU9wdGlvbnNcbiAgICAgIH07XG4gICAgfVxuICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIG1vdW50ZWQoKXtcbiAgICAgICAgdGhpcy4kbmV4dFRpY2soKCk9PntcbiAgICAgICAgICBjb25zdCBibG9ja3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdwcmUgY29kZTpub3QoLmhsanMpJylcbiAgICAgICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGJsb2NrcywgaGxqcy5oaWdobGlnaHRCbG9jaylcbiAgICAgICAgfSlcbiAgICAgIH0sXG4gICAgICByZW5kZXIsXG4gICAgICAuLi5kZW1vY29tcG9uZW50RXhwb3J0XG4gICAgfVxuICB9KSgpLFwiZWxlbWVudC1kZW1vNlwiOiAoZnVuY3Rpb24oKSB7XG4gICAgXG4gICAgY29uc3QgeyByZXNvbHZlQ29tcG9uZW50OiBfcmVzb2x2ZUNvbXBvbmVudCwgY3JlYXRlVk5vZGU6IF9jcmVhdGVWTm9kZSwgd2l0aEN0eDogX3dpdGhDdHgsIEZyYWdtZW50OiBfRnJhZ21lbnQsIG9wZW5CbG9jazogX29wZW5CbG9jaywgY3JlYXRlQmxvY2s6IF9jcmVhdGVCbG9jayB9ID0gVnVlXG5cbmZ1bmN0aW9uIHJlbmRlciAoX2N0eCwgX2NhY2hlKSB7XG4gIGNvbnN0IF9jb21wb25lbnRfZWxfY2hlY2tib3ggPSBfcmVzb2x2ZUNvbXBvbmVudChcImVsLWNoZWNrYm94XCIpXG4gIGNvbnN0IF9jb21wb25lbnRfZWxfY2hlY2tib3hfZ3JvdXAgPSBfcmVzb2x2ZUNvbXBvbmVudChcImVsLWNoZWNrYm94LWdyb3VwXCIpXG5cbiAgcmV0dXJuIChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhfRnJhZ21lbnQsIG51bGwsIFtcbiAgICBfY3JlYXRlVk5vZGUoXCJkaXZcIiwgbnVsbCwgW1xuICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfY2hlY2tib3gsIHtcbiAgICAgICAgbW9kZWxWYWx1ZTogX2N0eC5jaGVja2VkMSxcbiAgICAgICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6ICRldmVudCA9PiAoX2N0eC5jaGVja2VkMSA9ICRldmVudCksXG4gICAgICAgIGxhYmVsOiBcIk9wY2nDs24xXCIsXG4gICAgICAgIGJvcmRlcjogXCJcIlxuICAgICAgfSwgbnVsbCwgOCAvKiBQUk9QUyAqLywgW1wibW9kZWxWYWx1ZVwiLCBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIl0pLFxuICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfY2hlY2tib3gsIHtcbiAgICAgICAgbW9kZWxWYWx1ZTogX2N0eC5jaGVja2VkMixcbiAgICAgICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6ICRldmVudCA9PiAoX2N0eC5jaGVja2VkMiA9ICRldmVudCksXG4gICAgICAgIGxhYmVsOiBcIk9wY2nDs24yXCIsXG4gICAgICAgIGJvcmRlcjogXCJcIlxuICAgICAgfSwgbnVsbCwgOCAvKiBQUk9QUyAqLywgW1wibW9kZWxWYWx1ZVwiLCBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIl0pXG4gICAgXSksXG4gICAgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHsgc3R5bGU6IHtcIm1hcmdpbi10b3BcIjpcIjIwcHhcIn0gfSwgW1xuICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfY2hlY2tib3gsIHtcbiAgICAgICAgbW9kZWxWYWx1ZTogX2N0eC5jaGVja2VkMyxcbiAgICAgICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6ICRldmVudCA9PiAoX2N0eC5jaGVja2VkMyA9ICRldmVudCksXG4gICAgICAgIGxhYmVsOiBcIk9wY2nDs24xXCIsXG4gICAgICAgIGJvcmRlcjogXCJcIixcbiAgICAgICAgc2l6ZTogXCJtZWRpdW1cIlxuICAgICAgfSwgbnVsbCwgOCAvKiBQUk9QUyAqLywgW1wibW9kZWxWYWx1ZVwiLCBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIl0pLFxuICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfY2hlY2tib3gsIHtcbiAgICAgICAgbW9kZWxWYWx1ZTogX2N0eC5jaGVja2VkNCxcbiAgICAgICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6ICRldmVudCA9PiAoX2N0eC5jaGVja2VkNCA9ICRldmVudCksXG4gICAgICAgIGxhYmVsOiBcIk9wY2nDs24yXCIsXG4gICAgICAgIGJvcmRlcjogXCJcIixcbiAgICAgICAgc2l6ZTogXCJtZWRpdW1cIlxuICAgICAgfSwgbnVsbCwgOCAvKiBQUk9QUyAqLywgW1wibW9kZWxWYWx1ZVwiLCBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIl0pXG4gICAgXSksXG4gICAgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHsgc3R5bGU6IHtcIm1hcmdpbi10b3BcIjpcIjIwcHhcIn0gfSwgW1xuICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfY2hlY2tib3hfZ3JvdXAsIHtcbiAgICAgICAgbW9kZWxWYWx1ZTogX2N0eC5jaGVja2JveEdyb3VwMSxcbiAgICAgICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6ICRldmVudCA9PiAoX2N0eC5jaGVja2JveEdyb3VwMSA9ICRldmVudCksXG4gICAgICAgIHNpemU6IFwic21hbGxcIlxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfY2hlY2tib3gsIHtcbiAgICAgICAgICAgIGxhYmVsOiBcIk9wY2nDs24xXCIsXG4gICAgICAgICAgICBib3JkZXI6IFwiXCJcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF9jaGVja2JveCwge1xuICAgICAgICAgICAgbGFiZWw6IFwiT3BjacOzbjJcIixcbiAgICAgICAgICAgIGJvcmRlcjogXCJcIixcbiAgICAgICAgICAgIGRpc2FibGVkOiBcIlwiXG4gICAgICAgICAgfSlcbiAgICAgICAgXSksXG4gICAgICAgIF86IDFcbiAgICAgIH0sIDggLyogUFJPUFMgKi8sIFtcIm1vZGVsVmFsdWVcIiwgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCJdKVxuICAgIF0pLFxuICAgIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7IHN0eWxlOiB7XCJtYXJnaW4tdG9wXCI6XCIyMHB4XCJ9IH0sIFtcbiAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2VsX2NoZWNrYm94X2dyb3VwLCB7XG4gICAgICAgIG1vZGVsVmFsdWU6IF9jdHguY2hlY2tib3hHcm91cDIsXG4gICAgICAgIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOiAkZXZlbnQgPT4gKF9jdHguY2hlY2tib3hHcm91cDIgPSAkZXZlbnQpLFxuICAgICAgICBzaXplOiBcIm1pbmlcIixcbiAgICAgICAgZGlzYWJsZWQ6IFwiXCJcbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2VsX2NoZWNrYm94LCB7XG4gICAgICAgICAgICBsYWJlbDogXCJPcGNpw7NuMVwiLFxuICAgICAgICAgICAgYm9yZGVyOiBcIlwiXG4gICAgICAgICAgfSksXG4gICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfY2hlY2tib3gsIHtcbiAgICAgICAgICAgIGxhYmVsOiBcIk9wY2nDs24yXCIsXG4gICAgICAgICAgICBib3JkZXI6IFwiXCJcbiAgICAgICAgICB9KVxuICAgICAgICBdKSxcbiAgICAgICAgXzogMVxuICAgICAgfSwgOCAvKiBQUk9QUyAqLywgW1wibW9kZWxWYWx1ZVwiLCBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIl0pXG4gICAgXSlcbiAgXSwgNjQgLyogU1RBQkxFX0ZSQUdNRU5UICovKSlcbn1cbiAgXG4gICAgY29uc3QgZGVtb2NvbXBvbmVudEV4cG9ydCA9IHtcbiAgICBkYXRhICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNoZWNrZWQxOiB0cnVlLFxuICAgICAgICBjaGVja2VkMjogZmFsc2UsXG4gICAgICAgIGNoZWNrZWQzOiBmYWxzZSxcbiAgICAgICAgY2hlY2tlZDQ6IHRydWUsXG4gICAgICAgIGNoZWNrYm94R3JvdXAxOiBbXSxcbiAgICAgICAgY2hlY2tib3hHcm91cDI6IFtdXG4gICAgICB9O1xuICAgIH1cbiAgfVxuICAgIHJldHVybiB7XG4gICAgICBtb3VudGVkKCl7XG4gICAgICAgIHRoaXMuJG5leHRUaWNrKCgpPT57XG4gICAgICAgICAgY29uc3QgYmxvY2tzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgncHJlIGNvZGU6bm90KC5obGpzKScpXG4gICAgICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChibG9ja3MsIGhsanMuaGlnaGxpZ2h0QmxvY2spXG4gICAgICAgIH0pXG4gICAgICB9LFxuICAgICAgcmVuZGVyLFxuICAgICAgLi4uZGVtb2NvbXBvbmVudEV4cG9ydFxuICAgIH1cbiAgfSkoKSxcbiAgICAgICAgfVxuICAgICAgfVxuICAgIDwvc2NyaXB0PlxuICAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/es/checkbox.md?vue&type=script&lang=js\n");

/***/ }),

/***/ "./node_modules/vue-loader/dist/templateLoader.js?!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/es/checkbox.md?vue&type=template&id=9fd2db76":
/*!****************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/dist/templateLoader.js??ref--5!./node_modules/vue-loader/dist??ref--3-0!./build/md-loader!./examples/docs/es/checkbox.md?vue&type=template&id=9fd2db76 ***!
  \****************************************************************************************************************************************************************************************/
/*! exports provided: render */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return render; });\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm-bundler.js\");\n\n\nconst _hoisted_1 = { class: \"content element-doc\" }\nconst _hoisted_2 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h2\", { id: \"checkbox\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#checkbox\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Checkbox\")\n], -1 /* HOISTED */)\nconst _hoisted_3 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Un grupo de opciones para manejar múltiples elecciones.\", -1 /* HOISTED */)\nconst _hoisted_4 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"uso-basico\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#uso-basico\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Uso básico\")\n], -1 /* HOISTED */)\nconst _hoisted_5 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Checkbox puede ser usado para alternar entre dos estados.\", -1 /* HOISTED */)\nconst _hoisted_6 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Define \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"v-model\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"(enlaza la variable) en \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"el-checkbox\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\". El valor por defecto es un \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"Boolean\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" para un \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"checkbox\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\", y se convierte en \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"true\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" cuando este es seleccionado. El contenido dentro del tag \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"el-checkbox\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" se convierte en la descripción al costado del botón del checkbox.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_7 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <!-- `checked` debe ser true o false -->\\n  <el-checkbox v-model=\\\"checked\\\">Opción</el-checkbox>\\n</template>\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        checked: true\\n      };\\n    }\\n  };\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_8 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"estado-deshabilitado\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#estado-deshabilitado\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Estado Deshabilitado\")\n], -1 /* HOISTED */)\nconst _hoisted_9 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Estado deshabilitado para el checkbox.\", -1 /* HOISTED */)\nconst _hoisted_10 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Setear el atributo \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"disabled\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\".\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_11 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-checkbox v-model=\\\"checked1\\\" disabled>Opción</el-checkbox>\\n  <el-checkbox v-model=\\\"checked2\\\" disabled>Opción</el-checkbox>\\n</template>\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        checked1: false,\\n        checked2: true\\n      };\\n    }\\n  };\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_12 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"grupo-de-checkboxes\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#grupo-de-checkboxes\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Grupo de Checkboxes\")\n], -1 /* HOISTED */)\nconst _hoisted_13 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Es usado por múltiples checkboxes los cuales están enlazados a un grupo, indica si una opción está seleccionada verificando si esta está marcada.\", -1 /* HOISTED */)\nconst _hoisted_14 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"El elemento \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"checkbox-group\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" puede manejar múltiples checkboxes en un grupo usando \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"v-model\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" el cuál está enlazado a un \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"Array\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\". Dentro del elemento \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"el-checkbox\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\", \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"label\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" es el valor del checkbox. Si en ese tag no hay contenido anidado, \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"label\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" va a ser mostrado como la descripción al lado del botón del checkbox. \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"label\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" también se corresponde con los valores del array. Es seleccionado si el valor especificado existe en el array y viceversa.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_15 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-checkbox-group v-model=\\\"checkList\\\">\\n    <el-checkbox label=\\\"Opción A\\\"></el-checkbox>\\n    <el-checkbox label=\\\"Opción B\\\"></el-checkbox>\\n    <el-checkbox label=\\\"Opción C\\\"></el-checkbox>\\n    <el-checkbox label=\\\"disabled\\\" disabled></el-checkbox>\\n    <el-checkbox label=\\\"Seleccionado y deshabilitado\\\" disabled></el-checkbox>\\n  </el-checkbox-group>\\n</template>\\n\\n<script>\\n  export default {\\n    data () {\\n      return {\\n        checkList: ['Seleccionado y deshabilitado','Opción A']\\n      };\\n    }\\n  };\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_16 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"indeterminado\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#indeterminado\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Indeterminado\")\n], -1 /* HOISTED */)\nconst _hoisted_17 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"La propiedad \"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"indeterminate\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" puede ser usada para generar el efecto de marcar todos (check all).\")\n], -1 /* HOISTED */)\nconst _hoisted_18 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-checkbox :indeterminate=\\\"isIndeterminate\\\" v-model=\\\"checkAll\\\" @change=\\\"handleCheckAllChange\\\">Marcar todos</el-checkbox>\\n  <div style=\\\"margin: 15px 0;\\\"></div>\\n  <el-checkbox-group v-model=\\\"checkedCities\\\" @change=\\\"handleCheckedCitiesChange\\\">\\n    <el-checkbox v-for=\\\"city in cities\\\" :label=\\\"city\\\" :key=\\\"city\\\">{{city}}</el-checkbox>\\n  </el-checkbox-group>\\n</template>\\n<script>\\n  const cityOptions = ['Shanghai', 'Beijing', 'Guangzhou', 'Shenzhen'];\\n  export default {\\n    data() {\\n      return {\\n        checkAll: false,\\n        checkedCities: ['Shanghai', 'Beijing'],\\n        cities: cityOptions,\\n        isIndeterminate: true\\n      };\\n    },\\n    methods: {\\n      handleCheckAllChange(val) {\\n        this.checkedCities = val ? cityOptions : [];\\n        this.isIndeterminate = false;\\n      },\\n      handleCheckedCitiesChange(value) {\\n        let checkedCount = value.length;\\n        this.checkAll = checkedCount === this.cities.length;\\n        this.isIndeterminate = checkedCount > 0 && checkedCount < this.cities.length;\\n      }\\n    }\\n  };\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_19 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"cantidad-minima-maxima-de-elementos-seleccionados\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#cantidad-minima-maxima-de-elementos-seleccionados\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Cantidad Mínima / Máxima de elementos seleccionados\")\n], -1 /* HOISTED */)\nconst _hoisted_20 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Las propiedades \"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"min\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" y \"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"max\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" pueden limitar la cantidad de elementos seleccionados.\")\n], -1 /* HOISTED */)\nconst _hoisted_21 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-checkbox-group \\n    v-model=\\\"checkedCities\\\"\\n    :min=\\\"1\\\"\\n    :max=\\\"2\\\">\\n    <el-checkbox v-for=\\\"city in cities\\\" :label=\\\"city\\\" :key=\\\"city\\\">{{city}}</el-checkbox>\\n  </el-checkbox-group>\\n</template>\\n<script>\\n  const cityOptions = ['Shanghai', 'Beijing', 'Guangzhou', 'Shenzhen'];\\n  export default {\\n    data() {\\n      return {\\n        checkedCities: ['Shanghai', 'Beijing'],\\n        cities: cityOptions\\n      };\\n    }\\n  };\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_22 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"estilo-tipo-boton\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#estilo-tipo-boton\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Estilo tipo Botón\")\n], -1 /* HOISTED */)\nconst _hoisted_23 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Checkbox con estilo tipo Botón.\", -1 /* HOISTED */)\nconst _hoisted_24 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Sólo debe cambiar el elemento \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"el-checkbox\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" por el elemento \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"el-checkbox-button\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\". También proveemos el atributo \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"size\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\".\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_25 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <div>\\n    <el-checkbox-group v-model=\\\"checkboxGroup1\\\">\\n      <el-checkbox-button v-for=\\\"city in cities\\\" :label=\\\"city\\\" :key=\\\"city\\\">{{city}}</el-checkbox-button>\\n    </el-checkbox-group>\\n  </div>\\n  <div style=\\\"margin-top: 20px\\\">\\n    <el-checkbox-group v-model=\\\"checkboxGroup2\\\" size=\\\"medium\\\">\\n      <el-checkbox-button v-for=\\\"city in cities\\\" :label=\\\"city\\\" :key=\\\"city\\\">{{city}}</el-checkbox-button>\\n    </el-checkbox-group>\\n  </div>\\n  <div style=\\\"margin-top: 20px\\\">\\n    <el-checkbox-group v-model=\\\"checkboxGroup3\\\" size=\\\"small\\\">\\n      <el-checkbox-button v-for=\\\"city in cities\\\" :label=\\\"city\\\" :disabled=\\\"city === 'Beijing'\\\" :key=\\\"city\\\">{{city}}</el-checkbox-button>\\n    </el-checkbox-group>\\n  </div>\\n  <div style=\\\"margin-top: 20px\\\">\\n    <el-checkbox-group v-model=\\\"checkboxGroup4\\\" size=\\\"mini\\\" disabled>\\n      <el-checkbox-button v-for=\\\"city in cities\\\" :label=\\\"city\\\" :key=\\\"city\\\">{{city}}</el-checkbox-button>\\n    </el-checkbox-group>\\n  </div>\\n</template>\\n<script>\\n  const cityOptions = ['Shanghai', 'Beijing', 'Guangzhou', 'Shenzhen'];\\n\\n  export default {\\n    data () {\\n      return {\\n        checkboxGroup1: ['Shanghai'],\\n        checkboxGroup2: ['Shanghai'],\\n        checkboxGroup3: ['Shanghai'],\\n        checkboxGroup4: ['Shanghai'],\\n        cities: cityOptions\\n      };\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_26 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"con-bordes\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#con-bordes\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Con bordes\")\n], -1 /* HOISTED */)\nconst _hoisted_27 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"El atributo \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"border\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" agrega un borde a los Checkboxes.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_28 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <div>\\n    <el-checkbox v-model=\\\"checked1\\\" label=\\\"Opción1\\\" border></el-checkbox>\\n    <el-checkbox v-model=\\\"checked2\\\" label=\\\"Opción2\\\" border></el-checkbox>\\n  </div>\\n  <div style=\\\"margin-top: 20px\\\">\\n    <el-checkbox v-model=\\\"checked3\\\" label=\\\"Opción1\\\" border size=\\\"medium\\\"></el-checkbox>\\n    <el-checkbox v-model=\\\"checked4\\\" label=\\\"Opción2\\\" border size=\\\"medium\\\"></el-checkbox>\\n  </div>\\n  <div style=\\\"margin-top: 20px\\\">\\n    <el-checkbox-group v-model=\\\"checkboxGroup1\\\" size=\\\"small\\\">\\n      <el-checkbox label=\\\"Opción1\\\" border></el-checkbox>\\n      <el-checkbox label=\\\"Opción2\\\" border disabled></el-checkbox>\\n    </el-checkbox-group>\\n  </div>\\n  <div style=\\\"margin-top: 20px\\\">\\n    <el-checkbox-group v-model=\\\"checkboxGroup2\\\" size=\\\"mini\\\" disabled>\\n      <el-checkbox label=\\\"Opción1\\\" border></el-checkbox>\\n      <el-checkbox label=\\\"Opción2\\\" border></el-checkbox>\\n    </el-checkbox-group>\\n  </div>\\n</template>\\n\\n<script>\\n  export default {\\n    data () {\\n      return {\\n        checked1: true,\\n        checked2: false,\\n        checked3: false,\\n        checked4: true,\\n        checkboxGroup1: [],\\n        checkboxGroup2: []\\n      };\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_29 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createStaticVNode\"])(\"<h3 id=\\\"atributos-de-checkbox\\\"><a class=\\\"header-anchor\\\" href=\\\"#atributos-de-checkbox\\\">¶</a> Atributos de Checkbox</h3><table><thead><tr><th>Atributo</th><th>Descripción</th><th>Tipo</th><th>Valores aceptados</th><th>Por defecto</th></tr></thead><tbody><tr><td>value / v-model</td><td>valor enlazado</td><td>string / number / boolean</td><td>—</td><td>—</td></tr><tr><td>label</td><td>valor del Checkbox si es usado dentro de un tag <code>checkbox-group</code></td><td>string / number / boolean</td><td>—</td><td>—</td></tr><tr><td>true-label</td><td>valor del Checkbox si está marcado</td><td>string / number</td><td>—</td><td>—</td></tr><tr><td>false-label</td><td>valor del Checkbox si no está marcado</td><td>string / number</td><td>—</td><td>—</td></tr><tr><td>disabled</td><td>especifica si el Checkbox está deshabilitado</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>border</td><td>especifica si agrega un borde alrededor del Checkbox</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>size</td><td>tamaño del Checkbox, sólo funciona si <code>border</code> es true</td><td>string</td><td>medium / small / mini</td><td>—</td></tr><tr><td>name</td><td>atributo <code>name</code> nativo</td><td>string</td><td>—</td><td>—</td></tr><tr><td>checked</td><td>especifica si el Checkbox está marcado</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>indeterminate</td><td>similar a <code>indeterminate</code> en el checkbox nativo</td><td>boolean</td><td>—</td><td>false</td></tr></tbody></table><h3 id=\\\"eventos-de-checkbox\\\"><a class=\\\"header-anchor\\\" href=\\\"#eventos-de-checkbox\\\">¶</a> Eventos de Checkbox</h3><table><thead><tr><th>Nombre</th><th>Descripción</th><th>Parametros</th></tr></thead><tbody><tr><td>change</td><td>se ejecuta cuando el valor enlazado cambia</td><td>el valor actualizado</td></tr></tbody></table><h3 id=\\\"atributos-de-checkbox-group\\\"><a class=\\\"header-anchor\\\" href=\\\"#atributos-de-checkbox-group\\\">¶</a> Atributos de Checkbox-group</h3><table><thead><tr><th>Atributo</th><th>Descripción</th><th>Tipo</th><th>Valores aceptados</th><th>Por Defecto</th></tr></thead><tbody><tr><td>value / v-model</td><td>valor enlazado</td><td>array</td><td>—</td><td>—</td></tr><tr><td>size</td><td>tamaño de los checkboxes de tipo botón o los checkboxes con border</td><td>string</td><td>medium / small / mini</td><td>—</td></tr><tr><td>disabled</td><td>especifica si los checkboxes anidados están deshabilitados</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>min</td><td>cantidad mínima de checkboxes que deben ser marcados</td><td>number</td><td>—</td><td>—</td></tr><tr><td>max</td><td>cantidad máxima de checkboxes que pueden ser marcados</td><td>number</td><td>—</td><td>—</td></tr><tr><td>text-color</td><td>color de fuente cuando el botón está activo</td><td>string</td><td>—</td><td>#ffffff</td></tr><tr><td>fill</td><td>color de border y de fondo cuando el botón está activo</td><td>string</td><td>—</td><td>#409EFF</td></tr></tbody></table><h3 id=\\\"eventos-de-checkbox-group\\\"><a class=\\\"header-anchor\\\" href=\\\"#eventos-de-checkbox-group\\\">¶</a> Eventos de Checkbox-group</h3><table><thead><tr><th>Nombre de Evento</th><th>Descripción</th><th>Parametros</th></tr></thead><tbody><tr><td>change</td><td>se ejecuta cuando el valor enlazado cambia</td><td>el valor actualizado</td></tr></tbody></table><h3 id=\\\"atributos-de-checkbox-button\\\"><a class=\\\"header-anchor\\\" href=\\\"#atributos-de-checkbox-button\\\">¶</a> Atributos de Checkbox-button</h3><table><thead><tr><th>Atributo</th><th>Descripción</th><th>Tipo</th><th>Valores aceptados</th><th>Por defecto</th></tr></thead><tbody><tr><td>label</td><td>valor del checkbox cuando es usado dentro de un <code>checkbox-group</code></td><td>string / number / boolean</td><td>—</td><td>—</td></tr><tr><td>true-label</td><td>valor del checkbox si este está marcado</td><td>string / number</td><td>—</td><td>—</td></tr><tr><td>false-label</td><td>valor del checkbox si este no está marcado</td><td>string / number</td><td>—</td><td>—</td></tr><tr><td>disabled</td><td>especifica si el checkbox está deshabilitado</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>name</td><td>atributo &#39;name&#39; del checbox nativo</td><td>string</td><td>—</td><td>—</td></tr><tr><td>checked</td><td>si el checkbox está marcado</td><td>boolean</td><td>—</td><td>false</td></tr></tbody></table>\", 10)\n\nfunction render(_ctx, _cache) {\n  const _component_element_demo0 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo0\")\n  const _component_demo_block = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"demo-block\")\n  const _component_element_demo1 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo1\")\n  const _component_element_demo2 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo2\")\n  const _component_element_demo3 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo3\")\n  const _component_element_demo4 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo4\")\n  const _component_element_demo5 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo5\")\n  const _component_element_demo6 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo6\")\n\n  return (Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"openBlock\"])(), Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createBlock\"])(\"section\", _hoisted_1, [\n    _hoisted_2,\n    _hoisted_3,\n    _hoisted_4,\n    _hoisted_5,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo0)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_7\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_6\n      ]),\n      _: 1\n    }),\n    _hoisted_8,\n    _hoisted_9,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo1)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_11\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_10\n      ]),\n      _: 1\n    }),\n    _hoisted_12,\n    _hoisted_13,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo2)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_15\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_14\n      ]),\n      _: 1\n    }),\n    _hoisted_16,\n    _hoisted_17,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo3)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_18\n      ]),\n      _: 1\n    }),\n    _hoisted_19,\n    _hoisted_20,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo4)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_21\n      ]),\n      _: 1\n    }),\n    _hoisted_22,\n    _hoisted_23,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo5)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_25\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_24\n      ]),\n      _: 1\n    }),\n    _hoisted_26,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo6)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_28\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_27\n      ]),\n      _: 1\n    }),\n    _hoisted_29\n  ]))\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vue-loader/dist/templateLoader.js?!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/es/checkbox.md?vue&type=template&id=9fd2db76\n");

/***/ })

}]);