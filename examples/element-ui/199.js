(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[199],{

/***/ "./examples/docs/fr-FR/select.md":
/*!***************************************!*\
  !*** ./examples/docs/fr-FR/select.md ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _select_md_vue_type_template_id_e159e8ba__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./select.md?vue&type=template&id=e159e8ba */ \"./examples/docs/fr-FR/select.md?vue&type=template&id=e159e8ba\");\n/* harmony import */ var _select_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./select.md?vue&type=script&lang=js */ \"./examples/docs/fr-FR/select.md?vue&type=script&lang=js\");\n/* empty/unused harmony star reexport */\n\n\n_select_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].render = _select_md_vue_type_template_id_e159e8ba__WEBPACK_IMPORTED_MODULE_0__[\"render\"]\n/* hot reload */\nif (true) {\n  _select_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].__hmrId = \"e159e8ba\"\n  const api = __VUE_HMR_RUNTIME__\n  module.hot.accept()\n  if (!api.createRecord('e159e8ba', _select_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])) {\n    api.reload('e159e8ba', _select_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])\n  }\n  \n  module.hot.accept(/*! ./select.md?vue&type=template&id=e159e8ba */ \"./examples/docs/fr-FR/select.md?vue&type=template&id=e159e8ba\", function(__WEBPACK_OUTDATED_DEPENDENCIES__) { /* harmony import */ _select_md_vue_type_template_id_e159e8ba__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./select.md?vue&type=template&id=e159e8ba */ \"./examples/docs/fr-FR/select.md?vue&type=template&id=e159e8ba\");\n(() => {\n    api.rerender('e159e8ba', _select_md_vue_type_template_id_e159e8ba__WEBPACK_IMPORTED_MODULE_0__[\"render\"])\n  })(__WEBPACK_OUTDATED_DEPENDENCIES__); }.bind(this))\n\n}\n\n_select_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].__file = \"examples/docs/fr-FR/select.md\"\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (_select_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9leGFtcGxlcy9kb2NzL2ZyLUZSL3NlbGVjdC5tZD9hM2NiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBLHdDQUFrRTtBQUNWO0FBQ0w7QUFDbkQsMEVBQU0sVUFBVSwrRUFBTTtBQUN0QjtBQUNBLElBQUksSUFBVTtBQUNkLEVBQUUsMEVBQU07QUFDUjtBQUNBO0FBQ0Esb0NBQW9DLDBFQUFNO0FBQzFDLDJCQUEyQiwwRUFBTTtBQUNqQzs7QUFFQSxvQkFBb0IsZ0hBQTJDLEVBQUU7QUFBQTtBQUNqRSw2QkFBNkIsK0VBQU07QUFDbkMsR0FBRzs7QUFFSDs7QUFFQSwwRUFBTTs7QUFFUyx5SSIsImZpbGUiOiIuL2V4YW1wbGVzL2RvY3MvZnItRlIvc2VsZWN0Lm1kLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSBcIi4vc2VsZWN0Lm1kP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWUxNTllOGJhXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vc2VsZWN0Lm1kP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcbmV4cG9ydCAqIGZyb20gXCIuL3NlbGVjdC5tZD92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5zY3JpcHQucmVuZGVyID0gcmVuZGVyXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICBzY3JpcHQuX19obXJJZCA9IFwiZTE1OWU4YmFcIlxuICBjb25zdCBhcGkgPSBfX1ZVRV9ITVJfUlVOVElNRV9fXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFhcGkuY3JlYXRlUmVjb3JkKCdlMTU5ZThiYScsIHNjcmlwdCkpIHtcbiAgICBhcGkucmVsb2FkKCdlMTU5ZThiYScsIHNjcmlwdClcbiAgfVxuICBcbiAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL3NlbGVjdC5tZD92dWUmdHlwZT10ZW1wbGF0ZSZpZD1lMTU5ZThiYVwiLCAoKSA9PiB7XG4gICAgYXBpLnJlcmVuZGVyKCdlMTU5ZThiYScsIHJlbmRlcilcbiAgfSlcblxufVxuXG5zY3JpcHQuX19maWxlID0gXCJleGFtcGxlcy9kb2NzL2ZyLUZSL3NlbGVjdC5tZFwiXG5cbmV4cG9ydCBkZWZhdWx0IHNjcmlwdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./examples/docs/fr-FR/select.md\n");

/***/ }),

/***/ "./examples/docs/fr-FR/select.md?vue&type=script&lang=js":
/*!***************************************************************!*\
  !*** ./examples/docs/fr-FR/select.md?vue&type=script&lang=js ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_dist_index_js_ref_3_0_build_md_loader_index_js_select_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib!../../../node_modules/vue-loader/dist??ref--3-0!../../../build/md-loader!./select.md?vue&type=script&lang=js */ \"./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/fr-FR/select.md?vue&type=script&lang=js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_dist_index_js_ref_3_0_build_md_loader_index_js_select_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; });\n\n/* empty/unused harmony star reexport */ \n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9leGFtcGxlcy9kb2NzL2ZyLUZSL3NlbGVjdC5tZD9jZGFjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsd0NBQTJNIiwiZmlsZSI6Ii4vZXhhbXBsZXMvZG9jcy9mci1GUi9zZWxlY3QubWQ/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9pbmRleC5qcz8/cmVmLS0zLTAhLi4vLi4vLi4vYnVpbGQvbWQtbG9hZGVyL2luZGV4LmpzIS4vc2VsZWN0Lm1kP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCI7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3JlZi0tMy0wIS4uLy4uLy4uL2J1aWxkL21kLWxvYWRlci9pbmRleC5qcyEuL3NlbGVjdC5tZD92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./examples/docs/fr-FR/select.md?vue&type=script&lang=js\n");

/***/ }),

/***/ "./examples/docs/fr-FR/select.md?vue&type=template&id=e159e8ba":
/*!*********************************************************************!*\
  !*** ./examples/docs/fr-FR/select.md?vue&type=template&id=e159e8ba ***!
  \*********************************************************************/
/*! exports provided: render */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_vue_loader_dist_templateLoader_js_ref_5_node_modules_vue_loader_dist_index_js_ref_3_0_build_md_loader_index_js_select_md_vue_type_template_id_e159e8ba__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/vue-loader/dist/templateLoader.js??ref--5!../../../node_modules/vue-loader/dist??ref--3-0!../../../build/md-loader!./select.md?vue&type=template&id=e159e8ba */ \"./node_modules/vue-loader/dist/templateLoader.js?!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/fr-FR/select.md?vue&type=template&id=e159e8ba\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return _node_modules_vue_loader_dist_templateLoader_js_ref_5_node_modules_vue_loader_dist_index_js_ref_3_0_build_md_loader_index_js_select_md_vue_type_template_id_e159e8ba__WEBPACK_IMPORTED_MODULE_0__[\"render\"]; });\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9leGFtcGxlcy9kb2NzL2ZyLUZSL3NlbGVjdC5tZD82NGIwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBIiwiZmlsZSI6Ii4vZXhhbXBsZXMvZG9jcy9mci1GUi9zZWxlY3QubWQ/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9ZTE1OWU4YmEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L3RlbXBsYXRlTG9hZGVyLmpzPz9yZWYtLTUhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9pbmRleC5qcz8/cmVmLS0zLTAhLi4vLi4vLi4vYnVpbGQvbWQtbG9hZGVyL2luZGV4LmpzIS4vc2VsZWN0Lm1kP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWUxNTllOGJhXCIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./examples/docs/fr-FR/select.md?vue&type=template&id=e159e8ba\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/fr-FR/select.md?vue&type=script&lang=js":
/*!**********************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/vue-loader/dist??ref--3-0!./build/md-loader!./examples/docs/fr-FR/select.md?vue&type=script&lang=js ***!
  \**********************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var highlight_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! highlight.js */ \"./node_modules/highlight.js/lib/index.js\");\n/* harmony import */ var highlight_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(highlight_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm-bundler.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'component-doc',\n  components: {\n    \"element-demo0\": function () {\n      const {\n        renderList: _renderList,\n        Fragment: _Fragment,\n        openBlock: _openBlock,\n        createBlock: _createBlock,\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_option = _resolveComponent(\"el-option\");\n\n        const _component_el_select = _resolveComponent(\"el-select\");\n\n        return _openBlock(), _createBlock(_component_el_select, {\n          modelValue: _ctx.value,\n          \"onUpdate:modelValue\": $event => _ctx.value = $event,\n          placeholder: \"Select\"\n        }, {\n          default: _withCtx(() => [(_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.options, item => {\n            return _openBlock(), _createBlock(_component_el_option, {\n              key: item.value,\n              label: item.label,\n              value: item.value\n            }, null, 8\n            /* PROPS */\n            , [\"label\", \"value\"]);\n          }), 128\n          /* KEYED_FRAGMENT */\n          ))]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            options: [{\n              value: 'Option1',\n              label: 'Option1'\n            }, {\n              value: 'Option2',\n              label: 'Option2'\n            }, {\n              value: 'Option3',\n              label: 'Option3'\n            }, {\n              value: 'Option4',\n              label: 'Option4'\n            }, {\n              value: 'Option5',\n              label: 'Option5'\n            }],\n            value: ''\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo1\": function () {\n      const {\n        renderList: _renderList,\n        Fragment: _Fragment,\n        openBlock: _openBlock,\n        createBlock: _createBlock,\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_option = _resolveComponent(\"el-option\");\n\n        const _component_el_select = _resolveComponent(\"el-select\");\n\n        return _openBlock(), _createBlock(_component_el_select, {\n          modelValue: _ctx.value,\n          \"onUpdate:modelValue\": $event => _ctx.value = $event,\n          placeholder: \"Select\"\n        }, {\n          default: _withCtx(() => [(_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.options, item => {\n            return _openBlock(), _createBlock(_component_el_option, {\n              key: item.value,\n              label: item.label,\n              value: item.value,\n              disabled: item.disabled\n            }, null, 8\n            /* PROPS */\n            , [\"label\", \"value\", \"disabled\"]);\n          }), 128\n          /* KEYED_FRAGMENT */\n          ))]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            options: [{\n              value: 'Option1',\n              label: 'Option1'\n            }, {\n              value: 'Option2',\n              label: 'Option2',\n              disabled: true\n            }, {\n              value: 'Option3',\n              label: 'Option3'\n            }, {\n              value: 'Option4',\n              label: 'Option4'\n            }, {\n              value: 'Option5',\n              label: 'Option5'\n            }],\n            value: ''\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo2\": function () {\n      const {\n        renderList: _renderList,\n        Fragment: _Fragment,\n        openBlock: _openBlock,\n        createBlock: _createBlock,\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_option = _resolveComponent(\"el-option\");\n\n        const _component_el_select = _resolveComponent(\"el-select\");\n\n        return _openBlock(), _createBlock(_component_el_select, {\n          modelValue: _ctx.value,\n          \"onUpdate:modelValue\": $event => _ctx.value = $event,\n          disabled: \"\",\n          placeholder: \"Select\"\n        }, {\n          default: _withCtx(() => [(_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.options, item => {\n            return _openBlock(), _createBlock(_component_el_option, {\n              key: item.value,\n              label: item.label,\n              value: item.value\n            }, null, 8\n            /* PROPS */\n            , [\"label\", \"value\"]);\n          }), 128\n          /* KEYED_FRAGMENT */\n          ))]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            options: [{\n              value: 'Option1',\n              label: 'Option1'\n            }, {\n              value: 'Option2',\n              label: 'Option2'\n            }, {\n              value: 'Option3',\n              label: 'Option3'\n            }, {\n              value: 'Option4',\n              label: 'Option4'\n            }, {\n              value: 'Option5',\n              label: 'Option5'\n            }],\n            value: ''\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo3\": function () {\n      const {\n        renderList: _renderList,\n        Fragment: _Fragment,\n        openBlock: _openBlock,\n        createBlock: _createBlock,\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_option = _resolveComponent(\"el-option\");\n\n        const _component_el_select = _resolveComponent(\"el-select\");\n\n        return _openBlock(), _createBlock(_component_el_select, {\n          modelValue: _ctx.value,\n          \"onUpdate:modelValue\": $event => _ctx.value = $event,\n          clearable: \"\",\n          placeholder: \"Select\"\n        }, {\n          default: _withCtx(() => [(_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.options, item => {\n            return _openBlock(), _createBlock(_component_el_option, {\n              key: item.value,\n              label: item.label,\n              value: item.value\n            }, null, 8\n            /* PROPS */\n            , [\"label\", \"value\"]);\n          }), 128\n          /* KEYED_FRAGMENT */\n          ))]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            options: [{\n              value: 'Option1',\n              label: 'Option1'\n            }, {\n              value: 'Option2',\n              label: 'Option2'\n            }, {\n              value: 'Option3',\n              label: 'Option3'\n            }, {\n              value: 'Option4',\n              label: 'Option4'\n            }, {\n              value: 'Option5',\n              label: 'Option5'\n            }],\n            value: ''\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo4\": function () {\n      const {\n        renderList: _renderList,\n        Fragment: _Fragment,\n        openBlock: _openBlock,\n        createBlock: _createBlock,\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_option = _resolveComponent(\"el-option\");\n\n        const _component_el_select = _resolveComponent(\"el-select\");\n\n        return _openBlock(), _createBlock(_Fragment, null, [_createVNode(_component_el_select, {\n          modelValue: _ctx.value1,\n          \"onUpdate:modelValue\": $event => _ctx.value1 = $event,\n          multiple: \"\",\n          placeholder: \"Select\"\n        }, {\n          default: _withCtx(() => [(_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.options, item => {\n            return _openBlock(), _createBlock(_component_el_option, {\n              key: item.value,\n              label: item.label,\n              value: item.value\n            }, null, 8\n            /* PROPS */\n            , [\"label\", \"value\"]);\n          }), 128\n          /* KEYED_FRAGMENT */\n          ))]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"]), _createVNode(_component_el_select, {\n          modelValue: _ctx.value2,\n          \"onUpdate:modelValue\": $event => _ctx.value2 = $event,\n          multiple: \"\",\n          \"collapse-tags\": \"\",\n          style: {\n            \"margin-left\": \"20px\"\n          },\n          placeholder: \"Select\"\n        }, {\n          default: _withCtx(() => [(_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.options, item => {\n            return _openBlock(), _createBlock(_component_el_option, {\n              key: item.value,\n              label: item.label,\n              value: item.value\n            }, null, 8\n            /* PROPS */\n            , [\"label\", \"value\"]);\n          }), 128\n          /* KEYED_FRAGMENT */\n          ))]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"])], 64\n        /* STABLE_FRAGMENT */\n        );\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            options: [{\n              value: 'Option1',\n              label: 'Option1'\n            }, {\n              value: 'Option2',\n              label: 'Option2'\n            }, {\n              value: 'Option3',\n              label: 'Option3'\n            }, {\n              value: 'Option4',\n              label: 'Option4'\n            }, {\n              value: 'Option5',\n              label: 'Option5'\n            }],\n            value1: [],\n            value2: []\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo5\": function () {\n      const {\n        renderList: _renderList,\n        Fragment: _Fragment,\n        openBlock: _openBlock,\n        createBlock: _createBlock,\n        toDisplayString: _toDisplayString,\n        createVNode: _createVNode,\n        resolveComponent: _resolveComponent,\n        withCtx: _withCtx\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_option = _resolveComponent(\"el-option\");\n\n        const _component_el_select = _resolveComponent(\"el-select\");\n\n        return _openBlock(), _createBlock(_component_el_select, {\n          modelValue: _ctx.value,\n          \"onUpdate:modelValue\": $event => _ctx.value = $event,\n          placeholder: \"Select\"\n        }, {\n          default: _withCtx(() => [(_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.cities, item => {\n            return _openBlock(), _createBlock(_component_el_option, {\n              key: item.value,\n              label: item.label,\n              value: item.value\n            }, {\n              default: _withCtx(() => [_createVNode(\"span\", {\n                style: {\n                  \"float\": \"left\"\n                }\n              }, _toDisplayString(item.label), 1\n              /* TEXT */\n              ), _createVNode(\"span\", {\n                style: {\n                  \"float\": \"right\",\n                  \"color\": \"#8492a6\",\n                  \"font-size\": \"13px\"\n                }\n              }, _toDisplayString(item.value), 1\n              /* TEXT */\n              )]),\n              _: 2\n            }, 1032\n            /* PROPS, DYNAMIC_SLOTS */\n            , [\"label\", \"value\"]);\n          }), 128\n          /* KEYED_FRAGMENT */\n          ))]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            cities: [{\n              value: 'Beijing',\n              label: 'Beijing'\n            }, {\n              value: 'Shanghai',\n              label: 'Shanghai'\n            }, {\n              value: 'Nanjing',\n              label: 'Nanjing'\n            }, {\n              value: 'Chengdu',\n              label: 'Chengdu'\n            }, {\n              value: 'Shenzhen',\n              label: 'Shenzhen'\n            }, {\n              value: 'Guangzhou',\n              label: 'Guangzhou'\n            }],\n            value: ''\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo6\": function () {\n      const {\n        renderList: _renderList,\n        Fragment: _Fragment,\n        openBlock: _openBlock,\n        createBlock: _createBlock,\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_option = _resolveComponent(\"el-option\");\n\n        const _component_el_option_group = _resolveComponent(\"el-option-group\");\n\n        const _component_el_select = _resolveComponent(\"el-select\");\n\n        return _openBlock(), _createBlock(_component_el_select, {\n          modelValue: _ctx.value,\n          \"onUpdate:modelValue\": $event => _ctx.value = $event,\n          placeholder: \"Select\"\n        }, {\n          default: _withCtx(() => [(_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.options, group => {\n            return _openBlock(), _createBlock(_component_el_option_group, {\n              key: group.label,\n              label: group.label\n            }, {\n              default: _withCtx(() => [(_openBlock(true), _createBlock(_Fragment, null, _renderList(group.options, item => {\n                return _openBlock(), _createBlock(_component_el_option, {\n                  key: item.value,\n                  label: item.label,\n                  value: item.value\n                }, null, 8\n                /* PROPS */\n                , [\"label\", \"value\"]);\n              }), 128\n              /* KEYED_FRAGMENT */\n              ))]),\n              _: 2\n            }, 1032\n            /* PROPS, DYNAMIC_SLOTS */\n            , [\"label\"]);\n          }), 128\n          /* KEYED_FRAGMENT */\n          ))]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            options: [{\n              label: 'Villes célèbres',\n              options: [{\n                value: 'Shanghai',\n                label: 'Shanghai'\n              }, {\n                value: 'Beijing',\n                label: 'Beijing'\n              }]\n            }, {\n              label: 'Nom de ville',\n              options: [{\n                value: 'Chengdu',\n                label: 'Chengdu'\n              }, {\n                value: 'Shenzhen',\n                label: 'Shenzhen'\n              }, {\n                value: 'Guangzhou',\n                label: 'Guangzhou'\n              }, {\n                value: 'Dalian',\n                label: 'Dalian'\n              }]\n            }],\n            value: ''\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo7\": function () {\n      const {\n        renderList: _renderList,\n        Fragment: _Fragment,\n        openBlock: _openBlock,\n        createBlock: _createBlock,\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_option = _resolveComponent(\"el-option\");\n\n        const _component_el_select = _resolveComponent(\"el-select\");\n\n        return _openBlock(), _createBlock(_component_el_select, {\n          modelValue: _ctx.value,\n          \"onUpdate:modelValue\": $event => _ctx.value = $event,\n          filterable: \"\",\n          placeholder: \"Select\"\n        }, {\n          default: _withCtx(() => [(_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.options, item => {\n            return _openBlock(), _createBlock(_component_el_option, {\n              key: item.value,\n              label: item.label,\n              value: item.value\n            }, null, 8\n            /* PROPS */\n            , [\"label\", \"value\"]);\n          }), 128\n          /* KEYED_FRAGMENT */\n          ))]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            options: [{\n              value: 'Option1',\n              label: 'Option1'\n            }, {\n              value: 'Option2',\n              label: 'Option2'\n            }, {\n              value: 'Option3',\n              label: 'Option3'\n            }, {\n              value: 'Option4',\n              label: 'Option4'\n            }, {\n              value: 'Option5',\n              label: 'Option5'\n            }],\n            value: ''\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo8\": function () {\n      const {\n        renderList: _renderList,\n        Fragment: _Fragment,\n        openBlock: _openBlock,\n        createBlock: _createBlock,\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_option = _resolveComponent(\"el-option\");\n\n        const _component_el_select = _resolveComponent(\"el-select\");\n\n        return _openBlock(), _createBlock(_component_el_select, {\n          modelValue: _ctx.value,\n          \"onUpdate:modelValue\": $event => _ctx.value = $event,\n          multiple: \"\",\n          filterable: \"\",\n          remote: \"\",\n          \"reserve-keyword\": \"\",\n          placeholder: \"Entrez un mot-clé\",\n          \"remote-method\": _ctx.remoteMethod,\n          loading: _ctx.loading\n        }, {\n          default: _withCtx(() => [(_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.options, item => {\n            return _openBlock(), _createBlock(_component_el_option, {\n              key: item.value,\n              label: item.label,\n              value: item.value\n            }, null, 8\n            /* PROPS */\n            , [\"label\", \"value\"]);\n          }), 128\n          /* KEYED_FRAGMENT */\n          ))]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\", \"remote-method\", \"loading\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            options: [],\n            value: [],\n            list: [],\n            loading: false,\n            states: [\"Alabama\", \"Alaska\", \"Arizona\", \"Arkansas\", \"California\", \"Colorado\", \"Connecticut\", \"Delaware\", \"Florida\", \"Georgia\", \"Hawaii\", \"Idaho\", \"Illinois\", \"Indiana\", \"Iowa\", \"Kansas\", \"Kentucky\", \"Louisiana\", \"Maine\", \"Maryland\", \"Massachusetts\", \"Michigan\", \"Minnesota\", \"Mississippi\", \"Missouri\", \"Montana\", \"Nebraska\", \"Nevada\", \"New Hampshire\", \"New Jersey\", \"New Mexico\", \"New York\", \"North Carolina\", \"North Dakota\", \"Ohio\", \"Oklahoma\", \"Oregon\", \"Pennsylvania\", \"Rhode Island\", \"South Carolina\", \"South Dakota\", \"Tennessee\", \"Texas\", \"Utah\", \"Vermont\", \"Virginia\", \"Washington\", \"West Virginia\", \"Wisconsin\", \"Wyoming\"]\n          };\n        },\n\n        mounted() {\n          this.list = this.states.map(item => {\n            return {\n              value: `value:${item}`,\n              label: `label:${item}`\n            };\n          });\n        },\n\n        methods: {\n          remoteMethod(query) {\n            if (query !== '') {\n              this.loading = true;\n              setTimeout(() => {\n                this.loading = false;\n                this.options = this.list.filter(item => {\n                  return item.label.toLowerCase().indexOf(query.toLowerCase()) > -1;\n                });\n              }, 200);\n            } else {\n              this.options = [];\n            }\n          }\n\n        }\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo9\": function () {\n      const {\n        renderList: _renderList,\n        Fragment: _Fragment,\n        openBlock: _openBlock,\n        createBlock: _createBlock,\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_option = _resolveComponent(\"el-option\");\n\n        const _component_el_select = _resolveComponent(\"el-select\");\n\n        return _openBlock(), _createBlock(_component_el_select, {\n          modelValue: _ctx.value,\n          \"onUpdate:modelValue\": $event => _ctx.value = $event,\n          multiple: \"\",\n          filterable: \"\",\n          \"allow-create\": \"\",\n          \"default-first-option\": \"\",\n          placeholder: \"Choisissez les tags de vos articles\"\n        }, {\n          default: _withCtx(() => [(_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.options, item => {\n            return _openBlock(), _createBlock(_component_el_option, {\n              key: item.value,\n              label: item.label,\n              value: item.value\n            }, null, 8\n            /* PROPS */\n            , [\"label\", \"value\"]);\n          }), 128\n          /* KEYED_FRAGMENT */\n          ))]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            options: [{\n              value: 'HTML',\n              label: 'HTML'\n            }, {\n              value: 'CSS',\n              label: 'CSS'\n            }, {\n              value: 'JavaScript',\n              label: 'JavaScript'\n            }],\n            value: []\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }()\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/fr-FR/select.md?vue&type=script&lang=js\n");

/***/ }),

/***/ "./node_modules/vue-loader/dist/templateLoader.js?!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/fr-FR/select.md?vue&type=template&id=e159e8ba":
/*!*****************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/dist/templateLoader.js??ref--5!./node_modules/vue-loader/dist??ref--3-0!./build/md-loader!./examples/docs/fr-FR/select.md?vue&type=template&id=e159e8ba ***!
  \*****************************************************************************************************************************************************************************************/
/*! exports provided: render */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return render; });\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm-bundler.js\");\n\n\nconst _hoisted_1 = { class: \"content element-doc\" }\nconst _hoisted_2 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h2\", { id: \"select\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#select\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Select\")\n], -1 /* HOISTED */)\nconst _hoisted_3 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Utile lorsqu'il faut sélectionner des options parmi un large choix, affiché grâce à un menu déroulant.\", -1 /* HOISTED */)\nconst _hoisted_4 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"usage\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#usage\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Usage\")\n], -1 /* HOISTED */)\nconst _hoisted_5 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"v-model\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" est la valeur du \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"el-option\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" sélectionné.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_6 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-select v-model=\\\"value\\\" placeholder=\\\"Select\\\">\\n    <el-option\\n      v-for=\\\"item in options\\\"\\n      :key=\\\"item.value\\\"\\n      :label=\\\"item.label\\\"\\n      :value=\\\"item.value\\\">\\n    </el-option>\\n  </el-select>\\n</template>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        options: [{\\n          value: 'Option1',\\n          label: 'Option1'\\n        }, {\\n          value: 'Option2',\\n          label: 'Option2'\\n        }, {\\n          value: 'Option3',\\n          label: 'Option3'\\n        }, {\\n          value: 'Option4',\\n          label: 'Option4'\\n        }, {\\n          value: 'Option5',\\n          label: 'Option5'\\n        }],\\n        value: ''\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_7 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"option-desactivee\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#option-desactivee\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Option désactivée\")\n], -1 /* HOISTED */)\nconst _hoisted_8 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Mettez l'attribut \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"disabled\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" dans \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"el-option\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" à \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"true\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" pour désactiver cette option.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_9 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-select v-model=\\\"value\\\" placeholder=\\\"Select\\\">\\n    <el-option\\n      v-for=\\\"item in options\\\"\\n      :key=\\\"item.value\\\"\\n      :label=\\\"item.label\\\"\\n      :value=\\\"item.value\\\"\\n      :disabled=\\\"item.disabled\\\">\\n    </el-option>\\n  </el-select>\\n</template>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        options: [{\\n          value: 'Option1',\\n          label: 'Option1'\\n        }, {\\n          value: 'Option2',\\n          label: 'Option2',\\n          disabled: true\\n        }, {\\n          value: 'Option3',\\n          label: 'Option3'\\n        }, {\\n          value: 'Option4',\\n          label: 'Option4'\\n        }, {\\n          value: 'Option5',\\n          label: 'Option5'\\n        }],\\n        value: ''\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_10 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"selecteur-desactive\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#selecteur-desactive\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Sélecteur désactivé\")\n], -1 /* HOISTED */)\nconst _hoisted_11 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Vous pouvez désactiver le composant lui-même.\", -1 /* HOISTED */)\nconst _hoisted_12 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Ajoutez \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"disabled\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" à \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"el-select\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" pour le désactiver.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_13 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-select v-model=\\\"value\\\" disabled placeholder=\\\"Select\\\">\\n    <el-option\\n      v-for=\\\"item in options\\\"\\n      :key=\\\"item.value\\\"\\n      :label=\\\"item.label\\\"\\n      :value=\\\"item.value\\\">\\n    </el-option>\\n  </el-select>\\n</template>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        options: [{\\n          value: 'Option1',\\n          label: 'Option1'\\n        }, {\\n          value: 'Option2',\\n          label: 'Option2'\\n        }, {\\n          value: 'Option3',\\n          label: 'Option3'\\n        }, {\\n          value: 'Option4',\\n          label: 'Option4'\\n        }, {\\n          value: 'Option5',\\n          label: 'Option5'\\n        }],\\n        value: ''\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_14 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"effacer-la-selection\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#effacer-la-selection\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Effacer la sélection\")\n], -1 /* HOISTED */)\nconst _hoisted_15 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Vous pouvez ajouter un bouton pour effacer la sélection.\", -1 /* HOISTED */)\nconst _hoisted_16 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Ajoutez l'attribut \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"clearable\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" à \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"el-select\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" et l'icône de fermeture s'affichera après une sélection. Notez que \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"clearable\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" ne marche qu'avec les sélecteurs à choix unique.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_17 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-select v-model=\\\"value\\\" clearable placeholder=\\\"Select\\\">\\n    <el-option\\n      v-for=\\\"item in options\\\"\\n      :key=\\\"item.value\\\"\\n      :label=\\\"item.label\\\"\\n      :value=\\\"item.value\\\">\\n    </el-option>\\n  </el-select>\\n</template>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        options: [{\\n          value: 'Option1',\\n          label: 'Option1'\\n        }, {\\n          value: 'Option2',\\n          label: 'Option2'\\n        }, {\\n          value: 'Option3',\\n          label: 'Option3'\\n        }, {\\n          value: 'Option4',\\n          label: 'Option4'\\n        }, {\\n          value: 'Option5',\\n          label: 'Option5'\\n        }],\\n        value: ''\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_18 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"selecteur-multiple\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#selecteur-multiple\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Sélecteur multiple\")\n], -1 /* HOISTED */)\nconst _hoisted_19 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Les sélecteurs multiples utilisent des tags pour afficher les différentes options choisies.\", -1 /* HOISTED */)\nconst _hoisted_20 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Ajoutez \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"multiple\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" à \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"el-select\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" pour le changer en sélecteur multiple. La valeur de \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"v-model\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" devient un tableau contenant toutes les options. Par défaut les différents choix sont affichés sous forme de tags. Vous pouvez réduire leur nombre en utilisant l'attribut \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"collapse-tags\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\".\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_21 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-select v-model=\\\"value1\\\" multiple placeholder=\\\"Select\\\">\\n    <el-option\\n      v-for=\\\"item in options\\\"\\n      :key=\\\"item.value\\\"\\n      :label=\\\"item.label\\\"\\n      :value=\\\"item.value\\\">\\n    </el-option>\\n  </el-select>\\n\\n  <el-select\\n    v-model=\\\"value2\\\"\\n    multiple\\n    collapse-tags\\n    style=\\\"margin-left: 20px;\\\"\\n    placeholder=\\\"Select\\\">\\n    <el-option\\n      v-for=\\\"item in options\\\"\\n      :key=\\\"item.value\\\"\\n      :label=\\\"item.label\\\"\\n      :value=\\\"item.value\\\">\\n    </el-option>\\n  </el-select>\\n</template>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        options: [{\\n          value: 'Option1',\\n          label: 'Option1'\\n        }, {\\n          value: 'Option2',\\n          label: 'Option2'\\n        }, {\\n          value: 'Option3',\\n          label: 'Option3'\\n        }, {\\n          value: 'Option4',\\n          label: 'Option4'\\n        }, {\\n          value: 'Option5',\\n          label: 'Option5'\\n        }],\\n        value1: [],\\n        value2: []\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_22 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"template-personnalise\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#template-personnalise\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Template personnalisé\")\n], -1 /* HOISTED */)\nconst _hoisted_23 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Vous pouvez définir un template HTML pour l'affichage des options.\", -1 /* HOISTED */)\nconst _hoisted_24 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Insérez votre template dans le slot de \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"el-option\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\".\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_25 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-select v-model=\\\"value\\\" placeholder=\\\"Select\\\">\\n    <el-option\\n      v-for=\\\"item in cities\\\"\\n      :key=\\\"item.value\\\"\\n      :label=\\\"item.label\\\"\\n      :value=\\\"item.value\\\">\\n      <span style=\\\"float: left\\\">{{ item.label }}</span>\\n      <span style=\\\"float: right; color: #8492a6; font-size: 13px\\\">{{ item.value }}</span>\\n    </el-option>\\n  </el-select>\\n</template>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        cities: [{\\n          value: 'Beijing',\\n          label: 'Beijing'\\n        }, {\\n          value: 'Shanghai',\\n          label: 'Shanghai'\\n        }, {\\n          value: 'Nanjing',\\n          label: 'Nanjing'\\n        }, {\\n          value: 'Chengdu',\\n          label: 'Chengdu'\\n        }, {\\n          value: 'Shenzhen',\\n          label: 'Shenzhen'\\n        }, {\\n          value: 'Guangzhou',\\n          label: 'Guangzhou'\\n        }],\\n        value: ''\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_26 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"grouper-les-options\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#grouper-les-options\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Grouper les options\")\n], -1 /* HOISTED */)\nconst _hoisted_27 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Vous pouvez définir des groupes pour les options du menu.\", -1 /* HOISTED */)\nconst _hoisted_28 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Utilisez \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"el-option-group\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" pour grouper les options. L'attribut \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"label\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" définit le nom du groupe.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_29 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-select v-model=\\\"value\\\" placeholder=\\\"Select\\\">\\n    <el-option-group\\n      v-for=\\\"group in options\\\"\\n      :key=\\\"group.label\\\"\\n      :label=\\\"group.label\\\">\\n      <el-option\\n        v-for=\\\"item in group.options\\\"\\n        :key=\\\"item.value\\\"\\n        :label=\\\"item.label\\\"\\n        :value=\\\"item.value\\\">\\n      </el-option>\\n    </el-option-group>\\n  </el-select>\\n</template>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        options: [{\\n          label: 'Villes célèbres',\\n          options: [{\\n            value: 'Shanghai',\\n            label: 'Shanghai'\\n          }, {\\n            value: 'Beijing',\\n            label: 'Beijing'\\n          }]\\n        }, {\\n          label: 'Nom de ville',\\n          options: [{\\n            value: 'Chengdu',\\n            label: 'Chengdu'\\n          }, {\\n            value: 'Shenzhen',\\n            label: 'Shenzhen'\\n          }, {\\n            value: 'Guangzhou',\\n            label: 'Guangzhou'\\n          }, {\\n            value: 'Dalian',\\n            label: 'Dalian'\\n          }]\\n        }],\\n        value: ''\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_30 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"filtrage-des-options\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#filtrage-des-options\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Filtrage des options\")\n], -1 /* HOISTED */)\nconst _hoisted_31 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Vous pouvez ajouter un mode de filtrage pour trouver les options désirées plus rapidement.\", -1 /* HOISTED */)\nconst _hoisted_32 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Ajoutez \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"filterable\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" à \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"el-select\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" pour activer le filtrage. Par défaut, Select cherchera les options dont le \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"label\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" contient la valeur du filtre. Si vous préférez une autre stratégie de filtrage, utilisez \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"filter-method\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\". C'est une \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"Function\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" qui est appelée quand la valeur change, avec pour paramètre la valeur courante.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_33 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-select v-model=\\\"value\\\" filterable placeholder=\\\"Select\\\">\\n    <el-option\\n      v-for=\\\"item in options\\\"\\n      :key=\\\"item.value\\\"\\n      :label=\\\"item.label\\\"\\n      :value=\\\"item.value\\\">\\n    </el-option>\\n  </el-select>\\n</template>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        options: [{\\n          value: 'Option1',\\n          label: 'Option1'\\n        }, {\\n          value: 'Option2',\\n          label: 'Option2'\\n        }, {\\n          value: 'Option3',\\n          label: 'Option3'\\n        }, {\\n          value: 'Option4',\\n          label: 'Option4'\\n        }, {\\n          value: 'Option5',\\n          label: 'Option5'\\n        }],\\n        value: ''\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_34 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"recherche-a-distance\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#recherche-a-distance\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Recherche à distance\")\n], -1 /* HOISTED */)\nconst _hoisted_35 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Vous pouvez aller chercher les options sur le serveur de manière dynamique.\", -1 /* HOISTED */)\nconst _hoisted_36 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Ajoutez \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"filterable\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" et \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"remote\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" pour activer la recherche distante, ainsi que \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"remote-method\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\". Cette dernière est une \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"Function\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" qui est appelée lorsque la valeur change, avec pour paramètre la valeur courante. Notes que si \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"el-option\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" est rendu dans une directive \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"v-for\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\", vous devriez ajouter l'attribut \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"key\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" aux \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"el-option\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\". Cette valeur doit unique, comme \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"item.value\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" dans l'exemple suivant.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_37 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-select\\n    v-model=\\\"value\\\"\\n    multiple\\n    filterable\\n    remote\\n    reserve-keyword\\n    placeholder=\\\"Entrez un mot-clé\\\"\\n    :remote-method=\\\"remoteMethod\\\"\\n    :loading=\\\"loading\\\">\\n    <el-option\\n      v-for=\\\"item in options\\\"\\n      :key=\\\"item.value\\\"\\n      :label=\\\"item.label\\\"\\n      :value=\\\"item.value\\\">\\n    </el-option>\\n  </el-select>\\n</template>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        options: [],\\n        value: [],\\n        list: [],\\n        loading: false,\\n        states: [\\\"Alabama\\\", \\\"Alaska\\\", \\\"Arizona\\\",\\n        \\\"Arkansas\\\", \\\"California\\\", \\\"Colorado\\\",\\n        \\\"Connecticut\\\", \\\"Delaware\\\", \\\"Florida\\\",\\n        \\\"Georgia\\\", \\\"Hawaii\\\", \\\"Idaho\\\", \\\"Illinois\\\",\\n        \\\"Indiana\\\", \\\"Iowa\\\", \\\"Kansas\\\", \\\"Kentucky\\\",\\n        \\\"Louisiana\\\", \\\"Maine\\\", \\\"Maryland\\\",\\n        \\\"Massachusetts\\\", \\\"Michigan\\\", \\\"Minnesota\\\",\\n        \\\"Mississippi\\\", \\\"Missouri\\\", \\\"Montana\\\",\\n        \\\"Nebraska\\\", \\\"Nevada\\\", \\\"New Hampshire\\\",\\n        \\\"New Jersey\\\", \\\"New Mexico\\\", \\\"New York\\\",\\n        \\\"North Carolina\\\", \\\"North Dakota\\\", \\\"Ohio\\\",\\n        \\\"Oklahoma\\\", \\\"Oregon\\\", \\\"Pennsylvania\\\",\\n        \\\"Rhode Island\\\", \\\"South Carolina\\\",\\n        \\\"South Dakota\\\", \\\"Tennessee\\\", \\\"Texas\\\",\\n        \\\"Utah\\\", \\\"Vermont\\\", \\\"Virginia\\\",\\n        \\\"Washington\\\", \\\"West Virginia\\\", \\\"Wisconsin\\\",\\n        \\\"Wyoming\\\"]\\n      }\\n    },\\n    mounted() {\\n      this.list = this.states.map(item => {\\n        return { value: `value:${item}`, label: `label:${item}` };\\n      });\\n    },\\n    methods: {\\n      remoteMethod(query) {\\n        if (query !== '') {\\n          this.loading = true;\\n          setTimeout(() => {\\n            this.loading = false;\\n            this.options = this.list.filter(item => {\\n              return item.label.toLowerCase()\\n                .indexOf(query.toLowerCase()) > -1;\\n            });\\n          }, 200);\\n        } else {\\n          this.options = [];\\n        }\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_38 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"creer-des-options\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#creer-des-options\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Créer des options\")\n], -1 /* HOISTED */)\nconst _hoisted_39 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Vous pouvez entrer des choix dans le champ de sélection qui ne sont pas incluses dans le menu.\", -1 /* HOISTED */)\nconst _hoisted_40 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"En utilisant \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"allow-create\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\", peuvent créer de nouveaux choix en les entrant dans le champ d'input. Cette option ne marche que si \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"filterable\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" est activé. Cette exemple montre aussi \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"default-first-option\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\", qui permet de sélectionner la première option en pressant Entrée sans avoir à utiliser la souris ou le clavier.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_41 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-select\\n    v-model=\\\"value\\\"\\n    multiple\\n    filterable\\n    allow-create\\n    default-first-option\\n    placeholder=\\\"Choisissez les tags de vos articles\\\">\\n    <el-option\\n      v-for=\\\"item in options\\\"\\n      :key=\\\"item.value\\\"\\n      :label=\\\"item.label\\\"\\n      :value=\\\"item.value\\\">\\n    </el-option>\\n  </el-select>\\n</template>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        options: [{\\n          value: 'HTML',\\n          label: 'HTML'\\n        }, {\\n          value: 'CSS',\\n          label: 'CSS'\\n        }, {\\n          value: 'JavaScript',\\n          label: 'JavaScript'\\n        }],\\n        value: []\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_42 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createStaticVNode\"])(\"<div class=\\\"tip\\\"><p>Si la valeur de Select est un objet, assurez-vous d&#39;utiliser <code>value-key</code> comme identifiant unique.</p></div><h3 id=\\\"attributs-de-select\\\"><a class=\\\"header-anchor\\\" href=\\\"#attributs-de-select\\\">¶</a> Attributs de Select</h3><table><thead><tr><th>Attribut</th><th>Description</th><th>Type</th><th>Valeurs acceptées</th><th>Défaut</th></tr></thead><tbody><tr><td>value / v-model</td><td>La valeur liée.</td><td>boolean / string / number</td><td>—</td><td>—</td></tr><tr><td>multiple</td><td>Si la sélection multiple est activée.</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>disabled</td><td>Si le sélecteur est désactivé.</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>value-key</td><td>Identifiant unique pour la valeur, requis quand la valeur est un objet.</td><td>string</td><td>—</td><td>value</td></tr><tr><td>size</td><td>Taille de l&#39;Input.</td><td>string</td><td>large/small/mini</td><td>—</td></tr><tr><td>clearable</td><td>Si la sélection est effaçable.</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>collapse-tags</td><td>Si les tags peuvent être réduits, dans le cas d&#39;une sélection multiple.</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>multiple-limit</td><td>Nombre maximum d&#39;options multiples sélectionnable. Pas de limites quand est à 0.</td><td>number</td><td>—</td><td>0</td></tr><tr><td>name</td><td>L&#39;attribut name natif du sélecteur.</td><td>string</td><td>—</td><td>—</td></tr><tr><td>autocomplete</td><td>L&#39;attribut autocomplete natif du sélecteur.</td><td>string</td><td>—</td><td>off</td></tr><tr><td>auto-complete</td><td>@DEPRECATED dans la prochaine version majeure.</td><td>string</td><td>—</td><td>off</td></tr><tr><td>placeholder</td><td>Le placeholder du champ.</td><td>string</td><td>—</td><td>Select</td></tr><tr><td>filterable</td><td>Si les options sont filtrables.</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>allow-create</td><td>Si l&#39;utilisateur peut créer des options. Dans ce cas <code>filterable</code> doit être activé.</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>filter-method</td><td>Méthode de filtrage personnalisée.</td><td>function</td><td>—</td><td>—</td></tr><tr><td>remote</td><td>Si les options sont chargées dynamiquement depuis le serveur.</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>remote-method</td><td>Méthode pour la recherche distante.</td><td>function</td><td>—</td><td>—</td></tr><tr><td>loading</td><td>Si le sélecteur est en train de charger des options.</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>loading-text</td><td>Texte à afficher pendant le chargement.</td><td>string</td><td>—</td><td>Loading</td></tr><tr><td>no-match-text</td><td>Texte à afficher quand le filtrage ne retourne aucune option. Vous pouvez aussi utiliser le slot <code>empty</code>.</td><td>string</td><td>—</td><td>No matching data</td></tr><tr><td>no-data-text</td><td>Texte à afficher quand il n&#39;y a aucune option. Vous pouvez aussi utiliser le slot <code>empty</code>.</td><td>string</td><td>—</td><td>No data</td></tr><tr><td>popper-class</td><td>Classe du menu déroulant.</td><td>string</td><td>—</td><td>—</td></tr><tr><td>reserve-keyword</td><td>Quand <code>multiple</code> et <code>filter</code> sont activés, s&#39;il faut réserver le mot-clé courant après la sélection d&#39;une option.</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>default-first-option</td><td>Sélectionne la première option avec Entrée. Utilisable avec <code>filterable</code> ou <code>remote</code></td><td>boolean</td><td>-</td><td>false</td></tr><tr><td>popper-append-to-body</td><td>Si le menu déroulant doit être ajouté au body. Si le positionnement du menu est incorrect, essayez de mettre cette option à <code>false</code>.</td><td>boolean</td><td>-</td><td>true</td></tr><tr><td>automatic-dropdown</td><td>Pour les sélecteurs non filtrables, détermine si le menu apparaît au focus du champ.</td><td>boolean</td><td>-</td><td>false</td></tr></tbody></table><h3 id=\\\"evenements-de-select\\\"><a class=\\\"header-anchor\\\" href=\\\"#evenements-de-select\\\">¶</a> Évènements de Select</h3><table><thead><tr><th>Nom</th><th>Description</th><th>Paramètre</th></tr></thead><tbody><tr><td>change</td><td>Se déclenche quand la valeur change.</td><td>current selected value</td></tr><tr><td>visible-change</td><td>Se déclenche quand le menu apparaît ou disparaît.</td><td>true quand il apparaît, sinon false .</td></tr><tr><td>remove-tag</td><td>Se déclenche quand un tag est retiré.</td><td>La valeur du tag retiré.</td></tr><tr><td>clear</td><td>Se déclenche quand le champ est effacé grâce au bouton.</td><td>—</td></tr><tr><td>blur</td><td>Se déclenche quand le champ perd le focus.</td><td>(event: Event)</td></tr><tr><td>focus</td><td>Se déclenche gagne le focus.</td><td>(event: Event)</td></tr></tbody></table><h3 id=\\\"slots-de-select\\\"><a class=\\\"header-anchor\\\" href=\\\"#slots-de-select\\\">¶</a> Slots de Select</h3><table><thead><tr><th>Nom</th><th>Description</th></tr></thead><tbody><tr><td>—</td><td>Liste de options.</td></tr><tr><td>prefix</td><td>Contenu du préfixe du sélecteur.</td></tr><tr><td>empty</td><td>Contenu lorsqu&#39;il n&#39;y a aucune option.</td></tr></tbody></table><h3 id=\\\"attributs-du-groupe-d-options\\\"><a class=\\\"header-anchor\\\" href=\\\"#attributs-du-groupe-d-options\\\">¶</a> Attributs du groupe d&#39;options</h3><table><thead><tr><th>Attribut</th><th>Description</th><th>Type</th><th>Valeurs acceptées</th><th>Défaut</th></tr></thead><tbody><tr><td>label</td><td>Nom du group.</td><td>string</td><td>—</td><td>—</td></tr><tr><td>disabled</td><td>Si les options du groupe sont désactivées.</td><td>boolean</td><td>—</td><td>false</td></tr></tbody></table><h3 id=\\\"attributs-des-options\\\"><a class=\\\"header-anchor\\\" href=\\\"#attributs-des-options\\\">¶</a> Attributs des options</h3><table><thead><tr><th>Attribut</th><th>Description</th><th>Type</th><th>Valeurs acceptées</th><th>Défaut</th></tr></thead><tbody><tr><td>value</td><td>Valeur de l&#39;option.</td><td>string/number/object</td><td>—</td><td>—</td></tr><tr><td>label</td><td>Label de l&#39;option, identique à <code>value</code> si omis.</td><td>string/number</td><td>—</td><td>—</td></tr><tr><td>disabled</td><td>Si l&#39;option est désactivée.</td><td>boolean</td><td>—</td><td>false</td></tr></tbody></table><h3 id=\\\"methodes\\\"><a class=\\\"header-anchor\\\" href=\\\"#methodes\\\">¶</a> Méthodes</h3><table><thead><tr><th>Méthode</th><th>Description</th><th>Paramètres</th></tr></thead><tbody><tr><td>focus</td><td>Focus sur l&#39;input.</td><td>-</td></tr><tr><td>blur</td><td>Enlève le focus de l&#39;input et cache le menu.</td><td>-</td></tr></tbody></table>\", 13)\n\nfunction render(_ctx, _cache) {\n  const _component_element_demo0 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo0\")\n  const _component_demo_block = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"demo-block\")\n  const _component_element_demo1 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo1\")\n  const _component_element_demo2 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo2\")\n  const _component_element_demo3 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo3\")\n  const _component_element_demo4 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo4\")\n  const _component_element_demo5 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo5\")\n  const _component_element_demo6 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo6\")\n  const _component_element_demo7 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo7\")\n  const _component_element_demo8 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo8\")\n  const _component_element_demo9 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo9\")\n\n  return (Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"openBlock\"])(), Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createBlock\"])(\"section\", _hoisted_1, [\n    _hoisted_2,\n    _hoisted_3,\n    _hoisted_4,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo0)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_6\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_5\n      ]),\n      _: 1\n    }),\n    _hoisted_7,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo1)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_9\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_8\n      ]),\n      _: 1\n    }),\n    _hoisted_10,\n    _hoisted_11,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo2)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_13\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_12\n      ]),\n      _: 1\n    }),\n    _hoisted_14,\n    _hoisted_15,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo3)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_17\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_16\n      ]),\n      _: 1\n    }),\n    _hoisted_18,\n    _hoisted_19,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo4)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_21\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_20\n      ]),\n      _: 1\n    }),\n    _hoisted_22,\n    _hoisted_23,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo5)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_25\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_24\n      ]),\n      _: 1\n    }),\n    _hoisted_26,\n    _hoisted_27,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo6)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_29\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_28\n      ]),\n      _: 1\n    }),\n    _hoisted_30,\n    _hoisted_31,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo7)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_33\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_32\n      ]),\n      _: 1\n    }),\n    _hoisted_34,\n    _hoisted_35,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo8)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_37\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_36\n      ]),\n      _: 1\n    }),\n    _hoisted_38,\n    _hoisted_39,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo9)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_41\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_40\n      ]),\n      _: 1\n    }),\n    _hoisted_42\n  ]))\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9leGFtcGxlcy9kb2NzL2ZyLUZSL3NlbGVjdC5tZD9jNTAxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O3FCQUVlLEtBQUssRUFBQyxxQkFBcUI7Z0NBQ2xDLHdEQUF5RSxRQUFyRSxFQUFFLEVBQUMsUUFBUTtlQUFDLHdEQUE2QztJQUExQyxLQUFLLEVBQUMsZUFBZTtJQUFDLElBQUksRUFBQyxTQUFTO0tBQUMsR0FBQzsyRUFBSSxTQUFPOztnQ0FDNUUsd0RBQTZHLFdBQTFHLHdHQUFzRztnQ0FDekcsd0RBQXNFLFFBQWxFLEVBQUUsRUFBQyxPQUFPO2VBQUMsd0RBQTRDO0lBQXpDLEtBQUssRUFBQyxlQUFlO0lBQUMsSUFBSSxFQUFDLFFBQVE7S0FBQyxHQUFDOzJFQUFJLFFBQU07O2dDQUV6RCx3REFDRjtlQURPLHdEQUFnRjtpQkFBN0Usd0RBQW9CLGNBQWQsU0FBTzs2RUFBTyxvQkFBa0I7aUJBQUEsd0RBQXNCLGNBQWhCLFdBQVM7NkVBQU8sZUFBYTs7O2dDQUc1RCx3REFvQ2hCO2VBcEMyQix3REFvQ2pDLFVBcEN1QyxLQUFLLEVBQUMsTUFBTSxJQUFDLG91QkFvQzNEOztnQ0FBcUMsd0RBQTBHLFFBQXRHLEVBQUUsRUFBQyxtQkFBbUI7ZUFBQyx3REFBd0Q7SUFBckQsS0FBSyxFQUFDLGVBQWU7SUFBQyxJQUFJLEVBQUMsb0JBQW9CO0tBQUMsR0FBQzsyRUFBSSxvQkFBa0I7O2dDQUVsSSx3REFDRjtlQURPLHdEQUE0SDs2RUFBekgsb0JBQWtCO2lCQUFBLHdEQUFxQixjQUFmLFVBQVE7NkVBQU8sUUFBTTtpQkFBQSx3REFBc0IsY0FBaEIsV0FBUzs2RUFBTyxLQUFHO2lCQUFBLHdEQUFpQixjQUFYLE1BQUk7NkVBQU8sZ0NBQThCOzs7Z0NBR3hHLHdEQXNDaEI7ZUF0QzJCLHdEQXNDakMsVUF0Q3VDLEtBQUssRUFBQyxNQUFNLElBQUMsa3lCQXNDM0Q7O2lDQUFxQyx3REFBZ0gsUUFBNUcsRUFBRSxFQUFDLHFCQUFxQjtlQUFDLHdEQUEwRDtJQUF2RCxLQUFLLEVBQUMsZUFBZTtJQUFDLElBQUksRUFBQyxzQkFBc0I7S0FBQyxHQUFDOzJFQUFJLHNCQUFvQjs7aUNBQ2hKLHdEQUFvRCxXQUFqRCwrQ0FBNkM7aUNBRXhDLHdEQUNGO2VBRE8sd0RBQWlGOzZFQUE5RSxVQUFRO2lCQUFBLHdEQUFxQixjQUFmLFVBQVE7NkVBQU8sS0FBRztpQkFBQSx3REFBc0IsY0FBaEIsV0FBUzs2RUFBTyxzQkFBb0I7OztpQ0FHN0Qsd0RBb0NoQjtlQXBDMkIsd0RBb0NqQyxVQXBDdUMsS0FBSyxFQUFDLE1BQU0sSUFBQyw2dUJBb0MzRDs7aUNBQXFDLHdEQUFtSCxRQUEvRyxFQUFFLEVBQUMsc0JBQXNCO2VBQUMsd0RBQTJEO0lBQXhELEtBQUssRUFBQyxlQUFlO0lBQUMsSUFBSSxFQUFDLHVCQUF1QjtLQUFDLEdBQUM7MkVBQUksdUJBQXFCOztpQ0FDbkosd0RBQStELFdBQTVELDBEQUF3RDtpQ0FFbkQsd0RBQ0Y7ZUFETyx3REFBb047NkVBQWpOLHFCQUFtQjtpQkFBQSx3REFBc0IsY0FBaEIsV0FBUzs2RUFBTyxLQUFHO2lCQUFBLHdEQUFzQixjQUFoQixXQUFTOzZFQUFPLHNFQUFvRTtpQkFBQSx3REFBc0IsY0FBaEIsV0FBUzs2RUFBTyxtREFBaUQ7OztpQ0FHaE0sd0RBb0NoQjtlQXBDMkIsd0RBb0NqQyxVQXBDdUMsS0FBSyxFQUFDLE1BQU0sSUFBQyw4dUJBb0MzRDs7aUNBQXFDLHdEQUE2RyxRQUF6RyxFQUFFLEVBQUMsb0JBQW9CO2VBQUMsd0RBQXlEO0lBQXRELEtBQUssRUFBQyxlQUFlO0lBQUMsSUFBSSxFQUFDLHFCQUFxQjtLQUFDLEdBQUM7MkVBQUkscUJBQW1COztpQ0FDN0ksd0RBQWtHLFdBQS9GLDZGQUEyRjtpQ0FFdEYsd0RBQ0Y7ZUFETyx3REFBNlU7NkVBQTFVLFVBQVE7aUJBQUEsd0RBQXFCLGNBQWYsVUFBUTs2RUFBTyxLQUFHO2lCQUFBLHdEQUFzQixjQUFoQixXQUFTOzZFQUFPLHVEQUFxRDtpQkFBQSx3REFBb0IsY0FBZCxTQUFPOzZFQUFPLDhLQUE0SztpQkFBQSx3REFBMEIsY0FBcEIsZUFBYTs2RUFBTyxHQUFDOzs7aUNBR3pULHdEQW1EaEI7ZUFuRDJCLHdEQW1EakMsVUFuRHVDLEtBQUssRUFBQyxNQUFNLElBQUMscWpDQW1EM0Q7O2lDQUFxQyx3REFBc0gsUUFBbEgsRUFBRSxFQUFDLHVCQUF1QjtlQUFDLHdEQUE0RDtJQUF6RCxLQUFLLEVBQUMsZUFBZTtJQUFDLElBQUksRUFBQyx3QkFBd0I7S0FBQyxHQUFDOzJFQUFJLHdCQUFzQjs7aUNBQ3RKLHdEQUF5RSxXQUF0RSxvRUFBa0U7aUNBRTdELHdEQUNGO2VBRE8sd0RBQXFFOzZFQUFsRSx5Q0FBdUM7aUJBQUEsd0RBQXNCLGNBQWhCLFdBQVM7NkVBQU8sR0FBQzs7O2lDQUdqRCx3REF5Q2hCO2VBekMyQix3REF5Q2pDLFVBekN1QyxLQUFLLEVBQUMsTUFBTSxJQUFDLHk4QkF5QzNEOztpQ0FBcUMsd0RBQWdILFFBQTVHLEVBQUUsRUFBQyxxQkFBcUI7ZUFBQyx3REFBMEQ7SUFBdkQsS0FBSyxFQUFDLGVBQWU7SUFBQyxJQUFJLEVBQUMsc0JBQXNCO0tBQUMsR0FBQzsyRUFBSSxzQkFBb0I7O2lDQUNoSix3REFBZ0UsV0FBN0QsMkRBQXlEO2lDQUVwRCx3REFDRjtlQURPLHdEQUE4SDs2RUFBM0gsV0FBUztpQkFBQSx3REFBNEIsY0FBdEIsaUJBQWU7NkVBQU8sd0NBQXNDO2lCQUFBLHdEQUFrQixjQUFaLE9BQUs7NkVBQU8sNEJBQTBCOzs7aUNBRzFHLHdEQWtEaEI7ZUFsRDJCLHdEQWtEakMsVUFsRHVDLEtBQUssRUFBQyxNQUFNLElBQUMsK25DQWtEM0Q7O2lDQUFxQyx3REFBbUgsUUFBL0csRUFBRSxFQUFDLHNCQUFzQjtlQUFDLHdEQUEyRDtJQUF4RCxLQUFLLEVBQUMsZUFBZTtJQUFDLElBQUksRUFBQyx1QkFBdUI7S0FBQyxHQUFDOzJFQUFJLHVCQUFxQjs7aUNBQ25KLHdEQUFpRyxXQUE5Riw0RkFBMEY7aUNBRXJGLHdEQUNGO2VBRE8sd0RBQWtZOzZFQUEvWCxVQUFRO2lCQUFBLHdEQUF1QixjQUFqQixZQUFVOzZFQUFPLEtBQUc7aUJBQUEsd0RBQXNCLGNBQWhCLFdBQVM7NkVBQU8sOEVBQTRFO2lCQUFBLHdEQUFrQixjQUFaLE9BQUs7NkVBQU8sNEZBQTBGO2lCQUFBLHdEQUEwQixjQUFwQixlQUFhOzZFQUFPLGNBQVk7aUJBQUEsd0RBQXFCLGNBQWYsVUFBUTs2RUFBTyxrRkFBZ0Y7OztpQ0FHOVcsd0RBb0NoQjtlQXBDMkIsd0RBb0NqQyxVQXBDdUMsS0FBSyxFQUFDLE1BQU0sSUFBQywrdUJBb0MzRDs7aUNBQXFDLHdEQUFtSCxRQUEvRyxFQUFFLEVBQUMsc0JBQXNCO2VBQUMsd0RBQTJEO0lBQXhELEtBQUssRUFBQyxlQUFlO0lBQUMsSUFBSSxFQUFDLHVCQUF1QjtLQUFDLEdBQUM7MkVBQUksdUJBQXFCOztpQ0FDbkosd0RBQWtGLFdBQS9FLDZFQUEyRTtpQ0FFdEUsd0RBQ0Y7ZUFETyx3REFBd2Y7NkVBQXJmLFVBQVE7aUJBQUEsd0RBQXVCLGNBQWpCLFlBQVU7NkVBQU8sTUFBSTtpQkFBQSx3REFBbUIsY0FBYixRQUFNOzZFQUFPLGlEQUErQztpQkFBQSx3REFBMEIsY0FBcEIsZUFBYTs2RUFBTywyQkFBeUI7aUJBQUEsd0RBQXFCLGNBQWYsVUFBUTs2RUFBTyxrR0FBZ0c7aUJBQUEsd0RBQXNCLGNBQWhCLFdBQVM7NkVBQU8sZ0NBQThCO2lCQUFBLHdEQUFrQixjQUFaLE9BQUs7NkVBQU8sb0NBQWtDO2lCQUFBLHdEQUFnQixjQUFWLEtBQUc7NkVBQU8sT0FBSztpQkFBQSx3REFBc0IsY0FBaEIsV0FBUzs2RUFBTyxvQ0FBa0M7aUJBQUEsd0RBQXVCLGNBQWpCLFlBQVU7NkVBQU8sMEJBQXdCOzs7aUNBR3BlLHdEQXFFaEI7ZUFyRTJCLHdEQXFFakMsVUFyRXVDLEtBQUssRUFBQyxNQUFNLElBQUMsbWdFQXFFM0Q7O2lDQUFxQyx3REFBMEcsUUFBdEcsRUFBRSxFQUFDLG1CQUFtQjtlQUFDLHdEQUF3RDtJQUFyRCxLQUFLLEVBQUMsZUFBZTtJQUFDLElBQUksRUFBQyxvQkFBb0I7S0FBQyxHQUFDOzJFQUFJLG9CQUFrQjs7aUNBQzFJLHdEQUFxRyxXQUFsRyxnR0FBOEY7aUNBRXpGLHdEQUNGO2VBRE8sd0RBQW9XOzZFQUFqVyxlQUFhO2lCQUFBLHdEQUF5QixjQUFuQixjQUFZOzZFQUFPLHdHQUFzRztpQkFBQSx3REFBdUIsY0FBakIsWUFBVTs2RUFBTywwQ0FBd0M7aUJBQUEsd0RBQWlDLGNBQTNCLHNCQUFvQjs2RUFBTyxtSEFBaUg7OztpQ0FHaFYsd0RBb0NoQjtlQXBDMkIsd0RBb0NqQyxVQXBDdUMsS0FBSyxFQUFDLE1BQU0sSUFBQywrckJBb0MzRDs7Ozs7Ozs7Ozs7Ozs7Ozs7bUVBMWVNLHdEQXcwQlUsV0F4MEJWLFVBdzBCVTtJQXYwQlIsVUFBeUU7SUFDakYsVUFBNkc7SUFDN0csVUFBc0U7SUFDdEUsd0RBd0NxQztNQXJDbEIsTUFBTSxzREFBQyxDQUFpQjtRQUFqQix3REFBaUI7O01BQ3hCLFNBQVMsc0RBQUMsQ0FvQ2hCO1FBcENnQixVQW9DaEI7O21FQXZDTCxDQUNGO1FBREUsVUFDRjs7OztJQXNDK0IsVUFBMEc7SUFDL0ksd0RBMENxQztNQXZDbEIsTUFBTSxzREFBQyxDQUFpQjtRQUFqQix3REFBaUI7O01BQ3hCLFNBQVMsc0RBQUMsQ0FzQ2hCO1FBdENnQixVQXNDaEI7O21FQXpDTCxDQUNGO1FBREUsVUFDRjs7OztJQXdDK0IsV0FBZ0g7SUFDckosV0FBb0Q7SUFDcEQsd0RBd0NxQztNQXJDbEIsTUFBTSxzREFBQyxDQUFpQjtRQUFqQix3REFBaUI7O01BQ3hCLFNBQVMsc0RBQUMsQ0FvQ2hCO1FBcENnQixXQW9DaEI7O21FQXZDTCxDQUNGO1FBREUsV0FDRjs7OztJQXNDK0IsV0FBbUg7SUFDeEosV0FBK0Q7SUFDL0Qsd0RBd0NxQztNQXJDbEIsTUFBTSxzREFBQyxDQUFpQjtRQUFqQix3REFBaUI7O01BQ3hCLFNBQVMsc0RBQUMsQ0FvQ2hCO1FBcENnQixXQW9DaEI7O21FQXZDTCxDQUNGO1FBREUsV0FDRjs7OztJQXNDK0IsV0FBNkc7SUFDbEosV0FBa0c7SUFDbEcsd0RBdURxQztNQXBEbEIsTUFBTSxzREFBQyxDQUFpQjtRQUFqQix3REFBaUI7O01BQ3hCLFNBQVMsc0RBQUMsQ0FtRGhCO1FBbkRnQixXQW1EaEI7O21FQXRETCxDQUNGO1FBREUsV0FDRjs7OztJQXFEK0IsV0FBc0g7SUFDM0osV0FBeUU7SUFDekUsd0RBNkNxQztNQTFDbEIsTUFBTSxzREFBQyxDQUFpQjtRQUFqQix3REFBaUI7O01BQ3hCLFNBQVMsc0RBQUMsQ0F5Q2hCO1FBekNnQixXQXlDaEI7O21FQTVDTCxDQUNGO1FBREUsV0FDRjs7OztJQTJDK0IsV0FBZ0g7SUFDckosV0FBZ0U7SUFDaEUsd0RBc0RxQztNQW5EbEIsTUFBTSxzREFBQyxDQUFpQjtRQUFqQix3REFBaUI7O01BQ3hCLFNBQVMsc0RBQUMsQ0FrRGhCO1FBbERnQixXQWtEaEI7O21FQXJETCxDQUNGO1FBREUsV0FDRjs7OztJQW9EK0IsV0FBbUg7SUFDeEosV0FBaUc7SUFDakcsd0RBd0NxQztNQXJDbEIsTUFBTSxzREFBQyxDQUFpQjtRQUFqQix3REFBaUI7O01BQ3hCLFNBQVMsc0RBQUMsQ0FvQ2hCO1FBcENnQixXQW9DaEI7O21FQXZDTCxDQUNGO1FBREUsV0FDRjs7OztJQXNDK0IsV0FBbUg7SUFDeEosV0FBa0Y7SUFDbEYsd0RBeUVxQztNQXRFbEIsTUFBTSxzREFBQyxDQUFpQjtRQUFqQix3REFBaUI7O01BQ3hCLFNBQVMsc0RBQUMsQ0FxRWhCO1FBckVnQixXQXFFaEI7O21FQXhFTCxDQUNGO1FBREUsV0FDRjs7OztJQXVFK0IsV0FBMEc7SUFDL0ksV0FBcUc7SUFDckcsd0RBd0NxQztNQXJDbEIsTUFBTSxzREFBQyxDQUFpQjtRQUFqQix3REFBaUI7O01BQ3hCLFNBQVMsc0RBQUMsQ0FvQ2hCO1FBcENnQixXQW9DaEI7O21FQXZDTCxDQUNGO1FBREUsV0FDRjs7OztJQXNDK0IsV0FFL0IiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L3RlbXBsYXRlTG9hZGVyLmpzPyEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/IS4vYnVpbGQvbWQtbG9hZGVyL2luZGV4LmpzIS4vZXhhbXBsZXMvZG9jcy9mci1GUi9zZWxlY3QubWQ/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9ZTE1OWU4YmEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbiAgICA8dGVtcGxhdGU+XG4gICAgICA8c2VjdGlvbiBjbGFzcz1cImNvbnRlbnQgZWxlbWVudC1kb2NcIj5cbiAgICAgICAgPGgyIGlkPVwic2VsZWN0XCI+PGEgY2xhc3M9XCJoZWFkZXItYW5jaG9yXCIgaHJlZj1cIiNzZWxlY3RcIj7CtjwvYT4gU2VsZWN0PC9oMj5cbjxwPlV0aWxlIGxvcnNxdSdpbCBmYXV0IHPDqWxlY3Rpb25uZXIgZGVzIG9wdGlvbnMgcGFybWkgdW4gbGFyZ2UgY2hvaXgsIGFmZmljaMOpIGdyw6JjZSDDoCB1biBtZW51IGTDqXJvdWxhbnQuPC9wPlxuPGgzIGlkPVwidXNhZ2VcIj48YSBjbGFzcz1cImhlYWRlci1hbmNob3JcIiBocmVmPVwiI3VzYWdlXCI+wrY8L2E+IFVzYWdlPC9oMz5cbjxkZW1vLWJsb2NrPlxuICAgICAgICA8ZGl2PjxwPjxjb2RlPnYtbW9kZWw8L2NvZGU+IGVzdCBsYSB2YWxldXIgZHUgPGNvZGU+ZWwtb3B0aW9uPC9jb2RlPiBzw6lsZWN0aW9ubsOpLjwvcD5cbjwvZGl2PlxuICAgICAgICA8dGVtcGxhdGUgI3NvdXJjZT48ZWxlbWVudC1kZW1vMCAvPjwvdGVtcGxhdGU+XG4gICAgICAgIDx0ZW1wbGF0ZSAjaGlnaGxpZ2h0PjxwcmUgdi1wcmU+PGNvZGUgY2xhc3M9XCJodG1sXCI+Jmx0O3RlbXBsYXRlJmd0O1xuICAmbHQ7ZWwtc2VsZWN0IHYtbW9kZWw9JnF1b3Q7dmFsdWUmcXVvdDsgcGxhY2Vob2xkZXI9JnF1b3Q7U2VsZWN0JnF1b3Q7Jmd0O1xuICAgICZsdDtlbC1vcHRpb25cbiAgICAgIHYtZm9yPSZxdW90O2l0ZW0gaW4gb3B0aW9ucyZxdW90O1xuICAgICAgOmtleT0mcXVvdDtpdGVtLnZhbHVlJnF1b3Q7XG4gICAgICA6bGFiZWw9JnF1b3Q7aXRlbS5sYWJlbCZxdW90O1xuICAgICAgOnZhbHVlPSZxdW90O2l0ZW0udmFsdWUmcXVvdDsmZ3Q7XG4gICAgJmx0Oy9lbC1vcHRpb24mZ3Q7XG4gICZsdDsvZWwtc2VsZWN0Jmd0O1xuJmx0Oy90ZW1wbGF0ZSZndDtcblxuJmx0O3NjcmlwdCZndDtcbiAgZXhwb3J0IGRlZmF1bHQge1xuICAgIGRhdGEoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBvcHRpb25zOiBbe1xuICAgICAgICAgIHZhbHVlOiAnT3B0aW9uMScsXG4gICAgICAgICAgbGFiZWw6ICdPcHRpb24xJ1xuICAgICAgICB9LCB7XG4gICAgICAgICAgdmFsdWU6ICdPcHRpb24yJyxcbiAgICAgICAgICBsYWJlbDogJ09wdGlvbjInXG4gICAgICAgIH0sIHtcbiAgICAgICAgICB2YWx1ZTogJ09wdGlvbjMnLFxuICAgICAgICAgIGxhYmVsOiAnT3B0aW9uMydcbiAgICAgICAgfSwge1xuICAgICAgICAgIHZhbHVlOiAnT3B0aW9uNCcsXG4gICAgICAgICAgbGFiZWw6ICdPcHRpb240J1xuICAgICAgICB9LCB7XG4gICAgICAgICAgdmFsdWU6ICdPcHRpb241JyxcbiAgICAgICAgICBsYWJlbDogJ09wdGlvbjUnXG4gICAgICAgIH1dLFxuICAgICAgICB2YWx1ZTogJydcbiAgICAgIH1cbiAgICB9XG4gIH1cbiZsdDsvc2NyaXB0Jmd0O1xuPC9jb2RlPjwvcHJlPjwvdGVtcGxhdGU+PC9kZW1vLWJsb2NrPjxoMyBpZD1cIm9wdGlvbi1kZXNhY3RpdmVlXCI+PGEgY2xhc3M9XCJoZWFkZXItYW5jaG9yXCIgaHJlZj1cIiNvcHRpb24tZGVzYWN0aXZlZVwiPsK2PC9hPiBPcHRpb24gZMOpc2FjdGl2w6llPC9oMz5cbjxkZW1vLWJsb2NrPlxuICAgICAgICA8ZGl2PjxwPk1ldHRleiBsJ2F0dHJpYnV0IDxjb2RlPmRpc2FibGVkPC9jb2RlPiBkYW5zIDxjb2RlPmVsLW9wdGlvbjwvY29kZT4gw6AgPGNvZGU+dHJ1ZTwvY29kZT4gcG91ciBkw6lzYWN0aXZlciBjZXR0ZSBvcHRpb24uPC9wPlxuPC9kaXY+XG4gICAgICAgIDx0ZW1wbGF0ZSAjc291cmNlPjxlbGVtZW50LWRlbW8xIC8+PC90ZW1wbGF0ZT5cbiAgICAgICAgPHRlbXBsYXRlICNoaWdobGlnaHQ+PHByZSB2LXByZT48Y29kZSBjbGFzcz1cImh0bWxcIj4mbHQ7dGVtcGxhdGUmZ3Q7XG4gICZsdDtlbC1zZWxlY3Qgdi1tb2RlbD0mcXVvdDt2YWx1ZSZxdW90OyBwbGFjZWhvbGRlcj0mcXVvdDtTZWxlY3QmcXVvdDsmZ3Q7XG4gICAgJmx0O2VsLW9wdGlvblxuICAgICAgdi1mb3I9JnF1b3Q7aXRlbSBpbiBvcHRpb25zJnF1b3Q7XG4gICAgICA6a2V5PSZxdW90O2l0ZW0udmFsdWUmcXVvdDtcbiAgICAgIDpsYWJlbD0mcXVvdDtpdGVtLmxhYmVsJnF1b3Q7XG4gICAgICA6dmFsdWU9JnF1b3Q7aXRlbS52YWx1ZSZxdW90O1xuICAgICAgOmRpc2FibGVkPSZxdW90O2l0ZW0uZGlzYWJsZWQmcXVvdDsmZ3Q7XG4gICAgJmx0Oy9lbC1vcHRpb24mZ3Q7XG4gICZsdDsvZWwtc2VsZWN0Jmd0O1xuJmx0Oy90ZW1wbGF0ZSZndDtcblxuJmx0O3NjcmlwdCZndDtcbiAgZXhwb3J0IGRlZmF1bHQge1xuICAgIGRhdGEoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBvcHRpb25zOiBbe1xuICAgICAgICAgIHZhbHVlOiAnT3B0aW9uMScsXG4gICAgICAgICAgbGFiZWw6ICdPcHRpb24xJ1xuICAgICAgICB9LCB7XG4gICAgICAgICAgdmFsdWU6ICdPcHRpb24yJyxcbiAgICAgICAgICBsYWJlbDogJ09wdGlvbjInLFxuICAgICAgICAgIGRpc2FibGVkOiB0cnVlXG4gICAgICAgIH0sIHtcbiAgICAgICAgICB2YWx1ZTogJ09wdGlvbjMnLFxuICAgICAgICAgIGxhYmVsOiAnT3B0aW9uMydcbiAgICAgICAgfSwge1xuICAgICAgICAgIHZhbHVlOiAnT3B0aW9uNCcsXG4gICAgICAgICAgbGFiZWw6ICdPcHRpb240J1xuICAgICAgICB9LCB7XG4gICAgICAgICAgdmFsdWU6ICdPcHRpb241JyxcbiAgICAgICAgICBsYWJlbDogJ09wdGlvbjUnXG4gICAgICAgIH1dLFxuICAgICAgICB2YWx1ZTogJydcbiAgICAgIH1cbiAgICB9XG4gIH1cbiZsdDsvc2NyaXB0Jmd0O1xuPC9jb2RlPjwvcHJlPjwvdGVtcGxhdGU+PC9kZW1vLWJsb2NrPjxoMyBpZD1cInNlbGVjdGV1ci1kZXNhY3RpdmVcIj48YSBjbGFzcz1cImhlYWRlci1hbmNob3JcIiBocmVmPVwiI3NlbGVjdGV1ci1kZXNhY3RpdmVcIj7CtjwvYT4gU8OpbGVjdGV1ciBkw6lzYWN0aXbDqTwvaDM+XG48cD5Wb3VzIHBvdXZleiBkw6lzYWN0aXZlciBsZSBjb21wb3NhbnQgbHVpLW3Dqm1lLjwvcD5cbjxkZW1vLWJsb2NrPlxuICAgICAgICA8ZGl2PjxwPkFqb3V0ZXogPGNvZGU+ZGlzYWJsZWQ8L2NvZGU+IMOgIDxjb2RlPmVsLXNlbGVjdDwvY29kZT4gcG91ciBsZSBkw6lzYWN0aXZlci48L3A+XG48L2Rpdj5cbiAgICAgICAgPHRlbXBsYXRlICNzb3VyY2U+PGVsZW1lbnQtZGVtbzIgLz48L3RlbXBsYXRlPlxuICAgICAgICA8dGVtcGxhdGUgI2hpZ2hsaWdodD48cHJlIHYtcHJlPjxjb2RlIGNsYXNzPVwiaHRtbFwiPiZsdDt0ZW1wbGF0ZSZndDtcbiAgJmx0O2VsLXNlbGVjdCB2LW1vZGVsPSZxdW90O3ZhbHVlJnF1b3Q7IGRpc2FibGVkIHBsYWNlaG9sZGVyPSZxdW90O1NlbGVjdCZxdW90OyZndDtcbiAgICAmbHQ7ZWwtb3B0aW9uXG4gICAgICB2LWZvcj0mcXVvdDtpdGVtIGluIG9wdGlvbnMmcXVvdDtcbiAgICAgIDprZXk9JnF1b3Q7aXRlbS52YWx1ZSZxdW90O1xuICAgICAgOmxhYmVsPSZxdW90O2l0ZW0ubGFiZWwmcXVvdDtcbiAgICAgIDp2YWx1ZT0mcXVvdDtpdGVtLnZhbHVlJnF1b3Q7Jmd0O1xuICAgICZsdDsvZWwtb3B0aW9uJmd0O1xuICAmbHQ7L2VsLXNlbGVjdCZndDtcbiZsdDsvdGVtcGxhdGUmZ3Q7XG5cbiZsdDtzY3JpcHQmZ3Q7XG4gIGV4cG9ydCBkZWZhdWx0IHtcbiAgICBkYXRhKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb3B0aW9uczogW3tcbiAgICAgICAgICB2YWx1ZTogJ09wdGlvbjEnLFxuICAgICAgICAgIGxhYmVsOiAnT3B0aW9uMSdcbiAgICAgICAgfSwge1xuICAgICAgICAgIHZhbHVlOiAnT3B0aW9uMicsXG4gICAgICAgICAgbGFiZWw6ICdPcHRpb24yJ1xuICAgICAgICB9LCB7XG4gICAgICAgICAgdmFsdWU6ICdPcHRpb24zJyxcbiAgICAgICAgICBsYWJlbDogJ09wdGlvbjMnXG4gICAgICAgIH0sIHtcbiAgICAgICAgICB2YWx1ZTogJ09wdGlvbjQnLFxuICAgICAgICAgIGxhYmVsOiAnT3B0aW9uNCdcbiAgICAgICAgfSwge1xuICAgICAgICAgIHZhbHVlOiAnT3B0aW9uNScsXG4gICAgICAgICAgbGFiZWw6ICdPcHRpb241J1xuICAgICAgICB9XSxcbiAgICAgICAgdmFsdWU6ICcnXG4gICAgICB9XG4gICAgfVxuICB9XG4mbHQ7L3NjcmlwdCZndDtcbjwvY29kZT48L3ByZT48L3RlbXBsYXRlPjwvZGVtby1ibG9jaz48aDMgaWQ9XCJlZmZhY2VyLWxhLXNlbGVjdGlvblwiPjxhIGNsYXNzPVwiaGVhZGVyLWFuY2hvclwiIGhyZWY9XCIjZWZmYWNlci1sYS1zZWxlY3Rpb25cIj7CtjwvYT4gRWZmYWNlciBsYSBzw6lsZWN0aW9uPC9oMz5cbjxwPlZvdXMgcG91dmV6IGFqb3V0ZXIgdW4gYm91dG9uIHBvdXIgZWZmYWNlciBsYSBzw6lsZWN0aW9uLjwvcD5cbjxkZW1vLWJsb2NrPlxuICAgICAgICA8ZGl2PjxwPkFqb3V0ZXogbCdhdHRyaWJ1dCA8Y29kZT5jbGVhcmFibGU8L2NvZGU+IMOgIDxjb2RlPmVsLXNlbGVjdDwvY29kZT4gZXQgbCdpY8O0bmUgZGUgZmVybWV0dXJlIHMnYWZmaWNoZXJhIGFwcsOocyB1bmUgc8OpbGVjdGlvbi4gTm90ZXogcXVlIDxjb2RlPmNsZWFyYWJsZTwvY29kZT4gbmUgbWFyY2hlIHF1J2F2ZWMgbGVzIHPDqWxlY3RldXJzIMOgIGNob2l4IHVuaXF1ZS48L3A+XG48L2Rpdj5cbiAgICAgICAgPHRlbXBsYXRlICNzb3VyY2U+PGVsZW1lbnQtZGVtbzMgLz48L3RlbXBsYXRlPlxuICAgICAgICA8dGVtcGxhdGUgI2hpZ2hsaWdodD48cHJlIHYtcHJlPjxjb2RlIGNsYXNzPVwiaHRtbFwiPiZsdDt0ZW1wbGF0ZSZndDtcbiAgJmx0O2VsLXNlbGVjdCB2LW1vZGVsPSZxdW90O3ZhbHVlJnF1b3Q7IGNsZWFyYWJsZSBwbGFjZWhvbGRlcj0mcXVvdDtTZWxlY3QmcXVvdDsmZ3Q7XG4gICAgJmx0O2VsLW9wdGlvblxuICAgICAgdi1mb3I9JnF1b3Q7aXRlbSBpbiBvcHRpb25zJnF1b3Q7XG4gICAgICA6a2V5PSZxdW90O2l0ZW0udmFsdWUmcXVvdDtcbiAgICAgIDpsYWJlbD0mcXVvdDtpdGVtLmxhYmVsJnF1b3Q7XG4gICAgICA6dmFsdWU9JnF1b3Q7aXRlbS52YWx1ZSZxdW90OyZndDtcbiAgICAmbHQ7L2VsLW9wdGlvbiZndDtcbiAgJmx0Oy9lbC1zZWxlY3QmZ3Q7XG4mbHQ7L3RlbXBsYXRlJmd0O1xuXG4mbHQ7c2NyaXB0Jmd0O1xuICBleHBvcnQgZGVmYXVsdCB7XG4gICAgZGF0YSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG9wdGlvbnM6IFt7XG4gICAgICAgICAgdmFsdWU6ICdPcHRpb24xJyxcbiAgICAgICAgICBsYWJlbDogJ09wdGlvbjEnXG4gICAgICAgIH0sIHtcbiAgICAgICAgICB2YWx1ZTogJ09wdGlvbjInLFxuICAgICAgICAgIGxhYmVsOiAnT3B0aW9uMidcbiAgICAgICAgfSwge1xuICAgICAgICAgIHZhbHVlOiAnT3B0aW9uMycsXG4gICAgICAgICAgbGFiZWw6ICdPcHRpb24zJ1xuICAgICAgICB9LCB7XG4gICAgICAgICAgdmFsdWU6ICdPcHRpb240JyxcbiAgICAgICAgICBsYWJlbDogJ09wdGlvbjQnXG4gICAgICAgIH0sIHtcbiAgICAgICAgICB2YWx1ZTogJ09wdGlvbjUnLFxuICAgICAgICAgIGxhYmVsOiAnT3B0aW9uNSdcbiAgICAgICAgfV0sXG4gICAgICAgIHZhbHVlOiAnJ1xuICAgICAgfVxuICAgIH1cbiAgfVxuJmx0Oy9zY3JpcHQmZ3Q7XG48L2NvZGU+PC9wcmU+PC90ZW1wbGF0ZT48L2RlbW8tYmxvY2s+PGgzIGlkPVwic2VsZWN0ZXVyLW11bHRpcGxlXCI+PGEgY2xhc3M9XCJoZWFkZXItYW5jaG9yXCIgaHJlZj1cIiNzZWxlY3RldXItbXVsdGlwbGVcIj7CtjwvYT4gU8OpbGVjdGV1ciBtdWx0aXBsZTwvaDM+XG48cD5MZXMgc8OpbGVjdGV1cnMgbXVsdGlwbGVzIHV0aWxpc2VudCBkZXMgdGFncyBwb3VyIGFmZmljaGVyIGxlcyBkaWZmw6lyZW50ZXMgb3B0aW9ucyBjaG9pc2llcy48L3A+XG48ZGVtby1ibG9jaz5cbiAgICAgICAgPGRpdj48cD5Bam91dGV6IDxjb2RlPm11bHRpcGxlPC9jb2RlPiDDoCA8Y29kZT5lbC1zZWxlY3Q8L2NvZGU+IHBvdXIgbGUgY2hhbmdlciBlbiBzw6lsZWN0ZXVyIG11bHRpcGxlLiBMYSB2YWxldXIgZGUgPGNvZGU+di1tb2RlbDwvY29kZT4gZGV2aWVudCB1biB0YWJsZWF1IGNvbnRlbmFudCB0b3V0ZXMgbGVzIG9wdGlvbnMuIFBhciBkw6lmYXV0IGxlcyBkaWZmw6lyZW50cyBjaG9peCBzb250IGFmZmljaMOpcyBzb3VzIGZvcm1lIGRlIHRhZ3MuIFZvdXMgcG91dmV6IHLDqWR1aXJlIGxldXIgbm9tYnJlIGVuIHV0aWxpc2FudCBsJ2F0dHJpYnV0IDxjb2RlPmNvbGxhcHNlLXRhZ3M8L2NvZGU+LjwvcD5cbjwvZGl2PlxuICAgICAgICA8dGVtcGxhdGUgI3NvdXJjZT48ZWxlbWVudC1kZW1vNCAvPjwvdGVtcGxhdGU+XG4gICAgICAgIDx0ZW1wbGF0ZSAjaGlnaGxpZ2h0PjxwcmUgdi1wcmU+PGNvZGUgY2xhc3M9XCJodG1sXCI+Jmx0O3RlbXBsYXRlJmd0O1xuICAmbHQ7ZWwtc2VsZWN0IHYtbW9kZWw9JnF1b3Q7dmFsdWUxJnF1b3Q7IG11bHRpcGxlIHBsYWNlaG9sZGVyPSZxdW90O1NlbGVjdCZxdW90OyZndDtcbiAgICAmbHQ7ZWwtb3B0aW9uXG4gICAgICB2LWZvcj0mcXVvdDtpdGVtIGluIG9wdGlvbnMmcXVvdDtcbiAgICAgIDprZXk9JnF1b3Q7aXRlbS52YWx1ZSZxdW90O1xuICAgICAgOmxhYmVsPSZxdW90O2l0ZW0ubGFiZWwmcXVvdDtcbiAgICAgIDp2YWx1ZT0mcXVvdDtpdGVtLnZhbHVlJnF1b3Q7Jmd0O1xuICAgICZsdDsvZWwtb3B0aW9uJmd0O1xuICAmbHQ7L2VsLXNlbGVjdCZndDtcblxuICAmbHQ7ZWwtc2VsZWN0XG4gICAgdi1tb2RlbD0mcXVvdDt2YWx1ZTImcXVvdDtcbiAgICBtdWx0aXBsZVxuICAgIGNvbGxhcHNlLXRhZ3NcbiAgICBzdHlsZT0mcXVvdDttYXJnaW4tbGVmdDogMjBweDsmcXVvdDtcbiAgICBwbGFjZWhvbGRlcj0mcXVvdDtTZWxlY3QmcXVvdDsmZ3Q7XG4gICAgJmx0O2VsLW9wdGlvblxuICAgICAgdi1mb3I9JnF1b3Q7aXRlbSBpbiBvcHRpb25zJnF1b3Q7XG4gICAgICA6a2V5PSZxdW90O2l0ZW0udmFsdWUmcXVvdDtcbiAgICAgIDpsYWJlbD0mcXVvdDtpdGVtLmxhYmVsJnF1b3Q7XG4gICAgICA6dmFsdWU9JnF1b3Q7aXRlbS52YWx1ZSZxdW90OyZndDtcbiAgICAmbHQ7L2VsLW9wdGlvbiZndDtcbiAgJmx0Oy9lbC1zZWxlY3QmZ3Q7XG4mbHQ7L3RlbXBsYXRlJmd0O1xuXG4mbHQ7c2NyaXB0Jmd0O1xuICBleHBvcnQgZGVmYXVsdCB7XG4gICAgZGF0YSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG9wdGlvbnM6IFt7XG4gICAgICAgICAgdmFsdWU6ICdPcHRpb24xJyxcbiAgICAgICAgICBsYWJlbDogJ09wdGlvbjEnXG4gICAgICAgIH0sIHtcbiAgICAgICAgICB2YWx1ZTogJ09wdGlvbjInLFxuICAgICAgICAgIGxhYmVsOiAnT3B0aW9uMidcbiAgICAgICAgfSwge1xuICAgICAgICAgIHZhbHVlOiAnT3B0aW9uMycsXG4gICAgICAgICAgbGFiZWw6ICdPcHRpb24zJ1xuICAgICAgICB9LCB7XG4gICAgICAgICAgdmFsdWU6ICdPcHRpb240JyxcbiAgICAgICAgICBsYWJlbDogJ09wdGlvbjQnXG4gICAgICAgIH0sIHtcbiAgICAgICAgICB2YWx1ZTogJ09wdGlvbjUnLFxuICAgICAgICAgIGxhYmVsOiAnT3B0aW9uNSdcbiAgICAgICAgfV0sXG4gICAgICAgIHZhbHVlMTogW10sXG4gICAgICAgIHZhbHVlMjogW11cbiAgICAgIH1cbiAgICB9XG4gIH1cbiZsdDsvc2NyaXB0Jmd0O1xuPC9jb2RlPjwvcHJlPjwvdGVtcGxhdGU+PC9kZW1vLWJsb2NrPjxoMyBpZD1cInRlbXBsYXRlLXBlcnNvbm5hbGlzZVwiPjxhIGNsYXNzPVwiaGVhZGVyLWFuY2hvclwiIGhyZWY9XCIjdGVtcGxhdGUtcGVyc29ubmFsaXNlXCI+wrY8L2E+IFRlbXBsYXRlIHBlcnNvbm5hbGlzw6k8L2gzPlxuPHA+Vm91cyBwb3V2ZXogZMOpZmluaXIgdW4gdGVtcGxhdGUgSFRNTCBwb3VyIGwnYWZmaWNoYWdlIGRlcyBvcHRpb25zLjwvcD5cbjxkZW1vLWJsb2NrPlxuICAgICAgICA8ZGl2PjxwPkluc8OpcmV6IHZvdHJlIHRlbXBsYXRlIGRhbnMgbGUgc2xvdCBkZSA8Y29kZT5lbC1vcHRpb248L2NvZGU+LjwvcD5cbjwvZGl2PlxuICAgICAgICA8dGVtcGxhdGUgI3NvdXJjZT48ZWxlbWVudC1kZW1vNSAvPjwvdGVtcGxhdGU+XG4gICAgICAgIDx0ZW1wbGF0ZSAjaGlnaGxpZ2h0PjxwcmUgdi1wcmU+PGNvZGUgY2xhc3M9XCJodG1sXCI+Jmx0O3RlbXBsYXRlJmd0O1xuICAmbHQ7ZWwtc2VsZWN0IHYtbW9kZWw9JnF1b3Q7dmFsdWUmcXVvdDsgcGxhY2Vob2xkZXI9JnF1b3Q7U2VsZWN0JnF1b3Q7Jmd0O1xuICAgICZsdDtlbC1vcHRpb25cbiAgICAgIHYtZm9yPSZxdW90O2l0ZW0gaW4gY2l0aWVzJnF1b3Q7XG4gICAgICA6a2V5PSZxdW90O2l0ZW0udmFsdWUmcXVvdDtcbiAgICAgIDpsYWJlbD0mcXVvdDtpdGVtLmxhYmVsJnF1b3Q7XG4gICAgICA6dmFsdWU9JnF1b3Q7aXRlbS52YWx1ZSZxdW90OyZndDtcbiAgICAgICZsdDtzcGFuIHN0eWxlPSZxdW90O2Zsb2F0OiBsZWZ0JnF1b3Q7Jmd0O3t7IGl0ZW0ubGFiZWwgfX0mbHQ7L3NwYW4mZ3Q7XG4gICAgICAmbHQ7c3BhbiBzdHlsZT0mcXVvdDtmbG9hdDogcmlnaHQ7IGNvbG9yOiAjODQ5MmE2OyBmb250LXNpemU6IDEzcHgmcXVvdDsmZ3Q7e3sgaXRlbS52YWx1ZSB9fSZsdDsvc3BhbiZndDtcbiAgICAmbHQ7L2VsLW9wdGlvbiZndDtcbiAgJmx0Oy9lbC1zZWxlY3QmZ3Q7XG4mbHQ7L3RlbXBsYXRlJmd0O1xuXG4mbHQ7c2NyaXB0Jmd0O1xuICBleHBvcnQgZGVmYXVsdCB7XG4gICAgZGF0YSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNpdGllczogW3tcbiAgICAgICAgICB2YWx1ZTogJ0JlaWppbmcnLFxuICAgICAgICAgIGxhYmVsOiAnQmVpamluZydcbiAgICAgICAgfSwge1xuICAgICAgICAgIHZhbHVlOiAnU2hhbmdoYWknLFxuICAgICAgICAgIGxhYmVsOiAnU2hhbmdoYWknXG4gICAgICAgIH0sIHtcbiAgICAgICAgICB2YWx1ZTogJ05hbmppbmcnLFxuICAgICAgICAgIGxhYmVsOiAnTmFuamluZydcbiAgICAgICAgfSwge1xuICAgICAgICAgIHZhbHVlOiAnQ2hlbmdkdScsXG4gICAgICAgICAgbGFiZWw6ICdDaGVuZ2R1J1xuICAgICAgICB9LCB7XG4gICAgICAgICAgdmFsdWU6ICdTaGVuemhlbicsXG4gICAgICAgICAgbGFiZWw6ICdTaGVuemhlbidcbiAgICAgICAgfSwge1xuICAgICAgICAgIHZhbHVlOiAnR3Vhbmd6aG91JyxcbiAgICAgICAgICBsYWJlbDogJ0d1YW5nemhvdSdcbiAgICAgICAgfV0sXG4gICAgICAgIHZhbHVlOiAnJ1xuICAgICAgfVxuICAgIH1cbiAgfVxuJmx0Oy9zY3JpcHQmZ3Q7XG48L2NvZGU+PC9wcmU+PC90ZW1wbGF0ZT48L2RlbW8tYmxvY2s+PGgzIGlkPVwiZ3JvdXBlci1sZXMtb3B0aW9uc1wiPjxhIGNsYXNzPVwiaGVhZGVyLWFuY2hvclwiIGhyZWY9XCIjZ3JvdXBlci1sZXMtb3B0aW9uc1wiPsK2PC9hPiBHcm91cGVyIGxlcyBvcHRpb25zPC9oMz5cbjxwPlZvdXMgcG91dmV6IGTDqWZpbmlyIGRlcyBncm91cGVzIHBvdXIgbGVzIG9wdGlvbnMgZHUgbWVudS48L3A+XG48ZGVtby1ibG9jaz5cbiAgICAgICAgPGRpdj48cD5VdGlsaXNleiA8Y29kZT5lbC1vcHRpb24tZ3JvdXA8L2NvZGU+IHBvdXIgZ3JvdXBlciBsZXMgb3B0aW9ucy4gTCdhdHRyaWJ1dCA8Y29kZT5sYWJlbDwvY29kZT4gZMOpZmluaXQgbGUgbm9tIGR1IGdyb3VwZS48L3A+XG48L2Rpdj5cbiAgICAgICAgPHRlbXBsYXRlICNzb3VyY2U+PGVsZW1lbnQtZGVtbzYgLz48L3RlbXBsYXRlPlxuICAgICAgICA8dGVtcGxhdGUgI2hpZ2hsaWdodD48cHJlIHYtcHJlPjxjb2RlIGNsYXNzPVwiaHRtbFwiPiZsdDt0ZW1wbGF0ZSZndDtcbiAgJmx0O2VsLXNlbGVjdCB2LW1vZGVsPSZxdW90O3ZhbHVlJnF1b3Q7IHBsYWNlaG9sZGVyPSZxdW90O1NlbGVjdCZxdW90OyZndDtcbiAgICAmbHQ7ZWwtb3B0aW9uLWdyb3VwXG4gICAgICB2LWZvcj0mcXVvdDtncm91cCBpbiBvcHRpb25zJnF1b3Q7XG4gICAgICA6a2V5PSZxdW90O2dyb3VwLmxhYmVsJnF1b3Q7XG4gICAgICA6bGFiZWw9JnF1b3Q7Z3JvdXAubGFiZWwmcXVvdDsmZ3Q7XG4gICAgICAmbHQ7ZWwtb3B0aW9uXG4gICAgICAgIHYtZm9yPSZxdW90O2l0ZW0gaW4gZ3JvdXAub3B0aW9ucyZxdW90O1xuICAgICAgICA6a2V5PSZxdW90O2l0ZW0udmFsdWUmcXVvdDtcbiAgICAgICAgOmxhYmVsPSZxdW90O2l0ZW0ubGFiZWwmcXVvdDtcbiAgICAgICAgOnZhbHVlPSZxdW90O2l0ZW0udmFsdWUmcXVvdDsmZ3Q7XG4gICAgICAmbHQ7L2VsLW9wdGlvbiZndDtcbiAgICAmbHQ7L2VsLW9wdGlvbi1ncm91cCZndDtcbiAgJmx0Oy9lbC1zZWxlY3QmZ3Q7XG4mbHQ7L3RlbXBsYXRlJmd0O1xuXG4mbHQ7c2NyaXB0Jmd0O1xuICBleHBvcnQgZGVmYXVsdCB7XG4gICAgZGF0YSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG9wdGlvbnM6IFt7XG4gICAgICAgICAgbGFiZWw6ICdWaWxsZXMgY8OpbMOoYnJlcycsXG4gICAgICAgICAgb3B0aW9uczogW3tcbiAgICAgICAgICAgIHZhbHVlOiAnU2hhbmdoYWknLFxuICAgICAgICAgICAgbGFiZWw6ICdTaGFuZ2hhaSdcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICB2YWx1ZTogJ0JlaWppbmcnLFxuICAgICAgICAgICAgbGFiZWw6ICdCZWlqaW5nJ1xuICAgICAgICAgIH1dXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBsYWJlbDogJ05vbSBkZSB2aWxsZScsXG4gICAgICAgICAgb3B0aW9uczogW3tcbiAgICAgICAgICAgIHZhbHVlOiAnQ2hlbmdkdScsXG4gICAgICAgICAgICBsYWJlbDogJ0NoZW5nZHUnXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgdmFsdWU6ICdTaGVuemhlbicsXG4gICAgICAgICAgICBsYWJlbDogJ1NoZW56aGVuJ1xuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIHZhbHVlOiAnR3Vhbmd6aG91JyxcbiAgICAgICAgICAgIGxhYmVsOiAnR3Vhbmd6aG91J1xuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIHZhbHVlOiAnRGFsaWFuJyxcbiAgICAgICAgICAgIGxhYmVsOiAnRGFsaWFuJ1xuICAgICAgICAgIH1dXG4gICAgICAgIH1dLFxuICAgICAgICB2YWx1ZTogJydcbiAgICAgIH1cbiAgICB9XG4gIH1cbiZsdDsvc2NyaXB0Jmd0O1xuPC9jb2RlPjwvcHJlPjwvdGVtcGxhdGU+PC9kZW1vLWJsb2NrPjxoMyBpZD1cImZpbHRyYWdlLWRlcy1vcHRpb25zXCI+PGEgY2xhc3M9XCJoZWFkZXItYW5jaG9yXCIgaHJlZj1cIiNmaWx0cmFnZS1kZXMtb3B0aW9uc1wiPsK2PC9hPiBGaWx0cmFnZSBkZXMgb3B0aW9uczwvaDM+XG48cD5Wb3VzIHBvdXZleiBham91dGVyIHVuIG1vZGUgZGUgZmlsdHJhZ2UgcG91ciB0cm91dmVyIGxlcyBvcHRpb25zIGTDqXNpcsOpZXMgcGx1cyByYXBpZGVtZW50LjwvcD5cbjxkZW1vLWJsb2NrPlxuICAgICAgICA8ZGl2PjxwPkFqb3V0ZXogPGNvZGU+ZmlsdGVyYWJsZTwvY29kZT4gw6AgPGNvZGU+ZWwtc2VsZWN0PC9jb2RlPiBwb3VyIGFjdGl2ZXIgbGUgZmlsdHJhZ2UuIFBhciBkw6lmYXV0LCBTZWxlY3QgY2hlcmNoZXJhIGxlcyBvcHRpb25zIGRvbnQgbGUgPGNvZGU+bGFiZWw8L2NvZGU+IGNvbnRpZW50IGxhIHZhbGV1ciBkdSBmaWx0cmUuIFNpIHZvdXMgcHLDqWbDqXJleiB1bmUgYXV0cmUgc3RyYXTDqWdpZSBkZSBmaWx0cmFnZSwgdXRpbGlzZXogPGNvZGU+ZmlsdGVyLW1ldGhvZDwvY29kZT4uIEMnZXN0IHVuZSA8Y29kZT5GdW5jdGlvbjwvY29kZT4gcXVpIGVzdCBhcHBlbMOpZSBxdWFuZCBsYSB2YWxldXIgY2hhbmdlLCBhdmVjIHBvdXIgcGFyYW3DqHRyZSBsYSB2YWxldXIgY291cmFudGUuPC9wPlxuPC9kaXY+XG4gICAgICAgIDx0ZW1wbGF0ZSAjc291cmNlPjxlbGVtZW50LWRlbW83IC8+PC90ZW1wbGF0ZT5cbiAgICAgICAgPHRlbXBsYXRlICNoaWdobGlnaHQ+PHByZSB2LXByZT48Y29kZSBjbGFzcz1cImh0bWxcIj4mbHQ7dGVtcGxhdGUmZ3Q7XG4gICZsdDtlbC1zZWxlY3Qgdi1tb2RlbD0mcXVvdDt2YWx1ZSZxdW90OyBmaWx0ZXJhYmxlIHBsYWNlaG9sZGVyPSZxdW90O1NlbGVjdCZxdW90OyZndDtcbiAgICAmbHQ7ZWwtb3B0aW9uXG4gICAgICB2LWZvcj0mcXVvdDtpdGVtIGluIG9wdGlvbnMmcXVvdDtcbiAgICAgIDprZXk9JnF1b3Q7aXRlbS52YWx1ZSZxdW90O1xuICAgICAgOmxhYmVsPSZxdW90O2l0ZW0ubGFiZWwmcXVvdDtcbiAgICAgIDp2YWx1ZT0mcXVvdDtpdGVtLnZhbHVlJnF1b3Q7Jmd0O1xuICAgICZsdDsvZWwtb3B0aW9uJmd0O1xuICAmbHQ7L2VsLXNlbGVjdCZndDtcbiZsdDsvdGVtcGxhdGUmZ3Q7XG5cbiZsdDtzY3JpcHQmZ3Q7XG4gIGV4cG9ydCBkZWZhdWx0IHtcbiAgICBkYXRhKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb3B0aW9uczogW3tcbiAgICAgICAgICB2YWx1ZTogJ09wdGlvbjEnLFxuICAgICAgICAgIGxhYmVsOiAnT3B0aW9uMSdcbiAgICAgICAgfSwge1xuICAgICAgICAgIHZhbHVlOiAnT3B0aW9uMicsXG4gICAgICAgICAgbGFiZWw6ICdPcHRpb24yJ1xuICAgICAgICB9LCB7XG4gICAgICAgICAgdmFsdWU6ICdPcHRpb24zJyxcbiAgICAgICAgICBsYWJlbDogJ09wdGlvbjMnXG4gICAgICAgIH0sIHtcbiAgICAgICAgICB2YWx1ZTogJ09wdGlvbjQnLFxuICAgICAgICAgIGxhYmVsOiAnT3B0aW9uNCdcbiAgICAgICAgfSwge1xuICAgICAgICAgIHZhbHVlOiAnT3B0aW9uNScsXG4gICAgICAgICAgbGFiZWw6ICdPcHRpb241J1xuICAgICAgICB9XSxcbiAgICAgICAgdmFsdWU6ICcnXG4gICAgICB9XG4gICAgfVxuICB9XG4mbHQ7L3NjcmlwdCZndDtcbjwvY29kZT48L3ByZT48L3RlbXBsYXRlPjwvZGVtby1ibG9jaz48aDMgaWQ9XCJyZWNoZXJjaGUtYS1kaXN0YW5jZVwiPjxhIGNsYXNzPVwiaGVhZGVyLWFuY2hvclwiIGhyZWY9XCIjcmVjaGVyY2hlLWEtZGlzdGFuY2VcIj7CtjwvYT4gUmVjaGVyY2hlIMOgIGRpc3RhbmNlPC9oMz5cbjxwPlZvdXMgcG91dmV6IGFsbGVyIGNoZXJjaGVyIGxlcyBvcHRpb25zIHN1ciBsZSBzZXJ2ZXVyIGRlIG1hbmnDqHJlIGR5bmFtaXF1ZS48L3A+XG48ZGVtby1ibG9jaz5cbiAgICAgICAgPGRpdj48cD5Bam91dGV6IDxjb2RlPmZpbHRlcmFibGU8L2NvZGU+IGV0IDxjb2RlPnJlbW90ZTwvY29kZT4gcG91ciBhY3RpdmVyIGxhIHJlY2hlcmNoZSBkaXN0YW50ZSwgYWluc2kgcXVlIDxjb2RlPnJlbW90ZS1tZXRob2Q8L2NvZGU+LiBDZXR0ZSBkZXJuacOocmUgZXN0IHVuZSA8Y29kZT5GdW5jdGlvbjwvY29kZT4gcXVpIGVzdCBhcHBlbMOpZSBsb3JzcXVlIGxhIHZhbGV1ciBjaGFuZ2UsIGF2ZWMgcG91ciBwYXJhbcOodHJlIGxhIHZhbGV1ciBjb3VyYW50ZS4gTm90ZXMgcXVlIHNpIDxjb2RlPmVsLW9wdGlvbjwvY29kZT4gZXN0IHJlbmR1IGRhbnMgdW5lIGRpcmVjdGl2ZSA8Y29kZT52LWZvcjwvY29kZT4sIHZvdXMgZGV2cmlleiBham91dGVyIGwnYXR0cmlidXQgPGNvZGU+a2V5PC9jb2RlPiBhdXggPGNvZGU+ZWwtb3B0aW9uPC9jb2RlPi4gQ2V0dGUgdmFsZXVyIGRvaXQgdW5pcXVlLCBjb21tZSA8Y29kZT5pdGVtLnZhbHVlPC9jb2RlPiBkYW5zIGwnZXhlbXBsZSBzdWl2YW50LjwvcD5cbjwvZGl2PlxuICAgICAgICA8dGVtcGxhdGUgI3NvdXJjZT48ZWxlbWVudC1kZW1vOCAvPjwvdGVtcGxhdGU+XG4gICAgICAgIDx0ZW1wbGF0ZSAjaGlnaGxpZ2h0PjxwcmUgdi1wcmU+PGNvZGUgY2xhc3M9XCJodG1sXCI+Jmx0O3RlbXBsYXRlJmd0O1xuICAmbHQ7ZWwtc2VsZWN0XG4gICAgdi1tb2RlbD0mcXVvdDt2YWx1ZSZxdW90O1xuICAgIG11bHRpcGxlXG4gICAgZmlsdGVyYWJsZVxuICAgIHJlbW90ZVxuICAgIHJlc2VydmUta2V5d29yZFxuICAgIHBsYWNlaG9sZGVyPSZxdW90O0VudHJleiB1biBtb3QtY2zDqSZxdW90O1xuICAgIDpyZW1vdGUtbWV0aG9kPSZxdW90O3JlbW90ZU1ldGhvZCZxdW90O1xuICAgIDpsb2FkaW5nPSZxdW90O2xvYWRpbmcmcXVvdDsmZ3Q7XG4gICAgJmx0O2VsLW9wdGlvblxuICAgICAgdi1mb3I9JnF1b3Q7aXRlbSBpbiBvcHRpb25zJnF1b3Q7XG4gICAgICA6a2V5PSZxdW90O2l0ZW0udmFsdWUmcXVvdDtcbiAgICAgIDpsYWJlbD0mcXVvdDtpdGVtLmxhYmVsJnF1b3Q7XG4gICAgICA6dmFsdWU9JnF1b3Q7aXRlbS52YWx1ZSZxdW90OyZndDtcbiAgICAmbHQ7L2VsLW9wdGlvbiZndDtcbiAgJmx0Oy9lbC1zZWxlY3QmZ3Q7XG4mbHQ7L3RlbXBsYXRlJmd0O1xuXG4mbHQ7c2NyaXB0Jmd0O1xuICBleHBvcnQgZGVmYXVsdCB7XG4gICAgZGF0YSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG9wdGlvbnM6IFtdLFxuICAgICAgICB2YWx1ZTogW10sXG4gICAgICAgIGxpc3Q6IFtdLFxuICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgc3RhdGVzOiBbJnF1b3Q7QWxhYmFtYSZxdW90OywgJnF1b3Q7QWxhc2thJnF1b3Q7LCAmcXVvdDtBcml6b25hJnF1b3Q7LFxuICAgICAgICAmcXVvdDtBcmthbnNhcyZxdW90OywgJnF1b3Q7Q2FsaWZvcm5pYSZxdW90OywgJnF1b3Q7Q29sb3JhZG8mcXVvdDssXG4gICAgICAgICZxdW90O0Nvbm5lY3RpY3V0JnF1b3Q7LCAmcXVvdDtEZWxhd2FyZSZxdW90OywgJnF1b3Q7RmxvcmlkYSZxdW90OyxcbiAgICAgICAgJnF1b3Q7R2VvcmdpYSZxdW90OywgJnF1b3Q7SGF3YWlpJnF1b3Q7LCAmcXVvdDtJZGFobyZxdW90OywgJnF1b3Q7SWxsaW5vaXMmcXVvdDssXG4gICAgICAgICZxdW90O0luZGlhbmEmcXVvdDssICZxdW90O0lvd2EmcXVvdDssICZxdW90O0thbnNhcyZxdW90OywgJnF1b3Q7S2VudHVja3kmcXVvdDssXG4gICAgICAgICZxdW90O0xvdWlzaWFuYSZxdW90OywgJnF1b3Q7TWFpbmUmcXVvdDssICZxdW90O01hcnlsYW5kJnF1b3Q7LFxuICAgICAgICAmcXVvdDtNYXNzYWNodXNldHRzJnF1b3Q7LCAmcXVvdDtNaWNoaWdhbiZxdW90OywgJnF1b3Q7TWlubmVzb3RhJnF1b3Q7LFxuICAgICAgICAmcXVvdDtNaXNzaXNzaXBwaSZxdW90OywgJnF1b3Q7TWlzc291cmkmcXVvdDssICZxdW90O01vbnRhbmEmcXVvdDssXG4gICAgICAgICZxdW90O05lYnJhc2thJnF1b3Q7LCAmcXVvdDtOZXZhZGEmcXVvdDssICZxdW90O05ldyBIYW1wc2hpcmUmcXVvdDssXG4gICAgICAgICZxdW90O05ldyBKZXJzZXkmcXVvdDssICZxdW90O05ldyBNZXhpY28mcXVvdDssICZxdW90O05ldyBZb3JrJnF1b3Q7LFxuICAgICAgICAmcXVvdDtOb3J0aCBDYXJvbGluYSZxdW90OywgJnF1b3Q7Tm9ydGggRGFrb3RhJnF1b3Q7LCAmcXVvdDtPaGlvJnF1b3Q7LFxuICAgICAgICAmcXVvdDtPa2xhaG9tYSZxdW90OywgJnF1b3Q7T3JlZ29uJnF1b3Q7LCAmcXVvdDtQZW5uc3lsdmFuaWEmcXVvdDssXG4gICAgICAgICZxdW90O1Job2RlIElzbGFuZCZxdW90OywgJnF1b3Q7U291dGggQ2Fyb2xpbmEmcXVvdDssXG4gICAgICAgICZxdW90O1NvdXRoIERha290YSZxdW90OywgJnF1b3Q7VGVubmVzc2VlJnF1b3Q7LCAmcXVvdDtUZXhhcyZxdW90OyxcbiAgICAgICAgJnF1b3Q7VXRhaCZxdW90OywgJnF1b3Q7VmVybW9udCZxdW90OywgJnF1b3Q7VmlyZ2luaWEmcXVvdDssXG4gICAgICAgICZxdW90O1dhc2hpbmd0b24mcXVvdDssICZxdW90O1dlc3QgVmlyZ2luaWEmcXVvdDssICZxdW90O1dpc2NvbnNpbiZxdW90OyxcbiAgICAgICAgJnF1b3Q7V3lvbWluZyZxdW90O11cbiAgICAgIH1cbiAgICB9LFxuICAgIG1vdW50ZWQoKSB7XG4gICAgICB0aGlzLmxpc3QgPSB0aGlzLnN0YXRlcy5tYXAoaXRlbSA9Jmd0OyB7XG4gICAgICAgIHJldHVybiB7IHZhbHVlOiBgdmFsdWU6JHtpdGVtfWAsIGxhYmVsOiBgbGFiZWw6JHtpdGVtfWAgfTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgcmVtb3RlTWV0aG9kKHF1ZXJ5KSB7XG4gICAgICAgIGlmIChxdWVyeSAhPT0gJycpIHtcbiAgICAgICAgICB0aGlzLmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPSZndDsge1xuICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLmxpc3QuZmlsdGVyKGl0ZW0gPSZndDsge1xuICAgICAgICAgICAgICByZXR1cm4gaXRlbS5sYWJlbC50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgICAgICAgLmluZGV4T2YocXVlcnkudG9Mb3dlckNhc2UoKSkgJmd0OyAtMTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sIDIwMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5vcHRpb25zID0gW107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiZsdDsvc2NyaXB0Jmd0O1xuPC9jb2RlPjwvcHJlPjwvdGVtcGxhdGU+PC9kZW1vLWJsb2NrPjxoMyBpZD1cImNyZWVyLWRlcy1vcHRpb25zXCI+PGEgY2xhc3M9XCJoZWFkZXItYW5jaG9yXCIgaHJlZj1cIiNjcmVlci1kZXMtb3B0aW9uc1wiPsK2PC9hPiBDcsOpZXIgZGVzIG9wdGlvbnM8L2gzPlxuPHA+Vm91cyBwb3V2ZXogZW50cmVyIGRlcyBjaG9peCBkYW5zIGxlIGNoYW1wIGRlIHPDqWxlY3Rpb24gcXVpIG5lIHNvbnQgcGFzIGluY2x1c2VzIGRhbnMgbGUgbWVudS48L3A+XG48ZGVtby1ibG9jaz5cbiAgICAgICAgPGRpdj48cD5FbiB1dGlsaXNhbnQgPGNvZGU+YWxsb3ctY3JlYXRlPC9jb2RlPiwgcGV1dmVudCBjcsOpZXIgZGUgbm91dmVhdXggY2hvaXggZW4gbGVzIGVudHJhbnQgZGFucyBsZSBjaGFtcCBkJ2lucHV0LiBDZXR0ZSBvcHRpb24gbmUgbWFyY2hlIHF1ZSBzaSA8Y29kZT5maWx0ZXJhYmxlPC9jb2RlPiBlc3QgYWN0aXbDqS4gQ2V0dGUgZXhlbXBsZSBtb250cmUgYXVzc2kgPGNvZGU+ZGVmYXVsdC1maXJzdC1vcHRpb248L2NvZGU+LCBxdWkgcGVybWV0IGRlIHPDqWxlY3Rpb25uZXIgbGEgcHJlbWnDqHJlIG9wdGlvbiBlbiBwcmVzc2FudCBFbnRyw6llIHNhbnMgYXZvaXIgw6AgdXRpbGlzZXIgbGEgc291cmlzIG91IGxlIGNsYXZpZXIuPC9wPlxuPC9kaXY+XG4gICAgICAgIDx0ZW1wbGF0ZSAjc291cmNlPjxlbGVtZW50LWRlbW85IC8+PC90ZW1wbGF0ZT5cbiAgICAgICAgPHRlbXBsYXRlICNoaWdobGlnaHQ+PHByZSB2LXByZT48Y29kZSBjbGFzcz1cImh0bWxcIj4mbHQ7dGVtcGxhdGUmZ3Q7XG4gICZsdDtlbC1zZWxlY3RcbiAgICB2LW1vZGVsPSZxdW90O3ZhbHVlJnF1b3Q7XG4gICAgbXVsdGlwbGVcbiAgICBmaWx0ZXJhYmxlXG4gICAgYWxsb3ctY3JlYXRlXG4gICAgZGVmYXVsdC1maXJzdC1vcHRpb25cbiAgICBwbGFjZWhvbGRlcj0mcXVvdDtDaG9pc2lzc2V6IGxlcyB0YWdzIGRlIHZvcyBhcnRpY2xlcyZxdW90OyZndDtcbiAgICAmbHQ7ZWwtb3B0aW9uXG4gICAgICB2LWZvcj0mcXVvdDtpdGVtIGluIG9wdGlvbnMmcXVvdDtcbiAgICAgIDprZXk9JnF1b3Q7aXRlbS52YWx1ZSZxdW90O1xuICAgICAgOmxhYmVsPSZxdW90O2l0ZW0ubGFiZWwmcXVvdDtcbiAgICAgIDp2YWx1ZT0mcXVvdDtpdGVtLnZhbHVlJnF1b3Q7Jmd0O1xuICAgICZsdDsvZWwtb3B0aW9uJmd0O1xuICAmbHQ7L2VsLXNlbGVjdCZndDtcbiZsdDsvdGVtcGxhdGUmZ3Q7XG5cbiZsdDtzY3JpcHQmZ3Q7XG4gIGV4cG9ydCBkZWZhdWx0IHtcbiAgICBkYXRhKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb3B0aW9uczogW3tcbiAgICAgICAgICB2YWx1ZTogJ0hUTUwnLFxuICAgICAgICAgIGxhYmVsOiAnSFRNTCdcbiAgICAgICAgfSwge1xuICAgICAgICAgIHZhbHVlOiAnQ1NTJyxcbiAgICAgICAgICBsYWJlbDogJ0NTUydcbiAgICAgICAgfSwge1xuICAgICAgICAgIHZhbHVlOiAnSmF2YVNjcmlwdCcsXG4gICAgICAgICAgbGFiZWw6ICdKYXZhU2NyaXB0J1xuICAgICAgICB9XSxcbiAgICAgICAgdmFsdWU6IFtdXG4gICAgICB9XG4gICAgfVxuICB9XG4mbHQ7L3NjcmlwdCZndDtcbjwvY29kZT48L3ByZT48L3RlbXBsYXRlPjwvZGVtby1ibG9jaz48ZGl2IGNsYXNzPVwidGlwXCI+XG48cD5TaSBsYSB2YWxldXIgZGUgU2VsZWN0IGVzdCB1biBvYmpldCwgYXNzdXJlei12b3VzIGQndXRpbGlzZXIgPGNvZGU+dmFsdWUta2V5PC9jb2RlPiBjb21tZSBpZGVudGlmaWFudCB1bmlxdWUuPC9wPlxuPC9kaXY+XG48aDMgaWQ9XCJhdHRyaWJ1dHMtZGUtc2VsZWN0XCI+PGEgY2xhc3M9XCJoZWFkZXItYW5jaG9yXCIgaHJlZj1cIiNhdHRyaWJ1dHMtZGUtc2VsZWN0XCI+wrY8L2E+IEF0dHJpYnV0cyBkZSBTZWxlY3Q8L2gzPlxuPHRhYmxlPlxuPHRoZWFkPlxuPHRyPlxuPHRoPkF0dHJpYnV0PC90aD5cbjx0aD5EZXNjcmlwdGlvbjwvdGg+XG48dGg+VHlwZTwvdGg+XG48dGg+VmFsZXVycyBhY2NlcHTDqWVzPC90aD5cbjx0aD5Ew6lmYXV0PC90aD5cbjwvdHI+XG48L3RoZWFkPlxuPHRib2R5PlxuPHRyPlxuPHRkPnZhbHVlIC8gdi1tb2RlbDwvdGQ+XG48dGQ+TGEgdmFsZXVyIGxpw6llLjwvdGQ+XG48dGQ+Ym9vbGVhbiAvIHN0cmluZyAvIG51bWJlcjwvdGQ+XG48dGQ+4oCUPC90ZD5cbjx0ZD7igJQ8L3RkPlxuPC90cj5cbjx0cj5cbjx0ZD5tdWx0aXBsZTwvdGQ+XG48dGQ+U2kgbGEgc8OpbGVjdGlvbiBtdWx0aXBsZSBlc3QgYWN0aXbDqWUuPC90ZD5cbjx0ZD5ib29sZWFuPC90ZD5cbjx0ZD7igJQ8L3RkPlxuPHRkPmZhbHNlPC90ZD5cbjwvdHI+XG48dHI+XG48dGQ+ZGlzYWJsZWQ8L3RkPlxuPHRkPlNpIGxlIHPDqWxlY3RldXIgZXN0IGTDqXNhY3RpdsOpLjwvdGQ+XG48dGQ+Ym9vbGVhbjwvdGQ+XG48dGQ+4oCUPC90ZD5cbjx0ZD5mYWxzZTwvdGQ+XG48L3RyPlxuPHRyPlxuPHRkPnZhbHVlLWtleTwvdGQ+XG48dGQ+SWRlbnRpZmlhbnQgdW5pcXVlIHBvdXIgbGEgdmFsZXVyLCByZXF1aXMgcXVhbmQgbGEgdmFsZXVyIGVzdCB1biBvYmpldC48L3RkPlxuPHRkPnN0cmluZzwvdGQ+XG48dGQ+4oCUPC90ZD5cbjx0ZD52YWx1ZTwvdGQ+XG48L3RyPlxuPHRyPlxuPHRkPnNpemU8L3RkPlxuPHRkPlRhaWxsZSBkZSBsJ0lucHV0LjwvdGQ+XG48dGQ+c3RyaW5nPC90ZD5cbjx0ZD5sYXJnZS9zbWFsbC9taW5pPC90ZD5cbjx0ZD7igJQ8L3RkPlxuPC90cj5cbjx0cj5cbjx0ZD5jbGVhcmFibGU8L3RkPlxuPHRkPlNpIGxhIHPDqWxlY3Rpb24gZXN0IGVmZmHDp2FibGUuPC90ZD5cbjx0ZD5ib29sZWFuPC90ZD5cbjx0ZD7igJQ8L3RkPlxuPHRkPmZhbHNlPC90ZD5cbjwvdHI+XG48dHI+XG48dGQ+Y29sbGFwc2UtdGFnczwvdGQ+XG48dGQ+U2kgbGVzIHRhZ3MgcGV1dmVudCDDqnRyZSByw6lkdWl0cywgZGFucyBsZSBjYXMgZCd1bmUgc8OpbGVjdGlvbiBtdWx0aXBsZS48L3RkPlxuPHRkPmJvb2xlYW48L3RkPlxuPHRkPuKAlDwvdGQ+XG48dGQ+ZmFsc2U8L3RkPlxuPC90cj5cbjx0cj5cbjx0ZD5tdWx0aXBsZS1saW1pdDwvdGQ+XG48dGQ+Tm9tYnJlIG1heGltdW0gZCdvcHRpb25zIG11bHRpcGxlcyBzw6lsZWN0aW9ubmFibGUuIFBhcyBkZSBsaW1pdGVzIHF1YW5kIGVzdCDDoCAwLjwvdGQ+XG48dGQ+bnVtYmVyPC90ZD5cbjx0ZD7igJQ8L3RkPlxuPHRkPjA8L3RkPlxuPC90cj5cbjx0cj5cbjx0ZD5uYW1lPC90ZD5cbjx0ZD5MJ2F0dHJpYnV0IG5hbWUgbmF0aWYgZHUgc8OpbGVjdGV1ci48L3RkPlxuPHRkPnN0cmluZzwvdGQ+XG48dGQ+4oCUPC90ZD5cbjx0ZD7igJQ8L3RkPlxuPC90cj5cbjx0cj5cbjx0ZD5hdXRvY29tcGxldGU8L3RkPlxuPHRkPkwnYXR0cmlidXQgYXV0b2NvbXBsZXRlIG5hdGlmIGR1IHPDqWxlY3RldXIuPC90ZD5cbjx0ZD5zdHJpbmc8L3RkPlxuPHRkPuKAlDwvdGQ+XG48dGQ+b2ZmPC90ZD5cbjwvdHI+XG48dHI+XG48dGQ+YXV0by1jb21wbGV0ZTwvdGQ+XG48dGQ+QERFUFJFQ0FURUQgZGFucyBsYSBwcm9jaGFpbmUgdmVyc2lvbiBtYWpldXJlLjwvdGQ+XG48dGQ+c3RyaW5nPC90ZD5cbjx0ZD7igJQ8L3RkPlxuPHRkPm9mZjwvdGQ+XG48L3RyPlxuPHRyPlxuPHRkPnBsYWNlaG9sZGVyPC90ZD5cbjx0ZD5MZSBwbGFjZWhvbGRlciBkdSBjaGFtcC48L3RkPlxuPHRkPnN0cmluZzwvdGQ+XG48dGQ+4oCUPC90ZD5cbjx0ZD5TZWxlY3Q8L3RkPlxuPC90cj5cbjx0cj5cbjx0ZD5maWx0ZXJhYmxlPC90ZD5cbjx0ZD5TaSBsZXMgb3B0aW9ucyBzb250IGZpbHRyYWJsZXMuPC90ZD5cbjx0ZD5ib29sZWFuPC90ZD5cbjx0ZD7igJQ8L3RkPlxuPHRkPmZhbHNlPC90ZD5cbjwvdHI+XG48dHI+XG48dGQ+YWxsb3ctY3JlYXRlPC90ZD5cbjx0ZD5TaSBsJ3V0aWxpc2F0ZXVyIHBldXQgY3LDqWVyIGRlcyBvcHRpb25zLiBEYW5zIGNlIGNhcyA8Y29kZT5maWx0ZXJhYmxlPC9jb2RlPiBkb2l0IMOqdHJlIGFjdGl2w6kuPC90ZD5cbjx0ZD5ib29sZWFuPC90ZD5cbjx0ZD7igJQ8L3RkPlxuPHRkPmZhbHNlPC90ZD5cbjwvdHI+XG48dHI+XG48dGQ+ZmlsdGVyLW1ldGhvZDwvdGQ+XG48dGQ+TcOpdGhvZGUgZGUgZmlsdHJhZ2UgcGVyc29ubmFsaXPDqWUuPC90ZD5cbjx0ZD5mdW5jdGlvbjwvdGQ+XG48dGQ+4oCUPC90ZD5cbjx0ZD7igJQ8L3RkPlxuPC90cj5cbjx0cj5cbjx0ZD5yZW1vdGU8L3RkPlxuPHRkPlNpIGxlcyBvcHRpb25zIHNvbnQgY2hhcmfDqWVzIGR5bmFtaXF1ZW1lbnQgZGVwdWlzIGxlIHNlcnZldXIuPC90ZD5cbjx0ZD5ib29sZWFuPC90ZD5cbjx0ZD7igJQ8L3RkPlxuPHRkPmZhbHNlPC90ZD5cbjwvdHI+XG48dHI+XG48dGQ+cmVtb3RlLW1ldGhvZDwvdGQ+XG48dGQ+TcOpdGhvZGUgcG91ciBsYSByZWNoZXJjaGUgZGlzdGFudGUuPC90ZD5cbjx0ZD5mdW5jdGlvbjwvdGQ+XG48dGQ+4oCUPC90ZD5cbjx0ZD7igJQ8L3RkPlxuPC90cj5cbjx0cj5cbjx0ZD5sb2FkaW5nPC90ZD5cbjx0ZD5TaSBsZSBzw6lsZWN0ZXVyIGVzdCBlbiB0cmFpbiBkZSBjaGFyZ2VyIGRlcyBvcHRpb25zLjwvdGQ+XG48dGQ+Ym9vbGVhbjwvdGQ+XG48dGQ+4oCUPC90ZD5cbjx0ZD5mYWxzZTwvdGQ+XG48L3RyPlxuPHRyPlxuPHRkPmxvYWRpbmctdGV4dDwvdGQ+XG48dGQ+VGV4dGUgw6AgYWZmaWNoZXIgcGVuZGFudCBsZSBjaGFyZ2VtZW50LjwvdGQ+XG48dGQ+c3RyaW5nPC90ZD5cbjx0ZD7igJQ8L3RkPlxuPHRkPkxvYWRpbmc8L3RkPlxuPC90cj5cbjx0cj5cbjx0ZD5uby1tYXRjaC10ZXh0PC90ZD5cbjx0ZD5UZXh0ZSDDoCBhZmZpY2hlciBxdWFuZCBsZSBmaWx0cmFnZSBuZSByZXRvdXJuZSBhdWN1bmUgb3B0aW9uLiBWb3VzIHBvdXZleiBhdXNzaSB1dGlsaXNlciBsZSBzbG90IDxjb2RlPmVtcHR5PC9jb2RlPi48L3RkPlxuPHRkPnN0cmluZzwvdGQ+XG48dGQ+4oCUPC90ZD5cbjx0ZD5ObyBtYXRjaGluZyBkYXRhPC90ZD5cbjwvdHI+XG48dHI+XG48dGQ+bm8tZGF0YS10ZXh0PC90ZD5cbjx0ZD5UZXh0ZSDDoCBhZmZpY2hlciBxdWFuZCBpbCBuJ3kgYSBhdWN1bmUgb3B0aW9uLiBWb3VzIHBvdXZleiBhdXNzaSB1dGlsaXNlciBsZSBzbG90IDxjb2RlPmVtcHR5PC9jb2RlPi48L3RkPlxuPHRkPnN0cmluZzwvdGQ+XG48dGQ+4oCUPC90ZD5cbjx0ZD5ObyBkYXRhPC90ZD5cbjwvdHI+XG48dHI+XG48dGQ+cG9wcGVyLWNsYXNzPC90ZD5cbjx0ZD5DbGFzc2UgZHUgbWVudSBkw6lyb3VsYW50LjwvdGQ+XG48dGQ+c3RyaW5nPC90ZD5cbjx0ZD7igJQ8L3RkPlxuPHRkPuKAlDwvdGQ+XG48L3RyPlxuPHRyPlxuPHRkPnJlc2VydmUta2V5d29yZDwvdGQ+XG48dGQ+UXVhbmQgPGNvZGU+bXVsdGlwbGU8L2NvZGU+IGV0IDxjb2RlPmZpbHRlcjwvY29kZT4gc29udCBhY3RpdsOpcywgcydpbCBmYXV0IHLDqXNlcnZlciBsZSBtb3QtY2zDqSBjb3VyYW50IGFwcsOocyBsYSBzw6lsZWN0aW9uIGQndW5lIG9wdGlvbi48L3RkPlxuPHRkPmJvb2xlYW48L3RkPlxuPHRkPuKAlDwvdGQ+XG48dGQ+ZmFsc2U8L3RkPlxuPC90cj5cbjx0cj5cbjx0ZD5kZWZhdWx0LWZpcnN0LW9wdGlvbjwvdGQ+XG48dGQ+U8OpbGVjdGlvbm5lIGxhIHByZW1pw6hyZSBvcHRpb24gYXZlYyBFbnRyw6llLiBVdGlsaXNhYmxlIGF2ZWMgPGNvZGU+ZmlsdGVyYWJsZTwvY29kZT4gb3UgPGNvZGU+cmVtb3RlPC9jb2RlPjwvdGQ+XG48dGQ+Ym9vbGVhbjwvdGQ+XG48dGQ+LTwvdGQ+XG48dGQ+ZmFsc2U8L3RkPlxuPC90cj5cbjx0cj5cbjx0ZD5wb3BwZXItYXBwZW5kLXRvLWJvZHk8L3RkPlxuPHRkPlNpIGxlIG1lbnUgZMOpcm91bGFudCBkb2l0IMOqdHJlIGFqb3V0w6kgYXUgYm9keS4gU2kgbGUgcG9zaXRpb25uZW1lbnQgZHUgbWVudSBlc3QgaW5jb3JyZWN0LCBlc3NheWV6IGRlIG1ldHRyZSBjZXR0ZSBvcHRpb24gw6AgPGNvZGU+ZmFsc2U8L2NvZGU+LjwvdGQ+XG48dGQ+Ym9vbGVhbjwvdGQ+XG48dGQ+LTwvdGQ+XG48dGQ+dHJ1ZTwvdGQ+XG48L3RyPlxuPHRyPlxuPHRkPmF1dG9tYXRpYy1kcm9wZG93bjwvdGQ+XG48dGQ+UG91ciBsZXMgc8OpbGVjdGV1cnMgbm9uIGZpbHRyYWJsZXMsIGTDqXRlcm1pbmUgc2kgbGUgbWVudSBhcHBhcmHDrnQgYXUgZm9jdXMgZHUgY2hhbXAuPC90ZD5cbjx0ZD5ib29sZWFuPC90ZD5cbjx0ZD4tPC90ZD5cbjx0ZD5mYWxzZTwvdGQ+XG48L3RyPlxuPC90Ym9keT5cbjwvdGFibGU+XG48aDMgaWQ9XCJldmVuZW1lbnRzLWRlLXNlbGVjdFwiPjxhIGNsYXNzPVwiaGVhZGVyLWFuY2hvclwiIGhyZWY9XCIjZXZlbmVtZW50cy1kZS1zZWxlY3RcIj7CtjwvYT4gw4l2w6huZW1lbnRzIGRlIFNlbGVjdDwvaDM+XG48dGFibGU+XG48dGhlYWQ+XG48dHI+XG48dGg+Tm9tPC90aD5cbjx0aD5EZXNjcmlwdGlvbjwvdGg+XG48dGg+UGFyYW3DqHRyZTwvdGg+XG48L3RyPlxuPC90aGVhZD5cbjx0Ym9keT5cbjx0cj5cbjx0ZD5jaGFuZ2U8L3RkPlxuPHRkPlNlIGTDqWNsZW5jaGUgcXVhbmQgbGEgdmFsZXVyIGNoYW5nZS48L3RkPlxuPHRkPmN1cnJlbnQgc2VsZWN0ZWQgdmFsdWU8L3RkPlxuPC90cj5cbjx0cj5cbjx0ZD52aXNpYmxlLWNoYW5nZTwvdGQ+XG48dGQ+U2UgZMOpY2xlbmNoZSBxdWFuZCBsZSBtZW51IGFwcGFyYcOudCBvdSBkaXNwYXJhw650LjwvdGQ+XG48dGQ+dHJ1ZSBxdWFuZCBpbCBhcHBhcmHDrnQsIHNpbm9uIGZhbHNlIC48L3RkPlxuPC90cj5cbjx0cj5cbjx0ZD5yZW1vdmUtdGFnPC90ZD5cbjx0ZD5TZSBkw6ljbGVuY2hlIHF1YW5kIHVuIHRhZyBlc3QgcmV0aXLDqS48L3RkPlxuPHRkPkxhIHZhbGV1ciBkdSB0YWcgcmV0aXLDqS48L3RkPlxuPC90cj5cbjx0cj5cbjx0ZD5jbGVhcjwvdGQ+XG48dGQ+U2UgZMOpY2xlbmNoZSBxdWFuZCBsZSBjaGFtcCBlc3QgZWZmYWPDqSBncsOiY2UgYXUgYm91dG9uLjwvdGQ+XG48dGQ+4oCUPC90ZD5cbjwvdHI+XG48dHI+XG48dGQ+Ymx1cjwvdGQ+XG48dGQ+U2UgZMOpY2xlbmNoZSBxdWFuZCBsZSBjaGFtcCBwZXJkIGxlIGZvY3VzLjwvdGQ+XG48dGQ+KGV2ZW50OiBFdmVudCk8L3RkPlxuPC90cj5cbjx0cj5cbjx0ZD5mb2N1czwvdGQ+XG48dGQ+U2UgZMOpY2xlbmNoZSBnYWduZSBsZSBmb2N1cy48L3RkPlxuPHRkPihldmVudDogRXZlbnQpPC90ZD5cbjwvdHI+XG48L3Rib2R5PlxuPC90YWJsZT5cbjxoMyBpZD1cInNsb3RzLWRlLXNlbGVjdFwiPjxhIGNsYXNzPVwiaGVhZGVyLWFuY2hvclwiIGhyZWY9XCIjc2xvdHMtZGUtc2VsZWN0XCI+wrY8L2E+IFNsb3RzIGRlIFNlbGVjdDwvaDM+XG48dGFibGU+XG48dGhlYWQ+XG48dHI+XG48dGg+Tm9tPC90aD5cbjx0aD5EZXNjcmlwdGlvbjwvdGg+XG48L3RyPlxuPC90aGVhZD5cbjx0Ym9keT5cbjx0cj5cbjx0ZD7igJQ8L3RkPlxuPHRkPkxpc3RlIGRlIG9wdGlvbnMuPC90ZD5cbjwvdHI+XG48dHI+XG48dGQ+cHJlZml4PC90ZD5cbjx0ZD5Db250ZW51IGR1IHByw6lmaXhlIGR1IHPDqWxlY3RldXIuPC90ZD5cbjwvdHI+XG48dHI+XG48dGQ+ZW1wdHk8L3RkPlxuPHRkPkNvbnRlbnUgbG9yc3F1J2lsIG4neSBhIGF1Y3VuZSBvcHRpb24uPC90ZD5cbjwvdHI+XG48L3Rib2R5PlxuPC90YWJsZT5cbjxoMyBpZD1cImF0dHJpYnV0cy1kdS1ncm91cGUtZC1vcHRpb25zXCI+PGEgY2xhc3M9XCJoZWFkZXItYW5jaG9yXCIgaHJlZj1cIiNhdHRyaWJ1dHMtZHUtZ3JvdXBlLWQtb3B0aW9uc1wiPsK2PC9hPiBBdHRyaWJ1dHMgZHUgZ3JvdXBlIGQnb3B0aW9uczwvaDM+XG48dGFibGU+XG48dGhlYWQ+XG48dHI+XG48dGg+QXR0cmlidXQ8L3RoPlxuPHRoPkRlc2NyaXB0aW9uPC90aD5cbjx0aD5UeXBlPC90aD5cbjx0aD5WYWxldXJzIGFjY2VwdMOpZXM8L3RoPlxuPHRoPkTDqWZhdXQ8L3RoPlxuPC90cj5cbjwvdGhlYWQ+XG48dGJvZHk+XG48dHI+XG48dGQ+bGFiZWw8L3RkPlxuPHRkPk5vbSBkdSBncm91cC48L3RkPlxuPHRkPnN0cmluZzwvdGQ+XG48dGQ+4oCUPC90ZD5cbjx0ZD7igJQ8L3RkPlxuPC90cj5cbjx0cj5cbjx0ZD5kaXNhYmxlZDwvdGQ+XG48dGQ+U2kgbGVzIG9wdGlvbnMgZHUgZ3JvdXBlIHNvbnQgZMOpc2FjdGl2w6llcy48L3RkPlxuPHRkPmJvb2xlYW48L3RkPlxuPHRkPuKAlDwvdGQ+XG48dGQ+ZmFsc2U8L3RkPlxuPC90cj5cbjwvdGJvZHk+XG48L3RhYmxlPlxuPGgzIGlkPVwiYXR0cmlidXRzLWRlcy1vcHRpb25zXCI+PGEgY2xhc3M9XCJoZWFkZXItYW5jaG9yXCIgaHJlZj1cIiNhdHRyaWJ1dHMtZGVzLW9wdGlvbnNcIj7CtjwvYT4gQXR0cmlidXRzIGRlcyBvcHRpb25zPC9oMz5cbjx0YWJsZT5cbjx0aGVhZD5cbjx0cj5cbjx0aD5BdHRyaWJ1dDwvdGg+XG48dGg+RGVzY3JpcHRpb248L3RoPlxuPHRoPlR5cGU8L3RoPlxuPHRoPlZhbGV1cnMgYWNjZXB0w6llczwvdGg+XG48dGg+RMOpZmF1dDwvdGg+XG48L3RyPlxuPC90aGVhZD5cbjx0Ym9keT5cbjx0cj5cbjx0ZD52YWx1ZTwvdGQ+XG48dGQ+VmFsZXVyIGRlIGwnb3B0aW9uLjwvdGQ+XG48dGQ+c3RyaW5nL251bWJlci9vYmplY3Q8L3RkPlxuPHRkPuKAlDwvdGQ+XG48dGQ+4oCUPC90ZD5cbjwvdHI+XG48dHI+XG48dGQ+bGFiZWw8L3RkPlxuPHRkPkxhYmVsIGRlIGwnb3B0aW9uLCBpZGVudGlxdWUgw6AgPGNvZGU+dmFsdWU8L2NvZGU+IHNpIG9taXMuPC90ZD5cbjx0ZD5zdHJpbmcvbnVtYmVyPC90ZD5cbjx0ZD7igJQ8L3RkPlxuPHRkPuKAlDwvdGQ+XG48L3RyPlxuPHRyPlxuPHRkPmRpc2FibGVkPC90ZD5cbjx0ZD5TaSBsJ29wdGlvbiBlc3QgZMOpc2FjdGl2w6llLjwvdGQ+XG48dGQ+Ym9vbGVhbjwvdGQ+XG48dGQ+4oCUPC90ZD5cbjx0ZD5mYWxzZTwvdGQ+XG48L3RyPlxuPC90Ym9keT5cbjwvdGFibGU+XG48aDMgaWQ9XCJtZXRob2Rlc1wiPjxhIGNsYXNzPVwiaGVhZGVyLWFuY2hvclwiIGhyZWY9XCIjbWV0aG9kZXNcIj7CtjwvYT4gTcOpdGhvZGVzPC9oMz5cbjx0YWJsZT5cbjx0aGVhZD5cbjx0cj5cbjx0aD5Nw6l0aG9kZTwvdGg+XG48dGg+RGVzY3JpcHRpb248L3RoPlxuPHRoPlBhcmFtw6h0cmVzPC90aD5cbjwvdHI+XG48L3RoZWFkPlxuPHRib2R5PlxuPHRyPlxuPHRkPmZvY3VzPC90ZD5cbjx0ZD5Gb2N1cyBzdXIgbCdpbnB1dC48L3RkPlxuPHRkPi08L3RkPlxuPC90cj5cbjx0cj5cbjx0ZD5ibHVyPC90ZD5cbjx0ZD5FbmzDqHZlIGxlIGZvY3VzIGRlIGwnaW5wdXQgZXQgY2FjaGUgbGUgbWVudS48L3RkPlxuPHRkPi08L3RkPlxuPC90cj5cbjwvdGJvZHk+XG48L3RhYmxlPlxuXG4gICAgICA8L3NlY3Rpb24+XG4gICAgPC90ZW1wbGF0ZT5cbiAgICA8c2NyaXB0PlxuICAgICAgaW1wb3J0IGhsanMgZnJvbSAnaGlnaGxpZ2h0LmpzJ1xuICAgICAgaW1wb3J0ICogYXMgVnVlIGZyb20gXCJ2dWVcIlxuICAgICAgZXhwb3J0IGRlZmF1bHQge1xuICAgICAgICBuYW1lOiAnY29tcG9uZW50LWRvYycsXG4gICAgICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgICBcImVsZW1lbnQtZGVtbzBcIjogKGZ1bmN0aW9uKCkge1xuICAgIFxuICAgIGNvbnN0IHsgcmVuZGVyTGlzdDogX3JlbmRlckxpc3QsIEZyYWdtZW50OiBfRnJhZ21lbnQsIG9wZW5CbG9jazogX29wZW5CbG9jaywgY3JlYXRlQmxvY2s6IF9jcmVhdGVCbG9jaywgcmVzb2x2ZUNvbXBvbmVudDogX3Jlc29sdmVDb21wb25lbnQsIGNyZWF0ZVZOb2RlOiBfY3JlYXRlVk5vZGUsIHdpdGhDdHg6IF93aXRoQ3R4IH0gPSBWdWVcblxuZnVuY3Rpb24gcmVuZGVyIChfY3R4LCBfY2FjaGUpIHtcbiAgY29uc3QgX2NvbXBvbmVudF9lbF9vcHRpb24gPSBfcmVzb2x2ZUNvbXBvbmVudChcImVsLW9wdGlvblwiKVxuICBjb25zdCBfY29tcG9uZW50X2VsX3NlbGVjdCA9IF9yZXNvbHZlQ29tcG9uZW50KFwiZWwtc2VsZWN0XCIpXG5cbiAgcmV0dXJuIChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhfY29tcG9uZW50X2VsX3NlbGVjdCwge1xuICAgIG1vZGVsVmFsdWU6IF9jdHgudmFsdWUsXG4gICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6ICRldmVudCA9PiAoX2N0eC52YWx1ZSA9ICRldmVudCksXG4gICAgcGxhY2Vob2xkZXI6IFwiU2VsZWN0XCJcbiAgfSwge1xuICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgIChfb3BlbkJsb2NrKHRydWUpLCBfY3JlYXRlQmxvY2soX0ZyYWdtZW50LCBudWxsLCBfcmVuZGVyTGlzdChfY3R4Lm9wdGlvbnMsIChpdGVtKSA9PiB7XG4gICAgICAgIHJldHVybiAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9lbF9vcHRpb24sIHtcbiAgICAgICAgICBrZXk6IGl0ZW0udmFsdWUsXG4gICAgICAgICAgbGFiZWw6IGl0ZW0ubGFiZWwsXG4gICAgICAgICAgdmFsdWU6IGl0ZW0udmFsdWVcbiAgICAgICAgfSwgbnVsbCwgOCAvKiBQUk9QUyAqLywgW1wibGFiZWxcIiwgXCJ2YWx1ZVwiXSkpXG4gICAgICB9KSwgMTI4IC8qIEtFWUVEX0ZSQUdNRU5UICovKSlcbiAgICBdKSxcbiAgICBfOiAxXG4gIH0sIDggLyogUFJPUFMgKi8sIFtcIm1vZGVsVmFsdWVcIiwgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCJdKSlcbn1cbiAgXG4gICAgY29uc3QgZGVtb2NvbXBvbmVudEV4cG9ydCA9IHtcbiAgICBkYXRhKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb3B0aW9uczogW3tcbiAgICAgICAgICB2YWx1ZTogJ09wdGlvbjEnLFxuICAgICAgICAgIGxhYmVsOiAnT3B0aW9uMSdcbiAgICAgICAgfSwge1xuICAgICAgICAgIHZhbHVlOiAnT3B0aW9uMicsXG4gICAgICAgICAgbGFiZWw6ICdPcHRpb24yJ1xuICAgICAgICB9LCB7XG4gICAgICAgICAgdmFsdWU6ICdPcHRpb24zJyxcbiAgICAgICAgICBsYWJlbDogJ09wdGlvbjMnXG4gICAgICAgIH0sIHtcbiAgICAgICAgICB2YWx1ZTogJ09wdGlvbjQnLFxuICAgICAgICAgIGxhYmVsOiAnT3B0aW9uNCdcbiAgICAgICAgfSwge1xuICAgICAgICAgIHZhbHVlOiAnT3B0aW9uNScsXG4gICAgICAgICAgbGFiZWw6ICdPcHRpb241J1xuICAgICAgICB9XSxcbiAgICAgICAgdmFsdWU6ICcnXG4gICAgICB9XG4gICAgfVxuICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIG1vdW50ZWQoKXtcbiAgICAgICAgdGhpcy4kbmV4dFRpY2soKCk9PntcbiAgICAgICAgICBjb25zdCBibG9ja3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdwcmUgY29kZTpub3QoLmhsanMpJylcbiAgICAgICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGJsb2NrcywgaGxqcy5oaWdobGlnaHRCbG9jaylcbiAgICAgICAgfSlcbiAgICAgIH0sXG4gICAgICByZW5kZXIsXG4gICAgICAuLi5kZW1vY29tcG9uZW50RXhwb3J0XG4gICAgfVxuICB9KSgpLFwiZWxlbWVudC1kZW1vMVwiOiAoZnVuY3Rpb24oKSB7XG4gICAgXG4gICAgY29uc3QgeyByZW5kZXJMaXN0OiBfcmVuZGVyTGlzdCwgRnJhZ21lbnQ6IF9GcmFnbWVudCwgb3BlbkJsb2NrOiBfb3BlbkJsb2NrLCBjcmVhdGVCbG9jazogX2NyZWF0ZUJsb2NrLCByZXNvbHZlQ29tcG9uZW50OiBfcmVzb2x2ZUNvbXBvbmVudCwgY3JlYXRlVk5vZGU6IF9jcmVhdGVWTm9kZSwgd2l0aEN0eDogX3dpdGhDdHggfSA9IFZ1ZVxuXG5mdW5jdGlvbiByZW5kZXIgKF9jdHgsIF9jYWNoZSkge1xuICBjb25zdCBfY29tcG9uZW50X2VsX29wdGlvbiA9IF9yZXNvbHZlQ29tcG9uZW50KFwiZWwtb3B0aW9uXCIpXG4gIGNvbnN0IF9jb21wb25lbnRfZWxfc2VsZWN0ID0gX3Jlc29sdmVDb21wb25lbnQoXCJlbC1zZWxlY3RcIilcblxuICByZXR1cm4gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9jb21wb25lbnRfZWxfc2VsZWN0LCB7XG4gICAgbW9kZWxWYWx1ZTogX2N0eC52YWx1ZSxcbiAgICBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjogJGV2ZW50ID0+IChfY3R4LnZhbHVlID0gJGV2ZW50KSxcbiAgICBwbGFjZWhvbGRlcjogXCJTZWxlY3RcIlxuICB9LCB7XG4gICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgKF9vcGVuQmxvY2sodHJ1ZSksIF9jcmVhdGVCbG9jayhfRnJhZ21lbnQsIG51bGwsIF9yZW5kZXJMaXN0KF9jdHgub3B0aW9ucywgKGl0ZW0pID0+IHtcbiAgICAgICAgcmV0dXJuIChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhfY29tcG9uZW50X2VsX29wdGlvbiwge1xuICAgICAgICAgIGtleTogaXRlbS52YWx1ZSxcbiAgICAgICAgICBsYWJlbDogaXRlbS5sYWJlbCxcbiAgICAgICAgICB2YWx1ZTogaXRlbS52YWx1ZSxcbiAgICAgICAgICBkaXNhYmxlZDogaXRlbS5kaXNhYmxlZFxuICAgICAgICB9LCBudWxsLCA4IC8qIFBST1BTICovLCBbXCJsYWJlbFwiLCBcInZhbHVlXCIsIFwiZGlzYWJsZWRcIl0pKVxuICAgICAgfSksIDEyOCAvKiBLRVlFRF9GUkFHTUVOVCAqLykpXG4gICAgXSksXG4gICAgXzogMVxuICB9LCA4IC8qIFBST1BTICovLCBbXCJtb2RlbFZhbHVlXCIsIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiXSkpXG59XG4gIFxuICAgIGNvbnN0IGRlbW9jb21wb25lbnRFeHBvcnQgPSB7XG4gICAgZGF0YSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG9wdGlvbnM6IFt7XG4gICAgICAgICAgdmFsdWU6ICdPcHRpb24xJyxcbiAgICAgICAgICBsYWJlbDogJ09wdGlvbjEnXG4gICAgICAgIH0sIHtcbiAgICAgICAgICB2YWx1ZTogJ09wdGlvbjInLFxuICAgICAgICAgIGxhYmVsOiAnT3B0aW9uMicsXG4gICAgICAgICAgZGlzYWJsZWQ6IHRydWVcbiAgICAgICAgfSwge1xuICAgICAgICAgIHZhbHVlOiAnT3B0aW9uMycsXG4gICAgICAgICAgbGFiZWw6ICdPcHRpb24zJ1xuICAgICAgICB9LCB7XG4gICAgICAgICAgdmFsdWU6ICdPcHRpb240JyxcbiAgICAgICAgICBsYWJlbDogJ09wdGlvbjQnXG4gICAgICAgIH0sIHtcbiAgICAgICAgICB2YWx1ZTogJ09wdGlvbjUnLFxuICAgICAgICAgIGxhYmVsOiAnT3B0aW9uNSdcbiAgICAgICAgfV0sXG4gICAgICAgIHZhbHVlOiAnJ1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAgIHJldHVybiB7XG4gICAgICBtb3VudGVkKCl7XG4gICAgICAgIHRoaXMuJG5leHRUaWNrKCgpPT57XG4gICAgICAgICAgY29uc3QgYmxvY2tzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgncHJlIGNvZGU6bm90KC5obGpzKScpXG4gICAgICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChibG9ja3MsIGhsanMuaGlnaGxpZ2h0QmxvY2spXG4gICAgICAgIH0pXG4gICAgICB9LFxuICAgICAgcmVuZGVyLFxuICAgICAgLi4uZGVtb2NvbXBvbmVudEV4cG9ydFxuICAgIH1cbiAgfSkoKSxcImVsZW1lbnQtZGVtbzJcIjogKGZ1bmN0aW9uKCkge1xuICAgIFxuICAgIGNvbnN0IHsgcmVuZGVyTGlzdDogX3JlbmRlckxpc3QsIEZyYWdtZW50OiBfRnJhZ21lbnQsIG9wZW5CbG9jazogX29wZW5CbG9jaywgY3JlYXRlQmxvY2s6IF9jcmVhdGVCbG9jaywgcmVzb2x2ZUNvbXBvbmVudDogX3Jlc29sdmVDb21wb25lbnQsIGNyZWF0ZVZOb2RlOiBfY3JlYXRlVk5vZGUsIHdpdGhDdHg6IF93aXRoQ3R4IH0gPSBWdWVcblxuZnVuY3Rpb24gcmVuZGVyIChfY3R4LCBfY2FjaGUpIHtcbiAgY29uc3QgX2NvbXBvbmVudF9lbF9vcHRpb24gPSBfcmVzb2x2ZUNvbXBvbmVudChcImVsLW9wdGlvblwiKVxuICBjb25zdCBfY29tcG9uZW50X2VsX3NlbGVjdCA9IF9yZXNvbHZlQ29tcG9uZW50KFwiZWwtc2VsZWN0XCIpXG5cbiAgcmV0dXJuIChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhfY29tcG9uZW50X2VsX3NlbGVjdCwge1xuICAgIG1vZGVsVmFsdWU6IF9jdHgudmFsdWUsXG4gICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6ICRldmVudCA9PiAoX2N0eC52YWx1ZSA9ICRldmVudCksXG4gICAgZGlzYWJsZWQ6IFwiXCIsXG4gICAgcGxhY2Vob2xkZXI6IFwiU2VsZWN0XCJcbiAgfSwge1xuICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgIChfb3BlbkJsb2NrKHRydWUpLCBfY3JlYXRlQmxvY2soX0ZyYWdtZW50LCBudWxsLCBfcmVuZGVyTGlzdChfY3R4Lm9wdGlvbnMsIChpdGVtKSA9PiB7XG4gICAgICAgIHJldHVybiAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9lbF9vcHRpb24sIHtcbiAgICAgICAgICBrZXk6IGl0ZW0udmFsdWUsXG4gICAgICAgICAgbGFiZWw6IGl0ZW0ubGFiZWwsXG4gICAgICAgICAgdmFsdWU6IGl0ZW0udmFsdWVcbiAgICAgICAgfSwgbnVsbCwgOCAvKiBQUk9QUyAqLywgW1wibGFiZWxcIiwgXCJ2YWx1ZVwiXSkpXG4gICAgICB9KSwgMTI4IC8qIEtFWUVEX0ZSQUdNRU5UICovKSlcbiAgICBdKSxcbiAgICBfOiAxXG4gIH0sIDggLyogUFJPUFMgKi8sIFtcIm1vZGVsVmFsdWVcIiwgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCJdKSlcbn1cbiAgXG4gICAgY29uc3QgZGVtb2NvbXBvbmVudEV4cG9ydCA9IHtcbiAgICBkYXRhKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb3B0aW9uczogW3tcbiAgICAgICAgICB2YWx1ZTogJ09wdGlvbjEnLFxuICAgICAgICAgIGxhYmVsOiAnT3B0aW9uMSdcbiAgICAgICAgfSwge1xuICAgICAgICAgIHZhbHVlOiAnT3B0aW9uMicsXG4gICAgICAgICAgbGFiZWw6ICdPcHRpb24yJ1xuICAgICAgICB9LCB7XG4gICAgICAgICAgdmFsdWU6ICdPcHRpb24zJyxcbiAgICAgICAgICBsYWJlbDogJ09wdGlvbjMnXG4gICAgICAgIH0sIHtcbiAgICAgICAgICB2YWx1ZTogJ09wdGlvbjQnLFxuICAgICAgICAgIGxhYmVsOiAnT3B0aW9uNCdcbiAgICAgICAgfSwge1xuICAgICAgICAgIHZhbHVlOiAnT3B0aW9uNScsXG4gICAgICAgICAgbGFiZWw6ICdPcHRpb241J1xuICAgICAgICB9XSxcbiAgICAgICAgdmFsdWU6ICcnXG4gICAgICB9XG4gICAgfVxuICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIG1vdW50ZWQoKXtcbiAgICAgICAgdGhpcy4kbmV4dFRpY2soKCk9PntcbiAgICAgICAgICBjb25zdCBibG9ja3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdwcmUgY29kZTpub3QoLmhsanMpJylcbiAgICAgICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGJsb2NrcywgaGxqcy5oaWdobGlnaHRCbG9jaylcbiAgICAgICAgfSlcbiAgICAgIH0sXG4gICAgICByZW5kZXIsXG4gICAgICAuLi5kZW1vY29tcG9uZW50RXhwb3J0XG4gICAgfVxuICB9KSgpLFwiZWxlbWVudC1kZW1vM1wiOiAoZnVuY3Rpb24oKSB7XG4gICAgXG4gICAgY29uc3QgeyByZW5kZXJMaXN0OiBfcmVuZGVyTGlzdCwgRnJhZ21lbnQ6IF9GcmFnbWVudCwgb3BlbkJsb2NrOiBfb3BlbkJsb2NrLCBjcmVhdGVCbG9jazogX2NyZWF0ZUJsb2NrLCByZXNvbHZlQ29tcG9uZW50OiBfcmVzb2x2ZUNvbXBvbmVudCwgY3JlYXRlVk5vZGU6IF9jcmVhdGVWTm9kZSwgd2l0aEN0eDogX3dpdGhDdHggfSA9IFZ1ZVxuXG5mdW5jdGlvbiByZW5kZXIgKF9jdHgsIF9jYWNoZSkge1xuICBjb25zdCBfY29tcG9uZW50X2VsX29wdGlvbiA9IF9yZXNvbHZlQ29tcG9uZW50KFwiZWwtb3B0aW9uXCIpXG4gIGNvbnN0IF9jb21wb25lbnRfZWxfc2VsZWN0ID0gX3Jlc29sdmVDb21wb25lbnQoXCJlbC1zZWxlY3RcIilcblxuICByZXR1cm4gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9jb21wb25lbnRfZWxfc2VsZWN0LCB7XG4gICAgbW9kZWxWYWx1ZTogX2N0eC52YWx1ZSxcbiAgICBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjogJGV2ZW50ID0+IChfY3R4LnZhbHVlID0gJGV2ZW50KSxcbiAgICBjbGVhcmFibGU6IFwiXCIsXG4gICAgcGxhY2Vob2xkZXI6IFwiU2VsZWN0XCJcbiAgfSwge1xuICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgIChfb3BlbkJsb2NrKHRydWUpLCBfY3JlYXRlQmxvY2soX0ZyYWdtZW50LCBudWxsLCBfcmVuZGVyTGlzdChfY3R4Lm9wdGlvbnMsIChpdGVtKSA9PiB7XG4gICAgICAgIHJldHVybiAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9lbF9vcHRpb24sIHtcbiAgICAgICAgICBrZXk6IGl0ZW0udmFsdWUsXG4gICAgICAgICAgbGFiZWw6IGl0ZW0ubGFiZWwsXG4gICAgICAgICAgdmFsdWU6IGl0ZW0udmFsdWVcbiAgICAgICAgfSwgbnVsbCwgOCAvKiBQUk9QUyAqLywgW1wibGFiZWxcIiwgXCJ2YWx1ZVwiXSkpXG4gICAgICB9KSwgMTI4IC8qIEtFWUVEX0ZSQUdNRU5UICovKSlcbiAgICBdKSxcbiAgICBfOiAxXG4gIH0sIDggLyogUFJPUFMgKi8sIFtcIm1vZGVsVmFsdWVcIiwgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCJdKSlcbn1cbiAgXG4gICAgY29uc3QgZGVtb2NvbXBvbmVudEV4cG9ydCA9IHtcbiAgICBkYXRhKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb3B0aW9uczogW3tcbiAgICAgICAgICB2YWx1ZTogJ09wdGlvbjEnLFxuICAgICAgICAgIGxhYmVsOiAnT3B0aW9uMSdcbiAgICAgICAgfSwge1xuICAgICAgICAgIHZhbHVlOiAnT3B0aW9uMicsXG4gICAgICAgICAgbGFiZWw6ICdPcHRpb24yJ1xuICAgICAgICB9LCB7XG4gICAgICAgICAgdmFsdWU6ICdPcHRpb24zJyxcbiAgICAgICAgICBsYWJlbDogJ09wdGlvbjMnXG4gICAgICAgIH0sIHtcbiAgICAgICAgICB2YWx1ZTogJ09wdGlvbjQnLFxuICAgICAgICAgIGxhYmVsOiAnT3B0aW9uNCdcbiAgICAgICAgfSwge1xuICAgICAgICAgIHZhbHVlOiAnT3B0aW9uNScsXG4gICAgICAgICAgbGFiZWw6ICdPcHRpb241J1xuICAgICAgICB9XSxcbiAgICAgICAgdmFsdWU6ICcnXG4gICAgICB9XG4gICAgfVxuICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIG1vdW50ZWQoKXtcbiAgICAgICAgdGhpcy4kbmV4dFRpY2soKCk9PntcbiAgICAgICAgICBjb25zdCBibG9ja3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdwcmUgY29kZTpub3QoLmhsanMpJylcbiAgICAgICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGJsb2NrcywgaGxqcy5oaWdobGlnaHRCbG9jaylcbiAgICAgICAgfSlcbiAgICAgIH0sXG4gICAgICByZW5kZXIsXG4gICAgICAuLi5kZW1vY29tcG9uZW50RXhwb3J0XG4gICAgfVxuICB9KSgpLFwiZWxlbWVudC1kZW1vNFwiOiAoZnVuY3Rpb24oKSB7XG4gICAgXG4gICAgY29uc3QgeyByZW5kZXJMaXN0OiBfcmVuZGVyTGlzdCwgRnJhZ21lbnQ6IF9GcmFnbWVudCwgb3BlbkJsb2NrOiBfb3BlbkJsb2NrLCBjcmVhdGVCbG9jazogX2NyZWF0ZUJsb2NrLCByZXNvbHZlQ29tcG9uZW50OiBfcmVzb2x2ZUNvbXBvbmVudCwgY3JlYXRlVk5vZGU6IF9jcmVhdGVWTm9kZSwgd2l0aEN0eDogX3dpdGhDdHggfSA9IFZ1ZVxuXG5mdW5jdGlvbiByZW5kZXIgKF9jdHgsIF9jYWNoZSkge1xuICBjb25zdCBfY29tcG9uZW50X2VsX29wdGlvbiA9IF9yZXNvbHZlQ29tcG9uZW50KFwiZWwtb3B0aW9uXCIpXG4gIGNvbnN0IF9jb21wb25lbnRfZWxfc2VsZWN0ID0gX3Jlc29sdmVDb21wb25lbnQoXCJlbC1zZWxlY3RcIilcblxuICByZXR1cm4gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9GcmFnbWVudCwgbnVsbCwgW1xuICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2VsX3NlbGVjdCwge1xuICAgICAgbW9kZWxWYWx1ZTogX2N0eC52YWx1ZTEsXG4gICAgICBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjogJGV2ZW50ID0+IChfY3R4LnZhbHVlMSA9ICRldmVudCksXG4gICAgICBtdWx0aXBsZTogXCJcIixcbiAgICAgIHBsYWNlaG9sZGVyOiBcIlNlbGVjdFwiXG4gICAgfSwge1xuICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAoX29wZW5CbG9jayh0cnVlKSwgX2NyZWF0ZUJsb2NrKF9GcmFnbWVudCwgbnVsbCwgX3JlbmRlckxpc3QoX2N0eC5vcHRpb25zLCAoaXRlbSkgPT4ge1xuICAgICAgICAgIHJldHVybiAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9lbF9vcHRpb24sIHtcbiAgICAgICAgICAgIGtleTogaXRlbS52YWx1ZSxcbiAgICAgICAgICAgIGxhYmVsOiBpdGVtLmxhYmVsLFxuICAgICAgICAgICAgdmFsdWU6IGl0ZW0udmFsdWVcbiAgICAgICAgICB9LCBudWxsLCA4IC8qIFBST1BTICovLCBbXCJsYWJlbFwiLCBcInZhbHVlXCJdKSlcbiAgICAgICAgfSksIDEyOCAvKiBLRVlFRF9GUkFHTUVOVCAqLykpXG4gICAgICBdKSxcbiAgICAgIF86IDFcbiAgICB9LCA4IC8qIFBST1BTICovLCBbXCJtb2RlbFZhbHVlXCIsIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiXSksXG4gICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfc2VsZWN0LCB7XG4gICAgICBtb2RlbFZhbHVlOiBfY3R4LnZhbHVlMixcbiAgICAgIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOiAkZXZlbnQgPT4gKF9jdHgudmFsdWUyID0gJGV2ZW50KSxcbiAgICAgIG11bHRpcGxlOiBcIlwiLFxuICAgICAgXCJjb2xsYXBzZS10YWdzXCI6IFwiXCIsXG4gICAgICBzdHlsZToge1wibWFyZ2luLWxlZnRcIjpcIjIwcHhcIn0sXG4gICAgICBwbGFjZWhvbGRlcjogXCJTZWxlY3RcIlxuICAgIH0sIHtcbiAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgKF9vcGVuQmxvY2sodHJ1ZSksIF9jcmVhdGVCbG9jayhfRnJhZ21lbnQsIG51bGwsIF9yZW5kZXJMaXN0KF9jdHgub3B0aW9ucywgKGl0ZW0pID0+IHtcbiAgICAgICAgICByZXR1cm4gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9jb21wb25lbnRfZWxfb3B0aW9uLCB7XG4gICAgICAgICAgICBrZXk6IGl0ZW0udmFsdWUsXG4gICAgICAgICAgICBsYWJlbDogaXRlbS5sYWJlbCxcbiAgICAgICAgICAgIHZhbHVlOiBpdGVtLnZhbHVlXG4gICAgICAgICAgfSwgbnVsbCwgOCAvKiBQUk9QUyAqLywgW1wibGFiZWxcIiwgXCJ2YWx1ZVwiXSkpXG4gICAgICAgIH0pLCAxMjggLyogS0VZRURfRlJBR01FTlQgKi8pKVxuICAgICAgXSksXG4gICAgICBfOiAxXG4gICAgfSwgOCAvKiBQUk9QUyAqLywgW1wibW9kZWxWYWx1ZVwiLCBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIl0pXG4gIF0sIDY0IC8qIFNUQUJMRV9GUkFHTUVOVCAqLykpXG59XG4gIFxuICAgIGNvbnN0IGRlbW9jb21wb25lbnRFeHBvcnQgPSB7XG4gICAgZGF0YSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG9wdGlvbnM6IFt7XG4gICAgICAgICAgdmFsdWU6ICdPcHRpb24xJyxcbiAgICAgICAgICBsYWJlbDogJ09wdGlvbjEnXG4gICAgICAgIH0sIHtcbiAgICAgICAgICB2YWx1ZTogJ09wdGlvbjInLFxuICAgICAgICAgIGxhYmVsOiAnT3B0aW9uMidcbiAgICAgICAgfSwge1xuICAgICAgICAgIHZhbHVlOiAnT3B0aW9uMycsXG4gICAgICAgICAgbGFiZWw6ICdPcHRpb24zJ1xuICAgICAgICB9LCB7XG4gICAgICAgICAgdmFsdWU6ICdPcHRpb240JyxcbiAgICAgICAgICBsYWJlbDogJ09wdGlvbjQnXG4gICAgICAgIH0sIHtcbiAgICAgICAgICB2YWx1ZTogJ09wdGlvbjUnLFxuICAgICAgICAgIGxhYmVsOiAnT3B0aW9uNSdcbiAgICAgICAgfV0sXG4gICAgICAgIHZhbHVlMTogW10sXG4gICAgICAgIHZhbHVlMjogW11cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgICByZXR1cm4ge1xuICAgICAgbW91bnRlZCgpe1xuICAgICAgICB0aGlzLiRuZXh0VGljaygoKT0+e1xuICAgICAgICAgIGNvbnN0IGJsb2NrcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3ByZSBjb2RlOm5vdCguaGxqcyknKVxuICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoYmxvY2tzLCBobGpzLmhpZ2hsaWdodEJsb2NrKVxuICAgICAgICB9KVxuICAgICAgfSxcbiAgICAgIHJlbmRlcixcbiAgICAgIC4uLmRlbW9jb21wb25lbnRFeHBvcnRcbiAgICB9XG4gIH0pKCksXCJlbGVtZW50LWRlbW81XCI6IChmdW5jdGlvbigpIHtcbiAgICBcbiAgICBjb25zdCB7IHJlbmRlckxpc3Q6IF9yZW5kZXJMaXN0LCBGcmFnbWVudDogX0ZyYWdtZW50LCBvcGVuQmxvY2s6IF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrOiBfY3JlYXRlQmxvY2ssIHRvRGlzcGxheVN0cmluZzogX3RvRGlzcGxheVN0cmluZywgY3JlYXRlVk5vZGU6IF9jcmVhdGVWTm9kZSwgcmVzb2x2ZUNvbXBvbmVudDogX3Jlc29sdmVDb21wb25lbnQsIHdpdGhDdHg6IF93aXRoQ3R4IH0gPSBWdWVcblxuZnVuY3Rpb24gcmVuZGVyIChfY3R4LCBfY2FjaGUpIHtcbiAgY29uc3QgX2NvbXBvbmVudF9lbF9vcHRpb24gPSBfcmVzb2x2ZUNvbXBvbmVudChcImVsLW9wdGlvblwiKVxuICBjb25zdCBfY29tcG9uZW50X2VsX3NlbGVjdCA9IF9yZXNvbHZlQ29tcG9uZW50KFwiZWwtc2VsZWN0XCIpXG5cbiAgcmV0dXJuIChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhfY29tcG9uZW50X2VsX3NlbGVjdCwge1xuICAgIG1vZGVsVmFsdWU6IF9jdHgudmFsdWUsXG4gICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6ICRldmVudCA9PiAoX2N0eC52YWx1ZSA9ICRldmVudCksXG4gICAgcGxhY2Vob2xkZXI6IFwiU2VsZWN0XCJcbiAgfSwge1xuICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgIChfb3BlbkJsb2NrKHRydWUpLCBfY3JlYXRlQmxvY2soX0ZyYWdtZW50LCBudWxsLCBfcmVuZGVyTGlzdChfY3R4LmNpdGllcywgKGl0ZW0pID0+IHtcbiAgICAgICAgcmV0dXJuIChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhfY29tcG9uZW50X2VsX29wdGlvbiwge1xuICAgICAgICAgIGtleTogaXRlbS52YWx1ZSxcbiAgICAgICAgICBsYWJlbDogaXRlbS5sYWJlbCxcbiAgICAgICAgICB2YWx1ZTogaXRlbS52YWx1ZVxuICAgICAgICB9LCB7XG4gICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKFwic3BhblwiLCB7IHN0eWxlOiB7XCJmbG9hdFwiOlwibGVmdFwifSB9LCBfdG9EaXNwbGF5U3RyaW5nKGl0ZW0ubGFiZWwpLCAxIC8qIFRFWFQgKi8pLFxuICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKFwic3BhblwiLCB7IHN0eWxlOiB7XCJmbG9hdFwiOlwicmlnaHRcIixcImNvbG9yXCI6XCIjODQ5MmE2XCIsXCJmb250LXNpemVcIjpcIjEzcHhcIn0gfSwgX3RvRGlzcGxheVN0cmluZyhpdGVtLnZhbHVlKSwgMSAvKiBURVhUICovKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIF86IDJcbiAgICAgICAgfSwgMTAzMiAvKiBQUk9QUywgRFlOQU1JQ19TTE9UUyAqLywgW1wibGFiZWxcIiwgXCJ2YWx1ZVwiXSkpXG4gICAgICB9KSwgMTI4IC8qIEtFWUVEX0ZSQUdNRU5UICovKSlcbiAgICBdKSxcbiAgICBfOiAxXG4gIH0sIDggLyogUFJPUFMgKi8sIFtcIm1vZGVsVmFsdWVcIiwgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCJdKSlcbn1cbiAgXG4gICAgY29uc3QgZGVtb2NvbXBvbmVudEV4cG9ydCA9IHtcbiAgICBkYXRhKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY2l0aWVzOiBbe1xuICAgICAgICAgIHZhbHVlOiAnQmVpamluZycsXG4gICAgICAgICAgbGFiZWw6ICdCZWlqaW5nJ1xuICAgICAgICB9LCB7XG4gICAgICAgICAgdmFsdWU6ICdTaGFuZ2hhaScsXG4gICAgICAgICAgbGFiZWw6ICdTaGFuZ2hhaSdcbiAgICAgICAgfSwge1xuICAgICAgICAgIHZhbHVlOiAnTmFuamluZycsXG4gICAgICAgICAgbGFiZWw6ICdOYW5qaW5nJ1xuICAgICAgICB9LCB7XG4gICAgICAgICAgdmFsdWU6ICdDaGVuZ2R1JyxcbiAgICAgICAgICBsYWJlbDogJ0NoZW5nZHUnXG4gICAgICAgIH0sIHtcbiAgICAgICAgICB2YWx1ZTogJ1NoZW56aGVuJyxcbiAgICAgICAgICBsYWJlbDogJ1NoZW56aGVuJ1xuICAgICAgICB9LCB7XG4gICAgICAgICAgdmFsdWU6ICdHdWFuZ3pob3UnLFxuICAgICAgICAgIGxhYmVsOiAnR3Vhbmd6aG91J1xuICAgICAgICB9XSxcbiAgICAgICAgdmFsdWU6ICcnXG4gICAgICB9XG4gICAgfVxuICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIG1vdW50ZWQoKXtcbiAgICAgICAgdGhpcy4kbmV4dFRpY2soKCk9PntcbiAgICAgICAgICBjb25zdCBibG9ja3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdwcmUgY29kZTpub3QoLmhsanMpJylcbiAgICAgICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGJsb2NrcywgaGxqcy5oaWdobGlnaHRCbG9jaylcbiAgICAgICAgfSlcbiAgICAgIH0sXG4gICAgICByZW5kZXIsXG4gICAgICAuLi5kZW1vY29tcG9uZW50RXhwb3J0XG4gICAgfVxuICB9KSgpLFwiZWxlbWVudC1kZW1vNlwiOiAoZnVuY3Rpb24oKSB7XG4gICAgXG4gICAgY29uc3QgeyByZW5kZXJMaXN0OiBfcmVuZGVyTGlzdCwgRnJhZ21lbnQ6IF9GcmFnbWVudCwgb3BlbkJsb2NrOiBfb3BlbkJsb2NrLCBjcmVhdGVCbG9jazogX2NyZWF0ZUJsb2NrLCByZXNvbHZlQ29tcG9uZW50OiBfcmVzb2x2ZUNvbXBvbmVudCwgY3JlYXRlVk5vZGU6IF9jcmVhdGVWTm9kZSwgd2l0aEN0eDogX3dpdGhDdHggfSA9IFZ1ZVxuXG5mdW5jdGlvbiByZW5kZXIgKF9jdHgsIF9jYWNoZSkge1xuICBjb25zdCBfY29tcG9uZW50X2VsX29wdGlvbiA9IF9yZXNvbHZlQ29tcG9uZW50KFwiZWwtb3B0aW9uXCIpXG4gIGNvbnN0IF9jb21wb25lbnRfZWxfb3B0aW9uX2dyb3VwID0gX3Jlc29sdmVDb21wb25lbnQoXCJlbC1vcHRpb24tZ3JvdXBcIilcbiAgY29uc3QgX2NvbXBvbmVudF9lbF9zZWxlY3QgPSBfcmVzb2x2ZUNvbXBvbmVudChcImVsLXNlbGVjdFwiKVxuXG4gIHJldHVybiAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9lbF9zZWxlY3QsIHtcbiAgICBtb2RlbFZhbHVlOiBfY3R4LnZhbHVlLFxuICAgIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOiAkZXZlbnQgPT4gKF9jdHgudmFsdWUgPSAkZXZlbnQpLFxuICAgIHBsYWNlaG9sZGVyOiBcIlNlbGVjdFwiXG4gIH0sIHtcbiAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAoX29wZW5CbG9jayh0cnVlKSwgX2NyZWF0ZUJsb2NrKF9GcmFnbWVudCwgbnVsbCwgX3JlbmRlckxpc3QoX2N0eC5vcHRpb25zLCAoZ3JvdXApID0+IHtcbiAgICAgICAgcmV0dXJuIChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhfY29tcG9uZW50X2VsX29wdGlvbl9ncm91cCwge1xuICAgICAgICAgIGtleTogZ3JvdXAubGFiZWwsXG4gICAgICAgICAgbGFiZWw6IGdyb3VwLmxhYmVsXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAoX29wZW5CbG9jayh0cnVlKSwgX2NyZWF0ZUJsb2NrKF9GcmFnbWVudCwgbnVsbCwgX3JlbmRlckxpc3QoZ3JvdXAub3B0aW9ucywgKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhfY29tcG9uZW50X2VsX29wdGlvbiwge1xuICAgICAgICAgICAgICAgIGtleTogaXRlbS52YWx1ZSxcbiAgICAgICAgICAgICAgICBsYWJlbDogaXRlbS5sYWJlbCxcbiAgICAgICAgICAgICAgICB2YWx1ZTogaXRlbS52YWx1ZVxuICAgICAgICAgICAgICB9LCBudWxsLCA4IC8qIFBST1BTICovLCBbXCJsYWJlbFwiLCBcInZhbHVlXCJdKSlcbiAgICAgICAgICAgIH0pLCAxMjggLyogS0VZRURfRlJBR01FTlQgKi8pKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIF86IDJcbiAgICAgICAgfSwgMTAzMiAvKiBQUk9QUywgRFlOQU1JQ19TTE9UUyAqLywgW1wibGFiZWxcIl0pKVxuICAgICAgfSksIDEyOCAvKiBLRVlFRF9GUkFHTUVOVCAqLykpXG4gICAgXSksXG4gICAgXzogMVxuICB9LCA4IC8qIFBST1BTICovLCBbXCJtb2RlbFZhbHVlXCIsIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiXSkpXG59XG4gIFxuICAgIGNvbnN0IGRlbW9jb21wb25lbnRFeHBvcnQgPSB7XG4gICAgZGF0YSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG9wdGlvbnM6IFt7XG4gICAgICAgICAgbGFiZWw6ICdWaWxsZXMgY8OpbMOoYnJlcycsXG4gICAgICAgICAgb3B0aW9uczogW3tcbiAgICAgICAgICAgIHZhbHVlOiAnU2hhbmdoYWknLFxuICAgICAgICAgICAgbGFiZWw6ICdTaGFuZ2hhaSdcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICB2YWx1ZTogJ0JlaWppbmcnLFxuICAgICAgICAgICAgbGFiZWw6ICdCZWlqaW5nJ1xuICAgICAgICAgIH1dXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBsYWJlbDogJ05vbSBkZSB2aWxsZScsXG4gICAgICAgICAgb3B0aW9uczogW3tcbiAgICAgICAgICAgIHZhbHVlOiAnQ2hlbmdkdScsXG4gICAgICAgICAgICBsYWJlbDogJ0NoZW5nZHUnXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgdmFsdWU6ICdTaGVuemhlbicsXG4gICAgICAgICAgICBsYWJlbDogJ1NoZW56aGVuJ1xuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIHZhbHVlOiAnR3Vhbmd6aG91JyxcbiAgICAgICAgICAgIGxhYmVsOiAnR3Vhbmd6aG91J1xuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIHZhbHVlOiAnRGFsaWFuJyxcbiAgICAgICAgICAgIGxhYmVsOiAnRGFsaWFuJ1xuICAgICAgICAgIH1dXG4gICAgICAgIH1dLFxuICAgICAgICB2YWx1ZTogJydcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgICByZXR1cm4ge1xuICAgICAgbW91bnRlZCgpe1xuICAgICAgICB0aGlzLiRuZXh0VGljaygoKT0+e1xuICAgICAgICAgIGNvbnN0IGJsb2NrcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3ByZSBjb2RlOm5vdCguaGxqcyknKVxuICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoYmxvY2tzLCBobGpzLmhpZ2hsaWdodEJsb2NrKVxuICAgICAgICB9KVxuICAgICAgfSxcbiAgICAgIHJlbmRlcixcbiAgICAgIC4uLmRlbW9jb21wb25lbnRFeHBvcnRcbiAgICB9XG4gIH0pKCksXCJlbGVtZW50LWRlbW83XCI6IChmdW5jdGlvbigpIHtcbiAgICBcbiAgICBjb25zdCB7IHJlbmRlckxpc3Q6IF9yZW5kZXJMaXN0LCBGcmFnbWVudDogX0ZyYWdtZW50LCBvcGVuQmxvY2s6IF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrOiBfY3JlYXRlQmxvY2ssIHJlc29sdmVDb21wb25lbnQ6IF9yZXNvbHZlQ29tcG9uZW50LCBjcmVhdGVWTm9kZTogX2NyZWF0ZVZOb2RlLCB3aXRoQ3R4OiBfd2l0aEN0eCB9ID0gVnVlXG5cbmZ1bmN0aW9uIHJlbmRlciAoX2N0eCwgX2NhY2hlKSB7XG4gIGNvbnN0IF9jb21wb25lbnRfZWxfb3B0aW9uID0gX3Jlc29sdmVDb21wb25lbnQoXCJlbC1vcHRpb25cIilcbiAgY29uc3QgX2NvbXBvbmVudF9lbF9zZWxlY3QgPSBfcmVzb2x2ZUNvbXBvbmVudChcImVsLXNlbGVjdFwiKVxuXG4gIHJldHVybiAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9lbF9zZWxlY3QsIHtcbiAgICBtb2RlbFZhbHVlOiBfY3R4LnZhbHVlLFxuICAgIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOiAkZXZlbnQgPT4gKF9jdHgudmFsdWUgPSAkZXZlbnQpLFxuICAgIGZpbHRlcmFibGU6IFwiXCIsXG4gICAgcGxhY2Vob2xkZXI6IFwiU2VsZWN0XCJcbiAgfSwge1xuICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgIChfb3BlbkJsb2NrKHRydWUpLCBfY3JlYXRlQmxvY2soX0ZyYWdtZW50LCBudWxsLCBfcmVuZGVyTGlzdChfY3R4Lm9wdGlvbnMsIChpdGVtKSA9PiB7XG4gICAgICAgIHJldHVybiAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9lbF9vcHRpb24sIHtcbiAgICAgICAgICBrZXk6IGl0ZW0udmFsdWUsXG4gICAgICAgICAgbGFiZWw6IGl0ZW0ubGFiZWwsXG4gICAgICAgICAgdmFsdWU6IGl0ZW0udmFsdWVcbiAgICAgICAgfSwgbnVsbCwgOCAvKiBQUk9QUyAqLywgW1wibGFiZWxcIiwgXCJ2YWx1ZVwiXSkpXG4gICAgICB9KSwgMTI4IC8qIEtFWUVEX0ZSQUdNRU5UICovKSlcbiAgICBdKSxcbiAgICBfOiAxXG4gIH0sIDggLyogUFJPUFMgKi8sIFtcIm1vZGVsVmFsdWVcIiwgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCJdKSlcbn1cbiAgXG4gICAgY29uc3QgZGVtb2NvbXBvbmVudEV4cG9ydCA9IHtcbiAgICBkYXRhKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb3B0aW9uczogW3tcbiAgICAgICAgICB2YWx1ZTogJ09wdGlvbjEnLFxuICAgICAgICAgIGxhYmVsOiAnT3B0aW9uMSdcbiAgICAgICAgfSwge1xuICAgICAgICAgIHZhbHVlOiAnT3B0aW9uMicsXG4gICAgICAgICAgbGFiZWw6ICdPcHRpb24yJ1xuICAgICAgICB9LCB7XG4gICAgICAgICAgdmFsdWU6ICdPcHRpb24zJyxcbiAgICAgICAgICBsYWJlbDogJ09wdGlvbjMnXG4gICAgICAgIH0sIHtcbiAgICAgICAgICB2YWx1ZTogJ09wdGlvbjQnLFxuICAgICAgICAgIGxhYmVsOiAnT3B0aW9uNCdcbiAgICAgICAgfSwge1xuICAgICAgICAgIHZhbHVlOiAnT3B0aW9uNScsXG4gICAgICAgICAgbGFiZWw6ICdPcHRpb241J1xuICAgICAgICB9XSxcbiAgICAgICAgdmFsdWU6ICcnXG4gICAgICB9XG4gICAgfVxuICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIG1vdW50ZWQoKXtcbiAgICAgICAgdGhpcy4kbmV4dFRpY2soKCk9PntcbiAgICAgICAgICBjb25zdCBibG9ja3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdwcmUgY29kZTpub3QoLmhsanMpJylcbiAgICAgICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGJsb2NrcywgaGxqcy5oaWdobGlnaHRCbG9jaylcbiAgICAgICAgfSlcbiAgICAgIH0sXG4gICAgICByZW5kZXIsXG4gICAgICAuLi5kZW1vY29tcG9uZW50RXhwb3J0XG4gICAgfVxuICB9KSgpLFwiZWxlbWVudC1kZW1vOFwiOiAoZnVuY3Rpb24oKSB7XG4gICAgXG4gICAgY29uc3QgeyByZW5kZXJMaXN0OiBfcmVuZGVyTGlzdCwgRnJhZ21lbnQ6IF9GcmFnbWVudCwgb3BlbkJsb2NrOiBfb3BlbkJsb2NrLCBjcmVhdGVCbG9jazogX2NyZWF0ZUJsb2NrLCByZXNvbHZlQ29tcG9uZW50OiBfcmVzb2x2ZUNvbXBvbmVudCwgY3JlYXRlVk5vZGU6IF9jcmVhdGVWTm9kZSwgd2l0aEN0eDogX3dpdGhDdHggfSA9IFZ1ZVxuXG5mdW5jdGlvbiByZW5kZXIgKF9jdHgsIF9jYWNoZSkge1xuICBjb25zdCBfY29tcG9uZW50X2VsX29wdGlvbiA9IF9yZXNvbHZlQ29tcG9uZW50KFwiZWwtb3B0aW9uXCIpXG4gIGNvbnN0IF9jb21wb25lbnRfZWxfc2VsZWN0ID0gX3Jlc29sdmVDb21wb25lbnQoXCJlbC1zZWxlY3RcIilcblxuICByZXR1cm4gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9jb21wb25lbnRfZWxfc2VsZWN0LCB7XG4gICAgbW9kZWxWYWx1ZTogX2N0eC52YWx1ZSxcbiAgICBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjogJGV2ZW50ID0+IChfY3R4LnZhbHVlID0gJGV2ZW50KSxcbiAgICBtdWx0aXBsZTogXCJcIixcbiAgICBmaWx0ZXJhYmxlOiBcIlwiLFxuICAgIHJlbW90ZTogXCJcIixcbiAgICBcInJlc2VydmUta2V5d29yZFwiOiBcIlwiLFxuICAgIHBsYWNlaG9sZGVyOiBcIkVudHJleiB1biBtb3QtY2zDqVwiLFxuICAgIFwicmVtb3RlLW1ldGhvZFwiOiBfY3R4LnJlbW90ZU1ldGhvZCxcbiAgICBsb2FkaW5nOiBfY3R4LmxvYWRpbmdcbiAgfSwge1xuICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgIChfb3BlbkJsb2NrKHRydWUpLCBfY3JlYXRlQmxvY2soX0ZyYWdtZW50LCBudWxsLCBfcmVuZGVyTGlzdChfY3R4Lm9wdGlvbnMsIChpdGVtKSA9PiB7XG4gICAgICAgIHJldHVybiAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9lbF9vcHRpb24sIHtcbiAgICAgICAgICBrZXk6IGl0ZW0udmFsdWUsXG4gICAgICAgICAgbGFiZWw6IGl0ZW0ubGFiZWwsXG4gICAgICAgICAgdmFsdWU6IGl0ZW0udmFsdWVcbiAgICAgICAgfSwgbnVsbCwgOCAvKiBQUk9QUyAqLywgW1wibGFiZWxcIiwgXCJ2YWx1ZVwiXSkpXG4gICAgICB9KSwgMTI4IC8qIEtFWUVEX0ZSQUdNRU5UICovKSlcbiAgICBdKSxcbiAgICBfOiAxXG4gIH0sIDggLyogUFJPUFMgKi8sIFtcIm1vZGVsVmFsdWVcIiwgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCIsIFwicmVtb3RlLW1ldGhvZFwiLCBcImxvYWRpbmdcIl0pKVxufVxuICBcbiAgICBjb25zdCBkZW1vY29tcG9uZW50RXhwb3J0ID0ge1xuICAgIGRhdGEoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBvcHRpb25zOiBbXSxcbiAgICAgICAgdmFsdWU6IFtdLFxuICAgICAgICBsaXN0OiBbXSxcbiAgICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICAgIHN0YXRlczogW1wiQWxhYmFtYVwiLCBcIkFsYXNrYVwiLCBcIkFyaXpvbmFcIixcbiAgICAgICAgXCJBcmthbnNhc1wiLCBcIkNhbGlmb3JuaWFcIiwgXCJDb2xvcmFkb1wiLFxuICAgICAgICBcIkNvbm5lY3RpY3V0XCIsIFwiRGVsYXdhcmVcIiwgXCJGbG9yaWRhXCIsXG4gICAgICAgIFwiR2VvcmdpYVwiLCBcIkhhd2FpaVwiLCBcIklkYWhvXCIsIFwiSWxsaW5vaXNcIixcbiAgICAgICAgXCJJbmRpYW5hXCIsIFwiSW93YVwiLCBcIkthbnNhc1wiLCBcIktlbnR1Y2t5XCIsXG4gICAgICAgIFwiTG91aXNpYW5hXCIsIFwiTWFpbmVcIiwgXCJNYXJ5bGFuZFwiLFxuICAgICAgICBcIk1hc3NhY2h1c2V0dHNcIiwgXCJNaWNoaWdhblwiLCBcIk1pbm5lc290YVwiLFxuICAgICAgICBcIk1pc3Npc3NpcHBpXCIsIFwiTWlzc291cmlcIiwgXCJNb250YW5hXCIsXG4gICAgICAgIFwiTmVicmFza2FcIiwgXCJOZXZhZGFcIiwgXCJOZXcgSGFtcHNoaXJlXCIsXG4gICAgICAgIFwiTmV3IEplcnNleVwiLCBcIk5ldyBNZXhpY29cIiwgXCJOZXcgWW9ya1wiLFxuICAgICAgICBcIk5vcnRoIENhcm9saW5hXCIsIFwiTm9ydGggRGFrb3RhXCIsIFwiT2hpb1wiLFxuICAgICAgICBcIk9rbGFob21hXCIsIFwiT3JlZ29uXCIsIFwiUGVubnN5bHZhbmlhXCIsXG4gICAgICAgIFwiUmhvZGUgSXNsYW5kXCIsIFwiU291dGggQ2Fyb2xpbmFcIixcbiAgICAgICAgXCJTb3V0aCBEYWtvdGFcIiwgXCJUZW5uZXNzZWVcIiwgXCJUZXhhc1wiLFxuICAgICAgICBcIlV0YWhcIiwgXCJWZXJtb250XCIsIFwiVmlyZ2luaWFcIixcbiAgICAgICAgXCJXYXNoaW5ndG9uXCIsIFwiV2VzdCBWaXJnaW5pYVwiLCBcIldpc2NvbnNpblwiLFxuICAgICAgICBcIld5b21pbmdcIl1cbiAgICAgIH1cbiAgICB9LFxuICAgIG1vdW50ZWQoKSB7XG4gICAgICB0aGlzLmxpc3QgPSB0aGlzLnN0YXRlcy5tYXAoaXRlbSA9PiB7XG4gICAgICAgIHJldHVybiB7IHZhbHVlOiBgdmFsdWU6JHtpdGVtfWAsIGxhYmVsOiBgbGFiZWw6JHtpdGVtfWAgfTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgcmVtb3RlTWV0aG9kKHF1ZXJ5KSB7XG4gICAgICAgIGlmIChxdWVyeSAhPT0gJycpIHtcbiAgICAgICAgICB0aGlzLmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLmxpc3QuZmlsdGVyKGl0ZW0gPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gaXRlbS5sYWJlbC50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgICAgICAgLmluZGV4T2YocXVlcnkudG9Mb3dlckNhc2UoKSkgPiAtMTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sIDIwMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5vcHRpb25zID0gW107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgICByZXR1cm4ge1xuICAgICAgbW91bnRlZCgpe1xuICAgICAgICB0aGlzLiRuZXh0VGljaygoKT0+e1xuICAgICAgICAgIGNvbnN0IGJsb2NrcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3ByZSBjb2RlOm5vdCguaGxqcyknKVxuICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoYmxvY2tzLCBobGpzLmhpZ2hsaWdodEJsb2NrKVxuICAgICAgICB9KVxuICAgICAgfSxcbiAgICAgIHJlbmRlcixcbiAgICAgIC4uLmRlbW9jb21wb25lbnRFeHBvcnRcbiAgICB9XG4gIH0pKCksXCJlbGVtZW50LWRlbW85XCI6IChmdW5jdGlvbigpIHtcbiAgICBcbiAgICBjb25zdCB7IHJlbmRlckxpc3Q6IF9yZW5kZXJMaXN0LCBGcmFnbWVudDogX0ZyYWdtZW50LCBvcGVuQmxvY2s6IF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrOiBfY3JlYXRlQmxvY2ssIHJlc29sdmVDb21wb25lbnQ6IF9yZXNvbHZlQ29tcG9uZW50LCBjcmVhdGVWTm9kZTogX2NyZWF0ZVZOb2RlLCB3aXRoQ3R4OiBfd2l0aEN0eCB9ID0gVnVlXG5cbmZ1bmN0aW9uIHJlbmRlciAoX2N0eCwgX2NhY2hlKSB7XG4gIGNvbnN0IF9jb21wb25lbnRfZWxfb3B0aW9uID0gX3Jlc29sdmVDb21wb25lbnQoXCJlbC1vcHRpb25cIilcbiAgY29uc3QgX2NvbXBvbmVudF9lbF9zZWxlY3QgPSBfcmVzb2x2ZUNvbXBvbmVudChcImVsLXNlbGVjdFwiKVxuXG4gIHJldHVybiAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9lbF9zZWxlY3QsIHtcbiAgICBtb2RlbFZhbHVlOiBfY3R4LnZhbHVlLFxuICAgIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOiAkZXZlbnQgPT4gKF9jdHgudmFsdWUgPSAkZXZlbnQpLFxuICAgIG11bHRpcGxlOiBcIlwiLFxuICAgIGZpbHRlcmFibGU6IFwiXCIsXG4gICAgXCJhbGxvdy1jcmVhdGVcIjogXCJcIixcbiAgICBcImRlZmF1bHQtZmlyc3Qtb3B0aW9uXCI6IFwiXCIsXG4gICAgcGxhY2Vob2xkZXI6IFwiQ2hvaXNpc3NleiBsZXMgdGFncyBkZSB2b3MgYXJ0aWNsZXNcIlxuICB9LCB7XG4gICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgKF9vcGVuQmxvY2sodHJ1ZSksIF9jcmVhdGVCbG9jayhfRnJhZ21lbnQsIG51bGwsIF9yZW5kZXJMaXN0KF9jdHgub3B0aW9ucywgKGl0ZW0pID0+IHtcbiAgICAgICAgcmV0dXJuIChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhfY29tcG9uZW50X2VsX29wdGlvbiwge1xuICAgICAgICAgIGtleTogaXRlbS52YWx1ZSxcbiAgICAgICAgICBsYWJlbDogaXRlbS5sYWJlbCxcbiAgICAgICAgICB2YWx1ZTogaXRlbS52YWx1ZVxuICAgICAgICB9LCBudWxsLCA4IC8qIFBST1BTICovLCBbXCJsYWJlbFwiLCBcInZhbHVlXCJdKSlcbiAgICAgIH0pLCAxMjggLyogS0VZRURfRlJBR01FTlQgKi8pKVxuICAgIF0pLFxuICAgIF86IDFcbiAgfSwgOCAvKiBQUk9QUyAqLywgW1wibW9kZWxWYWx1ZVwiLCBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIl0pKVxufVxuICBcbiAgICBjb25zdCBkZW1vY29tcG9uZW50RXhwb3J0ID0ge1xuICAgIGRhdGEoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBvcHRpb25zOiBbe1xuICAgICAgICAgIHZhbHVlOiAnSFRNTCcsXG4gICAgICAgICAgbGFiZWw6ICdIVE1MJ1xuICAgICAgICB9LCB7XG4gICAgICAgICAgdmFsdWU6ICdDU1MnLFxuICAgICAgICAgIGxhYmVsOiAnQ1NTJ1xuICAgICAgICB9LCB7XG4gICAgICAgICAgdmFsdWU6ICdKYXZhU2NyaXB0JyxcbiAgICAgICAgICBsYWJlbDogJ0phdmFTY3JpcHQnXG4gICAgICAgIH1dLFxuICAgICAgICB2YWx1ZTogW11cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgICByZXR1cm4ge1xuICAgICAgbW91bnRlZCgpe1xuICAgICAgICB0aGlzLiRuZXh0VGljaygoKT0+e1xuICAgICAgICAgIGNvbnN0IGJsb2NrcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3ByZSBjb2RlOm5vdCguaGxqcyknKVxuICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoYmxvY2tzLCBobGpzLmhpZ2hsaWdodEJsb2NrKVxuICAgICAgICB9KVxuICAgICAgfSxcbiAgICAgIHJlbmRlcixcbiAgICAgIC4uLmRlbW9jb21wb25lbnRFeHBvcnRcbiAgICB9XG4gIH0pKCksXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICA8L3NjcmlwdD5cbiAgIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/vue-loader/dist/templateLoader.js?!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/fr-FR/select.md?vue&type=template&id=e159e8ba\n");

/***/ })

}]);