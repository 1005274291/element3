(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[91],{

/***/ "./examples/docs/en-US/table.md":
/*!**************************************!*\
  !*** ./examples/docs/en-US/table.md ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _table_md_vue_type_template_id_57ef6f68__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./table.md?vue&type=template&id=57ef6f68 */ \"./examples/docs/en-US/table.md?vue&type=template&id=57ef6f68\");\n/* harmony import */ var _table_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./table.md?vue&type=script&lang=js */ \"./examples/docs/en-US/table.md?vue&type=script&lang=js\");\n/* empty/unused harmony star reexport */\n\n\n_table_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].render = _table_md_vue_type_template_id_57ef6f68__WEBPACK_IMPORTED_MODULE_0__[\"render\"]\n/* hot reload */\nif (true) {\n  _table_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].__hmrId = \"57ef6f68\"\n  const api = __VUE_HMR_RUNTIME__\n  module.hot.accept()\n  if (!api.createRecord('57ef6f68', _table_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])) {\n    api.reload('57ef6f68', _table_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])\n  }\n  \n  module.hot.accept(/*! ./table.md?vue&type=template&id=57ef6f68 */ \"./examples/docs/en-US/table.md?vue&type=template&id=57ef6f68\", function(__WEBPACK_OUTDATED_DEPENDENCIES__) { /* harmony import */ _table_md_vue_type_template_id_57ef6f68__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./table.md?vue&type=template&id=57ef6f68 */ \"./examples/docs/en-US/table.md?vue&type=template&id=57ef6f68\");\n(() => {\n    api.rerender('57ef6f68', _table_md_vue_type_template_id_57ef6f68__WEBPACK_IMPORTED_MODULE_0__[\"render\"])\n  })(__WEBPACK_OUTDATED_DEPENDENCIES__); }.bind(this))\n\n}\n\n_table_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].__file = \"examples/docs/en-US/table.md\"\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (_table_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9leGFtcGxlcy9kb2NzL2VuLVVTL3RhYmxlLm1kP2Y1YmIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUEsd0NBQWlFO0FBQ1Y7QUFDTDtBQUNsRCx5RUFBTSxVQUFVLDhFQUFNO0FBQ3RCO0FBQ0EsSUFBSSxJQUFVO0FBQ2QsRUFBRSx5RUFBTTtBQUNSO0FBQ0E7QUFDQSxvQ0FBb0MseUVBQU07QUFDMUMsMkJBQTJCLHlFQUFNO0FBQ2pDOztBQUVBLG9CQUFvQiw4R0FBMEMsRUFBRTtBQUFBO0FBQ2hFLDZCQUE2Qiw4RUFBTTtBQUNuQyxHQUFHOztBQUVIOztBQUVBLHlFQUFNOztBQUVTLHdJIiwiZmlsZSI6Ii4vZXhhbXBsZXMvZG9jcy9lbi1VUy90YWJsZS5tZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbmRlciB9IGZyb20gXCIuL3RhYmxlLm1kP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTU3ZWY2ZjY4XCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vdGFibGUubWQ/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuZXhwb3J0ICogZnJvbSBcIi4vdGFibGUubWQ/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuc2NyaXB0LnJlbmRlciA9IHJlbmRlclxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgc2NyaXB0Ll9faG1ySWQgPSBcIjU3ZWY2ZjY4XCJcbiAgY29uc3QgYXBpID0gX19WVUVfSE1SX1JVTlRJTUVfX1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghYXBpLmNyZWF0ZVJlY29yZCgnNTdlZjZmNjgnLCBzY3JpcHQpKSB7XG4gICAgYXBpLnJlbG9hZCgnNTdlZjZmNjgnLCBzY3JpcHQpXG4gIH1cbiAgXG4gIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi90YWJsZS5tZD92dWUmdHlwZT10ZW1wbGF0ZSZpZD01N2VmNmY2OFwiLCAoKSA9PiB7XG4gICAgYXBpLnJlcmVuZGVyKCc1N2VmNmY2OCcsIHJlbmRlcilcbiAgfSlcblxufVxuXG5zY3JpcHQuX19maWxlID0gXCJleGFtcGxlcy9kb2NzL2VuLVVTL3RhYmxlLm1kXCJcblxuZXhwb3J0IGRlZmF1bHQgc2NyaXB0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./examples/docs/en-US/table.md\n");

/***/ }),

/***/ "./examples/docs/en-US/table.md?vue&type=script&lang=js":
/*!**************************************************************!*\
  !*** ./examples/docs/en-US/table.md?vue&type=script&lang=js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_dist_index_js_ref_3_0_build_md_loader_index_js_table_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib!../../../node_modules/vue-loader/dist??ref--3-0!../../../build/md-loader!./table.md?vue&type=script&lang=js */ \"./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/en-US/table.md?vue&type=script&lang=js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_dist_index_js_ref_3_0_build_md_loader_index_js_table_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; });\n\n/* empty/unused harmony star reexport */ \n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9leGFtcGxlcy9kb2NzL2VuLVVTL3RhYmxlLm1kP2M4MWYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSx3Q0FBME0iLCJmaWxlIjoiLi9leGFtcGxlcy9kb2NzL2VuLVVTL3RhYmxlLm1kP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3JlZi0tMy0wIS4uLy4uLy4uL2J1aWxkL21kLWxvYWRlci9pbmRleC5qcyEuL3RhYmxlLm1kP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCI7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3JlZi0tMy0wIS4uLy4uLy4uL2J1aWxkL21kLWxvYWRlci9pbmRleC5qcyEuL3RhYmxlLm1kP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./examples/docs/en-US/table.md?vue&type=script&lang=js\n");

/***/ }),

/***/ "./examples/docs/en-US/table.md?vue&type=template&id=57ef6f68":
/*!********************************************************************!*\
  !*** ./examples/docs/en-US/table.md?vue&type=template&id=57ef6f68 ***!
  \********************************************************************/
/*! exports provided: render */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_vue_loader_dist_templateLoader_js_ref_5_node_modules_vue_loader_dist_index_js_ref_3_0_build_md_loader_index_js_table_md_vue_type_template_id_57ef6f68__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/vue-loader/dist/templateLoader.js??ref--5!../../../node_modules/vue-loader/dist??ref--3-0!../../../build/md-loader!./table.md?vue&type=template&id=57ef6f68 */ \"./node_modules/vue-loader/dist/templateLoader.js?!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/en-US/table.md?vue&type=template&id=57ef6f68\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return _node_modules_vue_loader_dist_templateLoader_js_ref_5_node_modules_vue_loader_dist_index_js_ref_3_0_build_md_loader_index_js_table_md_vue_type_template_id_57ef6f68__WEBPACK_IMPORTED_MODULE_0__[\"render\"]; });\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9leGFtcGxlcy9kb2NzL2VuLVVTL3RhYmxlLm1kPzI2ZjciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUEiLCJmaWxlIjoiLi9leGFtcGxlcy9kb2NzL2VuLVVTL3RhYmxlLm1kP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTU3ZWY2ZjY4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC90ZW1wbGF0ZUxvYWRlci5qcz8/cmVmLS01IS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3JlZi0tMy0wIS4uLy4uLy4uL2J1aWxkL21kLWxvYWRlci9pbmRleC5qcyEuL3RhYmxlLm1kP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTU3ZWY2ZjY4XCIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./examples/docs/en-US/table.md?vue&type=template&id=57ef6f68\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/en-US/table.md?vue&type=script&lang=js":
/*!*********************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/vue-loader/dist??ref--3-0!./build/md-loader!./examples/docs/en-US/table.md?vue&type=script&lang=js ***!
  \*********************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var highlight_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! highlight.js */ \"./node_modules/highlight.js/lib/index.js\");\n/* harmony import */ var highlight_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(highlight_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm-bundler.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'component-doc',\n  components: {\n    \"element-demo0\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_table_column = _resolveComponent(\"el-table-column\");\n\n        const _component_el_table = _resolveComponent(\"el-table\");\n\n        return _openBlock(), _createBlock(_component_el_table, {\n          data: _ctx.tableData,\n          style: {\n            \"width\": \"100%\"\n          }\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_table_column, {\n            prop: \"date\",\n            label: \"Date\",\n            width: \"180\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"name\",\n            label: \"Name\",\n            width: \"180\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"address\",\n            label: \"Address\"\n          })]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"data\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            tableData: [{\n              date: '2016-05-03',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }, {\n              date: '2016-05-02',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }, {\n              date: '2016-05-04',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }, {\n              date: '2016-05-01',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }]\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo1\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_table_column = _resolveComponent(\"el-table-column\");\n\n        const _component_el_table = _resolveComponent(\"el-table\");\n\n        return _openBlock(), _createBlock(_component_el_table, {\n          data: _ctx.tableData,\n          stripe: \"\",\n          style: {\n            \"width\": \"100%\"\n          }\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_table_column, {\n            prop: \"date\",\n            label: \"Date\",\n            width: \"180\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"name\",\n            label: \"Name\",\n            width: \"180\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"address\",\n            label: \"Address\"\n          })]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"data\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            tableData: [{\n              date: '2016-05-03',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }, {\n              date: '2016-05-02',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }, {\n              date: '2016-05-04',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }, {\n              date: '2016-05-01',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }]\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo2\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_table_column = _resolveComponent(\"el-table-column\");\n\n        const _component_el_table = _resolveComponent(\"el-table\");\n\n        return _openBlock(), _createBlock(_component_el_table, {\n          data: _ctx.tableData,\n          border: \"\",\n          style: {\n            \"width\": \"100%\"\n          }\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_table_column, {\n            prop: \"date\",\n            label: \"Date\",\n            width: \"180\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"name\",\n            label: \"Name\",\n            width: \"180\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"address\",\n            label: \"Address\"\n          })]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"data\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            tableData: [{\n              date: '2016-05-03',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }, {\n              date: '2016-05-02',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }, {\n              date: '2016-05-04',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }, {\n              date: '2016-05-01',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }]\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo3\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_table_column = _resolveComponent(\"el-table-column\");\n\n        const _component_el_table = _resolveComponent(\"el-table\");\n\n        return _openBlock(), _createBlock(_component_el_table, {\n          data: _ctx.tableData,\n          style: {\n            \"width\": \"100%\"\n          },\n          \"row-class-name\": _ctx.tableRowClassName\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_table_column, {\n            prop: \"date\",\n            label: \"Date\",\n            width: \"180\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"name\",\n            label: \"Name\",\n            width: \"180\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"address\",\n            label: \"Address\"\n          })]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"data\", \"row-class-name\"]);\n      }\n\n      const democomponentExport = {\n        methods: {\n          tableRowClassName({\n            row,\n            rowIndex\n          }) {\n            if (rowIndex === 1) {\n              return 'warning-row';\n            } else if (rowIndex === 3) {\n              return 'success-row';\n            }\n\n            return '';\n          }\n\n        },\n\n        data() {\n          return {\n            tableData: [{\n              date: '2016-05-03',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }, {\n              date: '2016-05-02',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }, {\n              date: '2016-05-04',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }, {\n              date: '2016-05-01',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }]\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo4\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_table_column = _resolveComponent(\"el-table-column\");\n\n        const _component_el_table = _resolveComponent(\"el-table\");\n\n        return _openBlock(), _createBlock(_component_el_table, {\n          data: _ctx.tableData,\n          height: \"250\",\n          style: {\n            \"width\": \"100%\"\n          }\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_table_column, {\n            prop: \"date\",\n            label: \"Date\",\n            width: \"180\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"name\",\n            label: \"Name\",\n            width: \"180\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"address\",\n            label: \"Address\"\n          })]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"data\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            tableData: [{\n              date: '2016-05-03',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }, {\n              date: '2016-05-02',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }, {\n              date: '2016-05-04',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }, {\n              date: '2016-05-01',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }, {\n              date: '2016-05-08',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }, {\n              date: '2016-05-06',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }, {\n              date: '2016-05-07',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }]\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo5\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        createTextVNode: _createTextVNode,\n        withCtx: _withCtx,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_table_column = _resolveComponent(\"el-table-column\");\n\n        const _component_el_button = _resolveComponent(\"el-button\");\n\n        const _component_el_table = _resolveComponent(\"el-table\");\n\n        return _openBlock(), _createBlock(_component_el_table, {\n          data: _ctx.tableData,\n          style: {\n            \"width\": \"100%\"\n          }\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_table_column, {\n            fixed: \"\",\n            prop: \"date\",\n            label: \"Date\",\n            width: \"150\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"name\",\n            label: \"Name\",\n            width: \"120\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"state\",\n            label: \"State\",\n            width: \"120\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"city\",\n            label: \"City\",\n            width: \"120\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"address\",\n            label: \"Address\",\n            width: \"300\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"zip\",\n            label: \"Zip\",\n            width: \"120\"\n          }), _createVNode(_component_el_table_column, {\n            fixed: \"right\",\n            label: \"Operations\",\n            width: \"120\"\n          }, {\n            default: _withCtx(() => [_createVNode(\"template\", {\n              \"slot-scope\": \"scope\"\n            }, [_createVNode(_component_el_button, {\n              onClick: _ctx.handleClick,\n              type: \"text\",\n              size: \"small\"\n            }, {\n              default: _withCtx(() => [_createTextVNode(\"Detail\")]),\n              _: 1\n            }, 8\n            /* PROPS */\n            , [\"onClick\"]), _createVNode(_component_el_button, {\n              type: \"text\",\n              size: \"small\"\n            }, {\n              default: _withCtx(() => [_createTextVNode(\"Edit\")]),\n              _: 1\n            })])]),\n            _: 1\n          })]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"data\"]);\n      }\n\n      const democomponentExport = {\n        methods: {\n          handleClick() {\n            console.log('click');\n          }\n\n        },\n\n        data() {\n          return {\n            tableData: [{\n              date: '2016-05-03',\n              name: 'Tom',\n              state: 'California',\n              city: 'Los Angeles',\n              address: 'No. 189, Grove St, Los Angeles',\n              zip: 'CA 90036',\n              tag: 'Home'\n            }, {\n              date: '2016-05-02',\n              name: 'Tom',\n              state: 'California',\n              city: 'Los Angeles',\n              address: 'No. 189, Grove St, Los Angeles',\n              zip: 'CA 90036',\n              tag: 'Office'\n            }, {\n              date: '2016-05-04',\n              name: 'Tom',\n              state: 'California',\n              city: 'Los Angeles',\n              address: 'No. 189, Grove St, Los Angeles',\n              zip: 'CA 90036',\n              tag: 'Home'\n            }, {\n              date: '2016-05-01',\n              name: 'Tom',\n              state: 'California',\n              city: 'Los Angeles',\n              address: 'No. 189, Grove St, Los Angeles',\n              zip: 'CA 90036',\n              tag: 'Office'\n            }]\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo6\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_table_column = _resolveComponent(\"el-table-column\");\n\n        const _component_el_table = _resolveComponent(\"el-table\");\n\n        return _openBlock(), _createBlock(_component_el_table, {\n          data: _ctx.tableData,\n          style: {\n            \"width\": \"100%\"\n          },\n          height: \"250\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_table_column, {\n            fixed: \"\",\n            prop: \"date\",\n            label: \"Date\",\n            width: \"150\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"name\",\n            label: \"Name\",\n            width: \"120\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"state\",\n            label: \"State\",\n            width: \"120\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"city\",\n            label: \"City\",\n            width: \"120\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"address\",\n            label: \"Address\",\n            width: \"300\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"zip\",\n            label: \"Zip\",\n            width: \"120\"\n          })]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"data\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            tableData: [{\n              date: '2016-05-03',\n              name: 'Tom',\n              state: 'California',\n              city: 'Los Angeles',\n              address: 'No. 189, Grove St, Los Angeles',\n              zip: 'CA 90036'\n            }, {\n              date: '2016-05-02',\n              name: 'Tom',\n              state: 'California',\n              city: 'Los Angeles',\n              address: 'No. 189, Grove St, Los Angeles',\n              zip: 'CA 90036'\n            }, {\n              date: '2016-05-04',\n              name: 'Tom',\n              state: 'California',\n              city: 'Los Angeles',\n              address: 'No. 189, Grove St, Los Angeles',\n              zip: 'CA 90036'\n            }, {\n              date: '2016-05-01',\n              name: 'Tom',\n              state: 'California',\n              city: 'Los Angeles',\n              address: 'No. 189, Grove St, Los Angeles',\n              zip: 'CA 90036'\n            }, {\n              date: '2016-05-08',\n              name: 'Tom',\n              state: 'California',\n              city: 'Los Angeles',\n              address: 'No. 189, Grove St, Los Angeles',\n              zip: 'CA 90036'\n            }, {\n              date: '2016-05-06',\n              name: 'Tom',\n              state: 'California',\n              city: 'Los Angeles',\n              address: 'No. 189, Grove St, Los Angeles',\n              zip: 'CA 90036'\n            }, {\n              date: '2016-05-07',\n              name: 'Tom',\n              state: 'California',\n              city: 'Los Angeles',\n              address: 'No. 189, Grove St, Los Angeles',\n              zip: 'CA 90036'\n            }]\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo7\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        createTextVNode: _createTextVNode,\n        withModifiers: _withModifiers,\n        withCtx: _withCtx,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_table_column = _resolveComponent(\"el-table-column\");\n\n        const _component_el_button = _resolveComponent(\"el-button\");\n\n        const _component_el_table = _resolveComponent(\"el-table\");\n\n        return _openBlock(), _createBlock(_component_el_table, {\n          data: _ctx.tableData,\n          style: {\n            \"width\": \"100%\"\n          },\n          \"max-height\": \"250\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_table_column, {\n            fixed: \"\",\n            prop: \"date\",\n            label: \"Date\",\n            width: \"150\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"name\",\n            label: \"Name\",\n            width: \"120\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"state\",\n            label: \"State\",\n            width: \"120\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"city\",\n            label: \"City\",\n            width: \"120\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"address\",\n            label: \"Address\",\n            width: \"300\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"zip\",\n            label: \"Zip\",\n            width: \"120\"\n          }), _createVNode(_component_el_table_column, {\n            fixed: \"right\",\n            label: \"Operations\",\n            width: \"120\"\n          }, {\n            default: _withCtx(() => [_createVNode(\"template\", {\n              \"slot-scope\": \"scope\"\n            }, [_createVNode(_component_el_button, {\n              onClick: _withModifiers($event => _ctx.deleteRow(_ctx.scope.$index, _ctx.tableData), [\"prevent\"]),\n              type: \"text\",\n              size: \"small\"\n            }, {\n              default: _withCtx(() => [_createTextVNode(\" Remove \")]),\n              _: 1\n            }, 8\n            /* PROPS */\n            , [\"onClick\"])])]),\n            _: 1\n          })]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"data\"]);\n      }\n\n      const democomponentExport = {\n        methods: {\n          deleteRow(index, rows) {\n            rows.splice(index, 1);\n          }\n\n        },\n\n        data() {\n          return {\n            tableData: [{\n              date: '2016-05-03',\n              name: 'Tom',\n              state: 'California',\n              city: 'Los Angeles',\n              address: 'No. 189, Grove St, Los Angeles',\n              zip: 'CA 90036'\n            }, {\n              date: '2016-05-02',\n              name: 'Tom',\n              state: 'California',\n              city: 'Los Angeles',\n              address: 'No. 189, Grove St, Los Angeles',\n              zip: 'CA 90036'\n            }, {\n              date: '2016-05-04',\n              name: 'Tom',\n              state: 'California',\n              city: 'Los Angeles',\n              address: 'No. 189, Grove St, Los Angeles',\n              zip: 'CA 90036'\n            }, {\n              date: '2016-05-01',\n              name: 'Tom',\n              state: 'California',\n              city: 'Los Angeles',\n              address: 'No. 189, Grove St, Los Angeles',\n              zip: 'CA 90036'\n            }, {\n              date: '2016-05-08',\n              name: 'Tom',\n              state: 'California',\n              city: 'Los Angeles',\n              address: 'No. 189, Grove St, Los Angeles',\n              zip: 'CA 90036'\n            }, {\n              date: '2016-05-06',\n              name: 'Tom',\n              state: 'California',\n              city: 'Los Angeles',\n              address: 'No. 189, Grove St, Los Angeles',\n              zip: 'CA 90036'\n            }, {\n              date: '2016-05-07',\n              name: 'Tom',\n              state: 'California',\n              city: 'Los Angeles',\n              address: 'No. 189, Grove St, Los Angeles',\n              zip: 'CA 90036'\n            }]\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo8\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_table_column = _resolveComponent(\"el-table-column\");\n\n        const _component_el_table = _resolveComponent(\"el-table\");\n\n        return _openBlock(), _createBlock(_component_el_table, {\n          data: _ctx.tableData,\n          style: {\n            \"width\": \"100%\"\n          }\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_table_column, {\n            prop: \"date\",\n            label: \"Date\",\n            width: \"150\"\n          }), _createVNode(_component_el_table_column, {\n            label: \"Delivery Info\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_table_column, {\n              prop: \"name\",\n              label: \"Name\",\n              width: \"120\"\n            }), _createVNode(_component_el_table_column, {\n              label: \"Address Info\"\n            }, {\n              default: _withCtx(() => [_createVNode(_component_el_table_column, {\n                prop: \"state\",\n                label: \"State\",\n                width: \"120\"\n              }), _createVNode(_component_el_table_column, {\n                prop: \"city\",\n                label: \"City\",\n                width: \"120\"\n              }), _createVNode(_component_el_table_column, {\n                prop: \"address\",\n                label: \"Address\",\n                width: \"300\"\n              }), _createVNode(_component_el_table_column, {\n                prop: \"zip\",\n                label: \"Zip\",\n                width: \"120\"\n              })]),\n              _: 1\n            })]),\n            _: 1\n          })]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"data\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            tableData: [{\n              date: '2016-05-03',\n              name: 'Tom',\n              state: 'California',\n              city: 'Los Angeles',\n              address: 'No. 189, Grove St, Los Angeles',\n              zip: 'CA 90036'\n            }, {\n              date: '2016-05-02',\n              name: 'Tom',\n              state: 'California',\n              city: 'Los Angeles',\n              address: 'No. 189, Grove St, Los Angeles',\n              zip: 'CA 90036'\n            }, {\n              date: '2016-05-04',\n              name: 'Tom',\n              state: 'California',\n              city: 'Los Angeles',\n              address: 'No. 189, Grove St, Los Angeles',\n              zip: 'CA 90036'\n            }, {\n              date: '2016-05-01',\n              name: 'Tom',\n              state: 'California',\n              city: 'Los Angeles',\n              address: 'No. 189, Grove St, Los Angeles',\n              zip: 'CA 90036'\n            }, {\n              date: '2016-05-08',\n              name: 'Tom',\n              state: 'California',\n              city: 'Los Angeles',\n              address: 'No. 189, Grove St, Los Angeles',\n              zip: 'CA 90036'\n            }, {\n              date: '2016-05-06',\n              name: 'Tom',\n              state: 'California',\n              city: 'Los Angeles',\n              address: 'No. 189, Grove St, Los Angeles',\n              zip: 'CA 90036'\n            }, {\n              date: '2016-05-07',\n              name: 'Tom',\n              state: 'California',\n              city: 'Los Angeles',\n              address: 'No. 189, Grove St, Los Angeles',\n              zip: 'CA 90036'\n            }]\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo9\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx,\n        createTextVNode: _createTextVNode,\n        Fragment: _Fragment,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_table_column = _resolveComponent(\"el-table-column\");\n\n        const _component_el_table = _resolveComponent(\"el-table\");\n\n        const _component_el_button = _resolveComponent(\"el-button\");\n\n        return _openBlock(), _createBlock(_Fragment, null, [_createVNode(_component_el_table, {\n          ref: \"singleTable\",\n          data: _ctx.tableData,\n          \"highlight-current-row\": \"\",\n          \"onCurrent-change\": _ctx.handleCurrentChange,\n          style: {\n            \"width\": \"100%\"\n          }\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_table_column, {\n            type: \"index\",\n            width: \"50\"\n          }), _createVNode(_component_el_table_column, {\n            property: \"date\",\n            label: \"Date\",\n            width: \"120\"\n          }), _createVNode(_component_el_table_column, {\n            property: \"name\",\n            label: \"Name\",\n            width: \"120\"\n          }), _createVNode(_component_el_table_column, {\n            property: \"address\",\n            label: \"Address\"\n          })]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"data\", \"onCurrent-change\"]), _createVNode(\"div\", {\n          style: {\n            \"margin-top\": \"20px\"\n          }\n        }, [_createVNode(_component_el_button, {\n          onClick: $event => _ctx.setCurrent(_ctx.tableData[1])\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"Select second row\")]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"onClick\"]), _createVNode(_component_el_button, {\n          onClick: $event => _ctx.setCurrent()\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"Clear selection\")]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"onClick\"])])], 64\n        /* STABLE_FRAGMENT */\n        );\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            tableData: [{\n              date: '2016-05-03',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }, {\n              date: '2016-05-02',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }, {\n              date: '2016-05-04',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }, {\n              date: '2016-05-01',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }],\n            currentRow: null\n          };\n        },\n\n        methods: {\n          setCurrent(row) {\n            this.$refs.singleTable.setCurrentRow(row);\n          },\n\n          handleCurrentChange(val) {\n            this.currentRow = val;\n          }\n\n        }\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo10\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        toDisplayString: _toDisplayString,\n        withCtx: _withCtx,\n        createTextVNode: _createTextVNode,\n        Fragment: _Fragment,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_table_column = _resolveComponent(\"el-table-column\");\n\n        const _component_el_table = _resolveComponent(\"el-table\");\n\n        const _component_el_button = _resolveComponent(\"el-button\");\n\n        return _openBlock(), _createBlock(_Fragment, null, [_createVNode(_component_el_table, {\n          ref: \"multipleTable\",\n          data: _ctx.tableData,\n          style: {\n            \"width\": \"100%\"\n          },\n          \"onSelection-change\": _ctx.handleSelectionChange\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_table_column, {\n            type: \"selection\",\n            width: \"55\"\n          }), _createVNode(_component_el_table_column, {\n            label: \"Date\",\n            width: \"120\"\n          }, {\n            default: _withCtx(() => [_createVNode(\"template\", {\n              \"slot-scope\": \"scope\"\n            }, _toDisplayString(_ctx.scope.row.date), 1\n            /* TEXT */\n            )]),\n            _: 1\n          }), _createVNode(_component_el_table_column, {\n            property: \"name\",\n            label: \"Name\",\n            width: \"120\"\n          }), _createVNode(_component_el_table_column, {\n            property: \"address\",\n            label: \"Address\",\n            \"show-overflow-tooltip\": \"\"\n          })]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"data\", \"onSelection-change\"]), _createVNode(\"div\", {\n          style: {\n            \"margin-top\": \"20px\"\n          }\n        }, [_createVNode(_component_el_button, {\n          onClick: $event => _ctx.toggleSelection([_ctx.tableData[1], _ctx.tableData[2]])\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"Toggle selection status of second and third rows\")]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"onClick\"]), _createVNode(_component_el_button, {\n          onClick: $event => _ctx.toggleSelection()\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"Clear selection\")]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"onClick\"])])], 64\n        /* STABLE_FRAGMENT */\n        );\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            tableData: [{\n              date: '2016-05-03',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }, {\n              date: '2016-05-02',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }, {\n              date: '2016-05-04',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }, {\n              date: '2016-05-01',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }, {\n              date: '2016-05-08',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }, {\n              date: '2016-05-06',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }, {\n              date: '2016-05-07',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }],\n            multipleSelection: []\n          };\n        },\n\n        methods: {\n          toggleSelection(rows) {\n            if (rows) {\n              rows.forEach(row => {\n                this.$refs.multipleTable.toggleRowSelection(row);\n              });\n            } else {\n              this.$refs.multipleTable.clearSelection();\n            }\n          },\n\n          handleSelectionChange(val) {\n            this.multipleSelection = val;\n          }\n\n        }\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo11\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_table_column = _resolveComponent(\"el-table-column\");\n\n        const _component_el_table = _resolveComponent(\"el-table\");\n\n        return _openBlock(), _createBlock(_component_el_table, {\n          data: _ctx.tableData,\n          \"default-sort\": {\n            prop: 'date',\n            order: 'descending'\n          },\n          style: {\n            \"width\": \"100%\"\n          }\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_table_column, {\n            prop: \"date\",\n            label: \"Date\",\n            sortable: \"\",\n            width: \"180\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"name\",\n            label: \"Name\",\n            width: \"180\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"address\",\n            label: \"Address\",\n            formatter: _ctx.formatter\n          }, null, 8\n          /* PROPS */\n          , [\"formatter\"])]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"data\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            tableData: [{\n              date: '2016-05-03',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }, {\n              date: '2016-05-02',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }, {\n              date: '2016-05-04',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }, {\n              date: '2016-05-01',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }]\n          };\n        },\n\n        methods: {\n          formatter(row, column) {\n            return row.address;\n          }\n\n        }\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo12\": function () {\n      const {\n        createTextVNode: _createTextVNode,\n        resolveComponent: _resolveComponent,\n        withCtx: _withCtx,\n        createVNode: _createVNode,\n        toDisplayString: _toDisplayString,\n        Fragment: _Fragment,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_button = _resolveComponent(\"el-button\");\n\n        const _component_el_table_column = _resolveComponent(\"el-table-column\");\n\n        const _component_el_tag = _resolveComponent(\"el-tag\");\n\n        const _component_el_table = _resolveComponent(\"el-table\");\n\n        return _openBlock(), _createBlock(_Fragment, null, [_createVNode(_component_el_button, {\n          onClick: _ctx.resetDateFilter\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"reset date filter\")]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"onClick\"]), _createVNode(_component_el_button, {\n          onClick: _ctx.clearFilter\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"reset all filters\")]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"onClick\"]), _createVNode(_component_el_table, {\n          ref: \"filterTable\",\n          data: _ctx.tableData,\n          style: {\n            \"width\": \"100%\"\n          }\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_table_column, {\n            prop: \"date\",\n            label: \"Date\",\n            sortable: \"\",\n            width: \"180\",\n            \"column-key\": \"date\",\n            filters: [{\n              text: '2016-05-01',\n              value: '2016-05-01'\n            }, {\n              text: '2016-05-02',\n              value: '2016-05-02'\n            }, {\n              text: '2016-05-03',\n              value: '2016-05-03'\n            }, {\n              text: '2016-05-04',\n              value: '2016-05-04'\n            }],\n            \"filter-method\": _ctx.filterHandler\n          }, null, 8\n          /* PROPS */\n          , [\"filter-method\"]), _createVNode(_component_el_table_column, {\n            prop: \"name\",\n            label: \"Name\",\n            width: \"180\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"address\",\n            label: \"Address\",\n            formatter: _ctx.formatter\n          }, null, 8\n          /* PROPS */\n          , [\"formatter\"]), _createVNode(_component_el_table_column, {\n            prop: \"tag\",\n            label: \"Tag\",\n            width: \"100\",\n            filters: [{\n              text: 'Home',\n              value: 'Home'\n            }, {\n              text: 'Office',\n              value: 'Office'\n            }],\n            \"filter-method\": _ctx.filterTag,\n            \"filter-placement\": \"bottom-end\"\n          }, {\n            default: _withCtx(() => [_createVNode(\"template\", {\n              \"slot-scope\": \"scope\"\n            }, [_createVNode(_component_el_tag, {\n              type: _ctx.scope.row.tag === 'Home' ? 'primary' : 'success',\n              \"disable-transitions\": \"\"\n            }, {\n              default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.scope.row.tag), 1\n              /* TEXT */\n              )]),\n              _: 1\n            }, 8\n            /* PROPS */\n            , [\"type\"])])]),\n            _: 1\n          }, 8\n          /* PROPS */\n          , [\"filter-method\"])]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"data\"])], 64\n        /* STABLE_FRAGMENT */\n        );\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            tableData: [{\n              date: '2016-05-03',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles',\n              tag: 'Home'\n            }, {\n              date: '2016-05-02',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles',\n              tag: 'Office'\n            }, {\n              date: '2016-05-04',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles',\n              tag: 'Home'\n            }, {\n              date: '2016-05-01',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles',\n              tag: 'Office'\n            }]\n          };\n        },\n\n        methods: {\n          resetDateFilter() {\n            this.$refs.filterTable.clearFilter('date');\n          },\n\n          clearFilter() {\n            this.$refs.filterTable.clearFilter();\n          },\n\n          formatter(row, column) {\n            return row.address;\n          },\n\n          filterTag(value, row) {\n            return row.tag === value;\n          },\n\n          filterHandler(value, row, column) {\n            const property = column['property'];\n            return row[property] === value;\n          }\n\n        }\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo13\": function () {\n      const {\n        createVNode: _createVNode,\n        toDisplayString: _toDisplayString,\n        resolveComponent: _resolveComponent,\n        withCtx: _withCtx,\n        createTextVNode: _createTextVNode,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_table_column = _resolveComponent(\"el-table-column\");\n\n        const _component_el_tag = _resolveComponent(\"el-tag\");\n\n        const _component_el_popover = _resolveComponent(\"el-popover\");\n\n        const _component_el_button = _resolveComponent(\"el-button\");\n\n        const _component_el_table = _resolveComponent(\"el-table\");\n\n        return _openBlock(), _createBlock(_component_el_table, {\n          data: _ctx.tableData,\n          style: {\n            \"width\": \"100%\"\n          }\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_table_column, {\n            label: \"Date\",\n            width: \"180\"\n          }, {\n            default: _withCtx(() => [_createVNode(\"template\", {\n              \"slot-scope\": \"scope\"\n            }, [_createVNode(\"i\", {\n              class: \"el-icon-time\"\n            }), _createVNode(\"span\", {\n              style: {\n                \"margin-left\": \"10px\"\n              }\n            }, _toDisplayString(_ctx.scope.row.date), 1\n            /* TEXT */\n            )])]),\n            _: 1\n          }), _createVNode(_component_el_table_column, {\n            label: \"Name\",\n            width: \"180\"\n          }, {\n            default: _withCtx(() => [_createVNode(\"template\", {\n              \"slot-scope\": \"scope\"\n            }, [_createVNode(_component_el_popover, {\n              trigger: \"hover\",\n              placement: \"top\"\n            }, {\n              default: _withCtx(() => [_createVNode(\"p\", null, \"Name: \" + _toDisplayString(_ctx.scope.row.name), 1\n              /* TEXT */\n              ), _createVNode(\"p\", null, \"Addr: \" + _toDisplayString(_ctx.scope.row.address), 1\n              /* TEXT */\n              ), _createVNode(\"div\", {\n                slot: \"reference\",\n                class: \"name-wrapper\"\n              }, [_createVNode(_component_el_tag, {\n                size: \"medium\"\n              }, {\n                default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.scope.row.name), 1\n                /* TEXT */\n                )]),\n                _: 1\n              })])]),\n              _: 1\n            })])]),\n            _: 1\n          }), _createVNode(_component_el_table_column, {\n            label: \"Operations\"\n          }, {\n            default: _withCtx(() => [_createVNode(\"template\", {\n              \"slot-scope\": \"scope\"\n            }, [_createVNode(_component_el_button, {\n              size: \"mini\",\n              onClick: $event => _ctx.handleEdit(_ctx.scope.$index, _ctx.scope.row)\n            }, {\n              default: _withCtx(() => [_createTextVNode(\"Edit\")]),\n              _: 1\n            }, 8\n            /* PROPS */\n            , [\"onClick\"]), _createVNode(_component_el_button, {\n              size: \"mini\",\n              type: \"danger\",\n              onClick: $event => _ctx.handleDelete(_ctx.scope.$index, _ctx.scope.row)\n            }, {\n              default: _withCtx(() => [_createTextVNode(\"Delete\")]),\n              _: 1\n            }, 8\n            /* PROPS */\n            , [\"onClick\"])])]),\n            _: 1\n          })]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"data\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            tableData: [{\n              date: '2016-05-03',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }, {\n              date: '2016-05-02',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }, {\n              date: '2016-05-04',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }, {\n              date: '2016-05-01',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }]\n          };\n        },\n\n        methods: {\n          handleEdit(index, row) {\n            console.log(index, row);\n          },\n\n          handleDelete(index, row) {\n            console.log(index, row);\n          }\n\n        }\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo14\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        createTextVNode: _createTextVNode,\n        withCtx: _withCtx,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_table_column = _resolveComponent(\"el-table-column\");\n\n        const _component_el_input = _resolveComponent(\"el-input\");\n\n        const _component_el_button = _resolveComponent(\"el-button\");\n\n        const _component_el_table = _resolveComponent(\"el-table\");\n\n        return _openBlock(), _createBlock(_component_el_table, {\n          data: _ctx.tableData.filter(data => !_ctx.search || data.name.toLowerCase().includes(_ctx.search.toLowerCase())),\n          style: {\n            \"width\": \"100%\"\n          }\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_table_column, {\n            label: \"Date\",\n            prop: \"date\"\n          }), _createVNode(_component_el_table_column, {\n            label: \"Name\",\n            prop: \"name\"\n          }), _createVNode(_component_el_table_column, {\n            align: \"right\"\n          }, {\n            default: _withCtx(() => [_createVNode(\"template\", {\n              slot: \"header\",\n              \"slot-scope\": \"scope\"\n            }, [_createVNode(_component_el_input, {\n              modelValue: _ctx.search,\n              \"onUpdate:modelValue\": $event => _ctx.search = $event,\n              size: \"mini\",\n              placeholder: \"Type to search\"\n            }, null, 8\n            /* PROPS */\n            , [\"modelValue\", \"onUpdate:modelValue\"])]), _createVNode(\"template\", {\n              \"slot-scope\": \"scope\"\n            }, [_createVNode(_component_el_button, {\n              size: \"mini\",\n              onClick: $event => _ctx.handleEdit(_ctx.scope.$index, _ctx.scope.row)\n            }, {\n              default: _withCtx(() => [_createTextVNode(\"Edit\")]),\n              _: 1\n            }, 8\n            /* PROPS */\n            , [\"onClick\"]), _createVNode(_component_el_button, {\n              size: \"mini\",\n              type: \"danger\",\n              onClick: $event => _ctx.handleDelete(_ctx.scope.$index, _ctx.scope.row)\n            }, {\n              default: _withCtx(() => [_createTextVNode(\"Delete\")]),\n              _: 1\n            }, 8\n            /* PROPS */\n            , [\"onClick\"])])]),\n            _: 1\n          })]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"data\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            tableData: [{\n              date: '2016-05-03',\n              name: 'Tom',\n              address: 'No. 189, Grove St, Los Angeles'\n            }, {\n              date: '2016-05-02',\n              name: 'John',\n              address: 'No. 189, Grove St, Los Angeles'\n            }, {\n              date: '2016-05-04',\n              name: 'Morgan',\n              address: 'No. 189, Grove St, Los Angeles'\n            }, {\n              date: '2016-05-01',\n              name: 'Jessy',\n              address: 'No. 189, Grove St, Los Angeles'\n            }],\n            search: ''\n          };\n        },\n\n        methods: {\n          handleEdit(index, row) {\n            console.log(index, row);\n          },\n\n          handleDelete(index, row) {\n            console.log(index, row);\n          }\n\n        }\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo15\": function () {\n      const {\n        toDisplayString: _toDisplayString,\n        createVNode: _createVNode,\n        resolveComponent: _resolveComponent,\n        withCtx: _withCtx,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_table_column = _resolveComponent(\"el-table-column\");\n\n        const _component_el_table = _resolveComponent(\"el-table\");\n\n        return _openBlock(), _createBlock(_component_el_table, {\n          data: _ctx.tableData,\n          style: {\n            \"width\": \"100%\"\n          }\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_table_column, {\n            type: \"expand\"\n          }, {\n            default: _withCtx(() => [_createVNode(\"template\", {\n              \"slot-scope\": \"props\"\n            }, [_createVNode(\"p\", null, \"State: \" + _toDisplayString(_ctx.props.row.state), 1\n            /* TEXT */\n            ), _createVNode(\"p\", null, \"City: \" + _toDisplayString(_ctx.props.row.city), 1\n            /* TEXT */\n            ), _createVNode(\"p\", null, \"Address: \" + _toDisplayString(_ctx.props.row.address), 1\n            /* TEXT */\n            ), _createVNode(\"p\", null, \"Zip: \" + _toDisplayString(_ctx.props.row.zip), 1\n            /* TEXT */\n            )])]),\n            _: 1\n          }), _createVNode(_component_el_table_column, {\n            label: \"Date\",\n            prop: \"date\"\n          }), _createVNode(_component_el_table_column, {\n            label: \"Name\",\n            prop: \"name\"\n          })]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"data\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            tableData: [{\n              date: '2016-05-03',\n              name: 'Tom',\n              state: 'California',\n              city: 'Los Angeles',\n              address: 'No. 189, Grove St, Los Angeles',\n              zip: 'CA 90036'\n            }, {\n              date: '2016-05-02',\n              name: 'Tom',\n              state: 'California',\n              city: 'Los Angeles',\n              address: 'No. 189, Grove St, Los Angeles',\n              zip: 'CA 90036'\n            }, {\n              date: '2016-05-04',\n              name: 'Tom',\n              state: 'California',\n              city: 'Los Angeles',\n              address: 'No. 189, Grove St, Los Angeles',\n              zip: 'CA 90036'\n            }, {\n              date: '2016-05-01',\n              name: 'Tom',\n              state: 'California',\n              city: 'Los Angeles',\n              address: 'No. 189, Grove St, Los Angeles',\n              zip: 'CA 90036'\n            }, {\n              date: '2016-05-08',\n              name: 'Tom',\n              state: 'California',\n              city: 'Los Angeles',\n              address: 'No. 189, Grove St, Los Angeles',\n              zip: 'CA 90036'\n            }, {\n              date: '2016-05-06',\n              name: 'Tom',\n              state: 'California',\n              city: 'Los Angeles',\n              address: 'No. 189, Grove St, Los Angeles',\n              zip: 'CA 90036'\n            }, {\n              date: '2016-05-07',\n              name: 'Tom',\n              state: 'California',\n              city: 'Los Angeles',\n              address: 'No. 189, Grove St, Los Angeles',\n              zip: 'CA 90036'\n            }]\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo16\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_table_column = _resolveComponent(\"el-table-column\");\n\n        const _component_el_table = _resolveComponent(\"el-table\");\n\n        return _openBlock(), _createBlock(\"div\", null, [_createVNode(_component_el_table, {\n          data: _ctx.tableData,\n          style: {\n            \"width\": \"100%\",\n            \"margin-bottom\": \"20px\"\n          },\n          \"row-key\": \"id\",\n          border: \"\",\n          \"default-expand-all\": \"\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_table_column, {\n            prop: \"date\",\n            label: \"date\",\n            sortable: \"\",\n            width: \"180\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"name\",\n            label: \"Name\",\n            sortable: \"\",\n            width: \"180\"\n          })]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"data\"]), _createVNode(_component_el_table, {\n          data: _ctx.tableData1,\n          style: {\n            \"width\": \"100%\"\n          },\n          \"row-key\": \"id\",\n          border: \"\",\n          lazy: \"\",\n          load: _ctx.load,\n          \"tree-props\": {\n            children: 'children',\n            hasChildren: 'hasChildren'\n          }\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_table_column, {\n            prop: \"date\",\n            label: \"Date\",\n            width: \"180\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"name\",\n            label: \"Name\",\n            width: \"180\"\n          })]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"data\", \"load\"])]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            tableData: [{\n              id: 1,\n              date: '2016-05-02',\n              name: 'wangxiaohu'\n            }, {\n              id: 2,\n              date: '2016-05-04',\n              name: 'wangxiaohu'\n            }, {\n              id: 3,\n              date: '2016-05-01',\n              name: 'wangxiaohu',\n              children: [{\n                id: 31,\n                date: '2016-05-01',\n                name: 'wangxiaohu'\n              }, {\n                id: 32,\n                date: '2016-05-01',\n                name: 'wangxiaohu'\n              }]\n            }, {\n              id: 4,\n              date: '2016-05-03',\n              name: 'wangxiaohu'\n            }],\n            tableData1: [{\n              id: 1,\n              date: '2016-05-02',\n              name: 'wangxiaohu'\n            }, {\n              id: 2,\n              date: '2016-05-04',\n              name: 'wangxiaohu'\n            }, {\n              id: 3,\n              date: '2016-05-01',\n              name: 'wangxiaohu',\n              hasChildren: true\n            }, {\n              id: 4,\n              date: '2016-05-03',\n              name: 'wangxiaohu'\n            }]\n          };\n        },\n\n        methods: {\n          load(tree, treeNode, resolve) {\n            setTimeout(() => {\n              resolve([{\n                id: 31,\n                date: '2016-05-01',\n                name: 'wangxiaohu'\n              }, {\n                id: 32,\n                date: '2016-05-01',\n                name: 'wangxiaohu'\n              }]);\n            }, 1000);\n          }\n\n        }\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo17\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx,\n        Fragment: _Fragment,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_table_column = _resolveComponent(\"el-table-column\");\n\n        const _component_el_table = _resolveComponent(\"el-table\");\n\n        return _openBlock(), _createBlock(_Fragment, null, [_createVNode(_component_el_table, {\n          data: _ctx.tableData,\n          border: \"\",\n          \"show-summary\": \"\",\n          style: {\n            \"width\": \"100%\"\n          }\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_table_column, {\n            prop: \"id\",\n            label: \"ID\",\n            width: \"180\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"name\",\n            label: \"Name\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"amount1\",\n            sortable: \"\",\n            label: \"Amount 1\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"amount2\",\n            sortable: \"\",\n            label: \"Amount 2\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"amount3\",\n            sortable: \"\",\n            label: \"Amount 3\"\n          })]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"data\"]), _createVNode(_component_el_table, {\n          data: _ctx.tableData,\n          border: \"\",\n          height: \"200\",\n          \"summary-method\": _ctx.getSummaries,\n          \"show-summary\": \"\",\n          style: {\n            \"width\": \"100%\",\n            \"margin-top\": \"20px\"\n          }\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_table_column, {\n            prop: \"id\",\n            label: \"ID\",\n            width: \"180\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"name\",\n            label: \"Name\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"amount1\",\n            label: \"Cost 1 ($)\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"amount2\",\n            label: \"Cost 2 ($)\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"amount3\",\n            label: \"Cost 3 ($)\"\n          })]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"data\", \"summary-method\"])], 64\n        /* STABLE_FRAGMENT */\n        );\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            tableData: [{\n              id: '12987122',\n              name: 'Tom',\n              amount1: '234',\n              amount2: '3.2',\n              amount3: 10\n            }, {\n              id: '12987123',\n              name: 'Tom',\n              amount1: '165',\n              amount2: '4.43',\n              amount3: 12\n            }, {\n              id: '12987124',\n              name: 'Tom',\n              amount1: '324',\n              amount2: '1.9',\n              amount3: 9\n            }, {\n              id: '12987125',\n              name: 'Tom',\n              amount1: '621',\n              amount2: '2.2',\n              amount3: 17\n            }, {\n              id: '12987126',\n              name: 'Tom',\n              amount1: '539',\n              amount2: '4.1',\n              amount3: 15\n            }]\n          };\n        },\n\n        methods: {\n          getSummaries(param) {\n            const {\n              columns,\n              data\n            } = param;\n            const sums = [];\n            columns.forEach((column, index) => {\n              if (index === 0) {\n                sums[index] = 'Total Cost';\n                return;\n              }\n\n              const values = data.map(item => Number(item[column.property]));\n\n              if (!values.every(value => isNaN(value))) {\n                sums[index] = '$ ' + values.reduce((prev, curr) => {\n                  const value = Number(curr);\n\n                  if (!isNaN(value)) {\n                    return prev + curr;\n                  } else {\n                    return prev;\n                  }\n                }, 0);\n              } else {\n                sums[index] = 'N/A';\n              }\n            });\n            return sums;\n          }\n\n        }\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo18\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_table_column = _resolveComponent(\"el-table-column\");\n\n        const _component_el_table = _resolveComponent(\"el-table\");\n\n        return _openBlock(), _createBlock(\"div\", null, [_createVNode(_component_el_table, {\n          data: _ctx.tableData,\n          \"span-method\": _ctx.arraySpanMethod,\n          border: \"\",\n          style: {\n            \"width\": \"100%\"\n          }\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_table_column, {\n            prop: \"id\",\n            label: \"ID\",\n            width: \"180\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"name\",\n            label: \"Name\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"amount1\",\n            sortable: \"\",\n            label: \"Amount 1\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"amount2\",\n            sortable: \"\",\n            label: \"Amount 2\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"amount3\",\n            sortable: \"\",\n            label: \"Amount 3\"\n          })]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"data\", \"span-method\"]), _createVNode(_component_el_table, {\n          data: _ctx.tableData,\n          \"span-method\": _ctx.objectSpanMethod,\n          border: \"\",\n          style: {\n            \"width\": \"100%\",\n            \"margin-top\": \"20px\"\n          }\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_table_column, {\n            prop: \"id\",\n            label: \"ID\",\n            width: \"180\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"name\",\n            label: \"Name\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"amount1\",\n            label: \"Amount 1\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"amount2\",\n            label: \"Amount 2\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"amount3\",\n            label: \"Amount 3\"\n          })]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"data\", \"span-method\"])]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            tableData: [{\n              id: '12987122',\n              name: 'Tom',\n              amount1: '234',\n              amount2: '3.2',\n              amount3: 10\n            }, {\n              id: '12987123',\n              name: 'Tom',\n              amount1: '165',\n              amount2: '4.43',\n              amount3: 12\n            }, {\n              id: '12987124',\n              name: 'Tom',\n              amount1: '324',\n              amount2: '1.9',\n              amount3: 9\n            }, {\n              id: '12987125',\n              name: 'Tom',\n              amount1: '621',\n              amount2: '2.2',\n              amount3: 17\n            }, {\n              id: '12987126',\n              name: 'Tom',\n              amount1: '539',\n              amount2: '4.1',\n              amount3: 15\n            }]\n          };\n        },\n\n        methods: {\n          arraySpanMethod({\n            row,\n            column,\n            rowIndex,\n            columnIndex\n          }) {\n            if (rowIndex % 2 === 0) {\n              if (columnIndex === 0) {\n                return [1, 2];\n              } else if (columnIndex === 1) {\n                return [0, 0];\n              }\n            }\n          },\n\n          objectSpanMethod({\n            row,\n            column,\n            rowIndex,\n            columnIndex\n          }) {\n            if (columnIndex === 0) {\n              if (rowIndex % 2 === 0) {\n                return {\n                  rowspan: 2,\n                  colspan: 1\n                };\n              } else {\n                return {\n                  rowspan: 0,\n                  colspan: 0\n                };\n              }\n            }\n          }\n\n        }\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo19\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_table_column = _resolveComponent(\"el-table-column\");\n\n        const _component_el_table = _resolveComponent(\"el-table\");\n\n        return _openBlock(), _createBlock(_component_el_table, {\n          data: _ctx.tableData,\n          style: {\n            \"width\": \"100%\"\n          }\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_table_column, {\n            type: \"index\",\n            index: _ctx.indexMethod\n          }, null, 8\n          /* PROPS */\n          , [\"index\"]), _createVNode(_component_el_table_column, {\n            prop: \"date\",\n            label: \"Date\",\n            width: \"180\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"name\",\n            label: \"Name\",\n            width: \"180\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"address\",\n            label: \"Address\"\n          })]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"data\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            tableData: [{\n              date: '2016-05-03',\n              name: 'Tom',\n              state: 'California',\n              city: 'Los Angeles',\n              address: 'No. 189, Grove St, Los Angeles',\n              zip: 'CA 90036',\n              tag: 'Home'\n            }, {\n              date: '2016-05-02',\n              name: 'Tom',\n              state: 'California',\n              city: 'Los Angeles',\n              address: 'No. 189, Grove St, Los Angeles',\n              zip: 'CA 90036',\n              tag: 'Office'\n            }, {\n              date: '2016-05-04',\n              name: 'Tom',\n              state: 'California',\n              city: 'Los Angeles',\n              address: 'No. 189, Grove St, Los Angeles',\n              zip: 'CA 90036',\n              tag: 'Home'\n            }, {\n              date: '2016-05-01',\n              name: 'Tom',\n              state: 'California',\n              city: 'Los Angeles',\n              address: 'No. 189, Grove St, Los Angeles',\n              zip: 'CA 90036',\n              tag: 'Office'\n            }]\n          };\n        },\n\n        methods: {\n          indexMethod(index) {\n            return index * 2;\n          }\n\n        }\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }()\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/en-US/table.md?vue&type=script&lang=js\n");

/***/ }),

/***/ "./node_modules/vue-loader/dist/templateLoader.js?!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/en-US/table.md?vue&type=template&id=57ef6f68":
/*!****************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/dist/templateLoader.js??ref--5!./node_modules/vue-loader/dist??ref--3-0!./build/md-loader!./examples/docs/en-US/table.md?vue&type=template&id=57ef6f68 ***!
  \****************************************************************************************************************************************************************************************/
/*! exports provided: render */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return render; });\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm-bundler.js\");\n\n\nconst _hoisted_1 = { class: \"content element-doc\" }\nconst _hoisted_2 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h2\", { id: \"table\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#table\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Table\")\n], -1 /* HOISTED */)\nconst _hoisted_3 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Display multiple data with similar format. You can sort, filter, compare your data in a table.\", -1 /* HOISTED */)\nconst _hoisted_4 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"basic-table\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#basic-table\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Basic table\")\n], -1 /* HOISTED */)\nconst _hoisted_5 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Basic table is just for data display.\", -1 /* HOISTED */)\nconst _hoisted_6 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"After setting attribute \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"data\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" of \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"el-table\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" with an object array, you can use \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"prop\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" (corresponding to a key of the object in \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"data\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" array) in \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"el-table-column\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" to insert data to table columns, and set the attribute \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"label\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" to define the column name. You can also use the attribute \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"width\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" to define the width of columns.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_7 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"  <template>\\n    <el-table\\n      :data=\\\"tableData\\\"\\n      style=\\\"width: 100%\\\">\\n      <el-table-column\\n        prop=\\\"date\\\"\\n        label=\\\"Date\\\"\\n        width=\\\"180\\\">\\n      </el-table-column>\\n      <el-table-column\\n        prop=\\\"name\\\"\\n        label=\\\"Name\\\"\\n        width=\\\"180\\\">\\n      </el-table-column>\\n      <el-table-column\\n        prop=\\\"address\\\"\\n        label=\\\"Address\\\">\\n      </el-table-column>\\n    </el-table>\\n  </template>\\n\\n  <script>\\n    export default {\\n      data() {\\n        return {\\n          tableData: [{\\n            date: '2016-05-03',\\n            name: 'Tom',\\n            address: 'No. 189, Grove St, Los Angeles'\\n          }, {\\n            date: '2016-05-02',\\n            name: 'Tom',\\n            address: 'No. 189, Grove St, Los Angeles'\\n          }, {\\n            date: '2016-05-04',\\n            name: 'Tom',\\n            address: 'No. 189, Grove St, Los Angeles'\\n          }, {\\n            date: '2016-05-01',\\n            name: 'Tom',\\n            address: 'No. 189, Grove St, Los Angeles'\\n          }]\\n        }\\n      }\\n    }\\n  </script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_8 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"striped-table\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#striped-table\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Striped Table\")\n], -1 /* HOISTED */)\nconst _hoisted_9 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Striped table makes it easier to distinguish different rows.\", -1 /* HOISTED */)\nconst _hoisted_10 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Attribute \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"stripe\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" accepts a \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"Boolean\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\". If \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"true\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\", table will be striped.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_11 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-table\\n    :data=\\\"tableData\\\"\\n    stripe\\n    style=\\\"width: 100%\\\">\\n    <el-table-column\\n      prop=\\\"date\\\"\\n      label=\\\"Date\\\"\\n      width=\\\"180\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"name\\\"\\n      label=\\\"Name\\\"\\n      width=\\\"180\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"address\\\"\\n      label=\\\"Address\\\">\\n    </el-table-column>\\n  </el-table>\\n</template>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        tableData: [{\\n          date: '2016-05-03',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }, {\\n          date: '2016-05-02',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }, {\\n          date: '2016-05-04',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }, {\\n          date: '2016-05-01',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }]\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_12 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"table-with-border\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#table-with-border\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Table with border\")\n], -1 /* HOISTED */)\nconst _hoisted_13 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"By default, Table has no vertical border. If you need it, you can set attribute \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"border\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" to \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"true\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\".\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_14 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-table\\n    :data=\\\"tableData\\\"\\n    border\\n    style=\\\"width: 100%\\\">\\n    <el-table-column\\n      prop=\\\"date\\\"\\n      label=\\\"Date\\\"\\n      width=\\\"180\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"name\\\"\\n      label=\\\"Name\\\"\\n      width=\\\"180\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"address\\\"\\n      label=\\\"Address\\\">\\n    </el-table-column>\\n  </el-table>\\n</template>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        tableData: [{\\n          date: '2016-05-03',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }, {\\n          date: '2016-05-02',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }, {\\n          date: '2016-05-04',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }, {\\n          date: '2016-05-01',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }]\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_15 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"table-with-status\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#table-with-status\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Table with status\")\n], -1 /* HOISTED */)\nconst _hoisted_16 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"You can highlight your table content to distinguish between \\\"success, information, warning, danger\\\" and other states.\", -1 /* HOISTED */)\nconst _hoisted_17 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Use \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"row-class-name\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" in \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"el-table\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" to add custom classes to a certain row. Then you can style it with custom classes.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_18 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-table\\n    :data=\\\"tableData\\\"\\n    style=\\\"width: 100%\\\"\\n    :row-class-name=\\\"tableRowClassName\\\">\\n    <el-table-column\\n      prop=\\\"date\\\"\\n      label=\\\"Date\\\"\\n      width=\\\"180\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"name\\\"\\n      label=\\\"Name\\\"\\n      width=\\\"180\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"address\\\"\\n      label=\\\"Address\\\">\\n    </el-table-column>\\n  </el-table>\\n</template>\\n\\n<style>\\n  .el-table .warning-row {\\n    background: oldlace;\\n  }\\n\\n  .el-table .success-row {\\n    background: #f0f9eb;\\n  }\\n</style>\\n\\n<script>\\n  export default {\\n    methods: {\\n      tableRowClassName({row, rowIndex}) {\\n        if (rowIndex === 1) {\\n          return 'warning-row';\\n        } else if (rowIndex === 3) {\\n          return 'success-row';\\n        }\\n        return '';\\n      }\\n    },\\n    data() {\\n      return {\\n        tableData:  [{\\n          date: '2016-05-03',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }, {\\n          date: '2016-05-02',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }, {\\n          date: '2016-05-04',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }, {\\n          date: '2016-05-01',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }]\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_19 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"table-with-fixed-header\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#table-with-fixed-header\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Table with fixed header\")\n], -1 /* HOISTED */)\nconst _hoisted_20 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"When there are too many rows, you can use a fixed header.\", -1 /* HOISTED */)\nconst _hoisted_21 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"By setting the attribute \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"height\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" of \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"el-table\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\", you can fix the table header without any other codes.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_22 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-table\\n    :data=\\\"tableData\\\"\\n    height=\\\"250\\\"\\n    style=\\\"width: 100%\\\">\\n    <el-table-column\\n      prop=\\\"date\\\"\\n      label=\\\"Date\\\"\\n      width=\\\"180\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"name\\\"\\n      label=\\\"Name\\\"\\n      width=\\\"180\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"address\\\"\\n      label=\\\"Address\\\">\\n    </el-table-column>\\n  </el-table>\\n</template>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        tableData: [{\\n          date: '2016-05-03',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }, {\\n          date: '2016-05-02',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }, {\\n          date: '2016-05-04',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }, {\\n          date: '2016-05-01',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }, {\\n          date: '2016-05-08',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }, {\\n          date: '2016-05-06',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }, {\\n          date: '2016-05-07',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }],\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_23 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"table-with-fixed-column\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#table-with-fixed-column\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Table with fixed column\")\n], -1 /* HOISTED */)\nconst _hoisted_24 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"When there are too many columns, you can fix some of them.\", -1 /* HOISTED */)\nconst _hoisted_25 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Attribute \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"fixed\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" is used in \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"el-table-column\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\", it accepts a \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"Boolean\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\". If \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"true\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\", the column will be fixed at left. It also accepts two string literals: 'left' and 'right', both indicating that the column will be fixed at corresponding direction.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_26 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-table\\n    :data=\\\"tableData\\\"\\n    style=\\\"width: 100%\\\">\\n    <el-table-column\\n      fixed\\n      prop=\\\"date\\\"\\n      label=\\\"Date\\\"\\n      width=\\\"150\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"name\\\"\\n      label=\\\"Name\\\"\\n      width=\\\"120\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"state\\\"\\n      label=\\\"State\\\"\\n      width=\\\"120\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"city\\\"\\n      label=\\\"City\\\"\\n      width=\\\"120\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"address\\\"\\n      label=\\\"Address\\\"\\n      width=\\\"300\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"zip\\\"\\n      label=\\\"Zip\\\"\\n      width=\\\"120\\\">\\n    </el-table-column>\\n    <el-table-column\\n      fixed=\\\"right\\\"\\n      label=\\\"Operations\\\"\\n      width=\\\"120\\\">\\n      <template slot-scope=\\\"scope\\\">\\n        <el-button @click=\\\"handleClick\\\" type=\\\"text\\\" size=\\\"small\\\">Detail</el-button>\\n        <el-button type=\\\"text\\\" size=\\\"small\\\">Edit</el-button>\\n      </template>\\n    </el-table-column>\\n  </el-table>\\n</template>\\n\\n<script>\\n  export default {\\n    methods: {\\n      handleClick() {\\n        console.log('click');\\n      }\\n    },\\n    data() {\\n      return {\\n        tableData: [{\\n          date: '2016-05-03',\\n          name: 'Tom',\\n          state: 'California',\\n          city: 'Los Angeles',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          zip: 'CA 90036',\\n          tag: 'Home'\\n        }, {\\n          date: '2016-05-02',\\n          name: 'Tom',\\n          state: 'California',\\n          city: 'Los Angeles',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          zip: 'CA 90036',\\n          tag: 'Office'\\n        }, {\\n          date: '2016-05-04',\\n          name: 'Tom',\\n          state: 'California',\\n          city: 'Los Angeles',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          zip: 'CA 90036',\\n          tag: 'Home'\\n        }, {\\n          date: '2016-05-01',\\n          name: 'Tom',\\n          state: 'California',\\n          city: 'Los Angeles',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          zip: 'CA 90036',\\n          tag: 'Office'\\n        }]\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_27 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"table-with-fixed-columns-and-header\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#table-with-fixed-columns-and-header\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Table with fixed columns and header\")\n], -1 /* HOISTED */)\nconst _hoisted_28 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"When you have huge chunks of data to put in a table, you can fix the header and columns at the same time.\", -1 /* HOISTED */)\nconst _hoisted_29 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Fix columns and header at the same time by combining the above two examples.\")\n], -1 /* HOISTED */)\nconst _hoisted_30 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-table\\n    :data=\\\"tableData\\\"\\n    style=\\\"width: 100%\\\"\\n    height=\\\"250\\\">\\n    <el-table-column\\n      fixed\\n      prop=\\\"date\\\"\\n      label=\\\"Date\\\"\\n      width=\\\"150\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"name\\\"\\n      label=\\\"Name\\\"\\n      width=\\\"120\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"state\\\"\\n      label=\\\"State\\\"\\n      width=\\\"120\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"city\\\"\\n      label=\\\"City\\\"\\n      width=\\\"120\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"address\\\"\\n      label=\\\"Address\\\"\\n      width=\\\"300\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"zip\\\"\\n      label=\\\"Zip\\\"\\n      width=\\\"120\\\">\\n    </el-table-column>\\n  </el-table>\\n</template>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        tableData: [{\\n          date: '2016-05-03',\\n          name: 'Tom',\\n          state: 'California',\\n          city: 'Los Angeles',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          zip: 'CA 90036'\\n        }, {\\n          date: '2016-05-02',\\n          name: 'Tom',\\n          state: 'California',\\n          city: 'Los Angeles',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          zip: 'CA 90036'\\n        }, {\\n          date: '2016-05-04',\\n          name: 'Tom',\\n          state: 'California',\\n          city: 'Los Angeles',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          zip: 'CA 90036'\\n        }, {\\n          date: '2016-05-01',\\n          name: 'Tom',\\n          state: 'California',\\n          city: 'Los Angeles',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          zip: 'CA 90036'\\n        }, {\\n          date: '2016-05-08',\\n          name: 'Tom',\\n          state: 'California',\\n          city: 'Los Angeles',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          zip: 'CA 90036'\\n        }, {\\n          date: '2016-05-06',\\n          name: 'Tom',\\n          state: 'California',\\n          city: 'Los Angeles',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          zip: 'CA 90036'\\n        }, {\\n          date: '2016-05-07',\\n          name: 'Tom',\\n          state: 'California',\\n          city: 'Los Angeles',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          zip: 'CA 90036'\\n        }]\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_31 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"fluid-height-table-with-fixed-header-and-columns\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#fluid-height-table-with-fixed-header-and-columns\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Fluid-height Table with fixed header (and columns)\")\n], -1 /* HOISTED */)\nconst _hoisted_32 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"When the the data is dynamically changed, you might want the table to have a maximum height rather than a fixed height and to show the scroll bar if needed.\", -1 /* HOISTED */)\nconst _hoisted_33 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"By setting the attribute \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"max-height\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" of \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"el-table\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\", you can fix the table header. The table body scrolls only if the height of the rows exceeds the max height value.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_34 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-table\\n    :data=\\\"tableData\\\"\\n    style=\\\"width: 100%\\\"\\n    max-height=\\\"250\\\">\\n    <el-table-column\\n      fixed\\n      prop=\\\"date\\\"\\n      label=\\\"Date\\\"\\n      width=\\\"150\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"name\\\"\\n      label=\\\"Name\\\"\\n      width=\\\"120\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"state\\\"\\n      label=\\\"State\\\"\\n      width=\\\"120\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"city\\\"\\n      label=\\\"City\\\"\\n      width=\\\"120\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"address\\\"\\n      label=\\\"Address\\\"\\n      width=\\\"300\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"zip\\\"\\n      label=\\\"Zip\\\"\\n      width=\\\"120\\\">\\n    </el-table-column>\\n    <el-table-column\\n      fixed=\\\"right\\\"\\n      label=\\\"Operations\\\"\\n      width=\\\"120\\\">\\n      <template slot-scope=\\\"scope\\\">\\n        <el-button\\n          @click.native.prevent=\\\"deleteRow(scope.$index, tableData)\\\"\\n          type=\\\"text\\\"\\n          size=\\\"small\\\">\\n          Remove\\n        </el-button>\\n      </template>\\n    </el-table-column>\\n  </el-table>\\n</template>\\n\\n<script>\\n  export default {\\n    methods: {\\n      deleteRow(index, rows) {\\n        rows.splice(index, 1);\\n      }\\n    },\\n    data() {\\n      return {\\n        tableData: [{\\n          date: '2016-05-03',\\n          name: 'Tom',\\n          state: 'California',\\n          city: 'Los Angeles',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          zip: 'CA 90036'\\n        }, {\\n          date: '2016-05-02',\\n          name: 'Tom',\\n          state: 'California',\\n          city: 'Los Angeles',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          zip: 'CA 90036'\\n        }, {\\n          date: '2016-05-04',\\n          name: 'Tom',\\n          state: 'California',\\n          city: 'Los Angeles',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          zip: 'CA 90036'\\n        }, {\\n          date: '2016-05-01',\\n          name: 'Tom',\\n          state: 'California',\\n          city: 'Los Angeles',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          zip: 'CA 90036'\\n        }, {\\n          date: '2016-05-08',\\n          name: 'Tom',\\n          state: 'California',\\n          city: 'Los Angeles',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          zip: 'CA 90036'\\n        }, {\\n          date: '2016-05-06',\\n          name: 'Tom',\\n          state: 'California',\\n          city: 'Los Angeles',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          zip: 'CA 90036'\\n        }, {\\n          date: '2016-05-07',\\n          name: 'Tom',\\n          state: 'California',\\n          city: 'Los Angeles',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          zip: 'CA 90036'\\n        }]\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_35 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"grouping-table-head\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#grouping-table-head\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Grouping table head\")\n], -1 /* HOISTED */)\nconst _hoisted_36 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"When the data structure is complex, you can use group header to show the data hierarchy.\", -1 /* HOISTED */)\nconst _hoisted_37 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Only need to place el-table-column inside a el-table-column, you can achieve group header.\")\n], -1 /* HOISTED */)\nconst _hoisted_38 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-table\\n    :data=\\\"tableData\\\"\\n    style=\\\"width: 100%\\\">\\n    <el-table-column\\n      prop=\\\"date\\\"\\n      label=\\\"Date\\\"\\n      width=\\\"150\\\">\\n    </el-table-column>\\n    <el-table-column label=\\\"Delivery Info\\\">\\n      <el-table-column\\n        prop=\\\"name\\\"\\n        label=\\\"Name\\\"\\n        width=\\\"120\\\">\\n      </el-table-column>\\n      <el-table-column label=\\\"Address Info\\\">\\n        <el-table-column\\n          prop=\\\"state\\\"\\n          label=\\\"State\\\"\\n          width=\\\"120\\\">\\n        </el-table-column>\\n        <el-table-column\\n          prop=\\\"city\\\"\\n          label=\\\"City\\\"\\n          width=\\\"120\\\">\\n        </el-table-column>\\n        <el-table-column\\n          prop=\\\"address\\\"\\n          label=\\\"Address\\\"\\n          width=\\\"300\\\">\\n        </el-table-column>\\n        <el-table-column\\n          prop=\\\"zip\\\"\\n          label=\\\"Zip\\\"\\n          width=\\\"120\\\">\\n        </el-table-column>\\n      </el-table-column>\\n    </el-table-column>\\n  </el-table>\\n</template>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        tableData: [{\\n          date: '2016-05-03',\\n          name: 'Tom',\\n          state: 'California',\\n          city: 'Los Angeles',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          zip: 'CA 90036'\\n        }, {\\n          date: '2016-05-02',\\n          name: 'Tom',\\n          state: 'California',\\n          city: 'Los Angeles',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          zip: 'CA 90036'\\n        }, {\\n          date: '2016-05-04',\\n          name: 'Tom',\\n          state: 'California',\\n          city: 'Los Angeles',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          zip: 'CA 90036'\\n        }, {\\n          date: '2016-05-01',\\n          name: 'Tom',\\n          state: 'California',\\n          city: 'Los Angeles',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          zip: 'CA 90036'\\n        }, {\\n          date: '2016-05-08',\\n          name: 'Tom',\\n          state: 'California',\\n          city: 'Los Angeles',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          zip: 'CA 90036'\\n        }, {\\n          date: '2016-05-06',\\n          name: 'Tom',\\n          state: 'California',\\n          city: 'Los Angeles',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          zip: 'CA 90036'\\n        }, {\\n          date: '2016-05-07',\\n          name: 'Tom',\\n          state: 'California',\\n          city: 'Los Angeles',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          zip: 'CA 90036'\\n        }]\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_39 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"single-select\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#single-select\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Single select\")\n], -1 /* HOISTED */)\nconst _hoisted_40 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Single row selection is supported.\", -1 /* HOISTED */)\nconst _hoisted_41 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Table supports single row selection. You can activate it by adding the \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"highlight-current-row\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" attribute. An event called \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"current-change\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" will be triggered when row selection changes, and its parameters are the rows after and before this change: \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"currentRow\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" and \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"oldCurrentRow\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\". If you need to display row index, you can add a new \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"el-table-column\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" with its \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"type\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" attribute assigned to \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"index\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\", and you will see the index starting from 1.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_42 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-table\\n    ref=\\\"singleTable\\\"\\n    :data=\\\"tableData\\\"\\n    highlight-current-row\\n    @current-change=\\\"handleCurrentChange\\\"\\n    style=\\\"width: 100%\\\">\\n    <el-table-column\\n      type=\\\"index\\\"\\n      width=\\\"50\\\">\\n    </el-table-column>\\n    <el-table-column\\n      property=\\\"date\\\"\\n      label=\\\"Date\\\"\\n      width=\\\"120\\\">\\n    </el-table-column>\\n    <el-table-column\\n      property=\\\"name\\\"\\n      label=\\\"Name\\\"\\n      width=\\\"120\\\">\\n    </el-table-column>\\n    <el-table-column\\n      property=\\\"address\\\"\\n      label=\\\"Address\\\">\\n    </el-table-column>\\n  </el-table>\\n  <div style=\\\"margin-top: 20px\\\">\\n    <el-button @click=\\\"setCurrent(tableData[1])\\\">Select second row</el-button>\\n    <el-button @click=\\\"setCurrent()\\\">Clear selection</el-button>\\n  </div>\\n</template>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        tableData: [{\\n          date: '2016-05-03',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }, {\\n          date: '2016-05-02',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }, {\\n          date: '2016-05-04',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }, {\\n          date: '2016-05-01',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }],\\n        currentRow: null\\n      }\\n    },\\n\\n    methods: {\\n      setCurrent(row) {\\n        this.$refs.singleTable.setCurrentRow(row);\\n      },\\n      handleCurrentChange(val) {\\n        this.currentRow = val;\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_43 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"multiple-select\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#multiple-select\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Multiple select\")\n], -1 /* HOISTED */)\nconst _hoisted_44 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"You can also select multiple rows.\", -1 /* HOISTED */)\nconst _hoisted_45 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Activating multiple selection is easy: simply add an \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"el-table-column\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" with its \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"type\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" set to \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"selection\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\". Apart from multiple selection, this example also uses \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"show-overflow-tooltip\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\": by default, if the content is too long, it will break into multiple lines. If you want to keep it in one line, use attribute \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"show-overflow-tooltip\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\", which accepts a \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"Boolean\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" value. When set \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"true\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\", the extra content will show in tooltip when hover on the cell.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_46 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-table\\n    ref=\\\"multipleTable\\\"\\n    :data=\\\"tableData\\\"\\n    style=\\\"width: 100%\\\"\\n    @selection-change=\\\"handleSelectionChange\\\">\\n    <el-table-column\\n      type=\\\"selection\\\"\\n      width=\\\"55\\\">\\n    </el-table-column>\\n    <el-table-column\\n      label=\\\"Date\\\"\\n      width=\\\"120\\\">\\n      <template slot-scope=\\\"scope\\\">{{ scope.row.date }}</template>\\n    </el-table-column>\\n    <el-table-column\\n      property=\\\"name\\\"\\n      label=\\\"Name\\\"\\n      width=\\\"120\\\">\\n    </el-table-column>\\n    <el-table-column\\n      property=\\\"address\\\"\\n      label=\\\"Address\\\"\\n      show-overflow-tooltip>\\n    </el-table-column>\\n  </el-table>\\n  <div style=\\\"margin-top: 20px\\\">\\n    <el-button @click=\\\"toggleSelection([tableData[1], tableData[2]])\\\">Toggle selection status of second and third rows</el-button>\\n    <el-button @click=\\\"toggleSelection()\\\">Clear selection</el-button>\\n  </div>\\n</template>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        tableData: [{\\n          date: '2016-05-03',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }, {\\n          date: '2016-05-02',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }, {\\n          date: '2016-05-04',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }, {\\n          date: '2016-05-01',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }, {\\n          date: '2016-05-08',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }, {\\n          date: '2016-05-06',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }, {\\n          date: '2016-05-07',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }],\\n        multipleSelection: []\\n      }\\n    },\\n\\n    methods: {\\n      toggleSelection(rows) {\\n        if (rows) {\\n          rows.forEach(row => {\\n            this.$refs.multipleTable.toggleRowSelection(row);\\n          });\\n        } else {\\n          this.$refs.multipleTable.clearSelection();\\n        }\\n      },\\n      handleSelectionChange(val) {\\n        this.multipleSelection = val;\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_47 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"sorting\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#sorting\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Sorting\")\n], -1 /* HOISTED */)\nconst _hoisted_48 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Sort the data to find or compare data quickly.\", -1 /* HOISTED */)\nconst _hoisted_49 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Set attribute \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"sortable\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" in a certain column to sort the data based on this column. It accepts \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"Boolean\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" with a default value \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"false\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\". Set table attribute \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"default-sort\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" to determine default sort column and order. To apply your own sorting rules, use \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"sort-method\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" or \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"sort-by\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\". If you need remote sorting from backend, set \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"sortable\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" to \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"custom\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\", and listen to the \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"sort-change\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" event on Table. In the event handler, you have access to the sorting column and sorting order so that you can fetch sorted table data from API. In this example we use another attribute named \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"formatter\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" to format the value of certain columns. It accepts a function which has two parameters: \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"row\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" and \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"column\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\". You can handle it according to your own needs.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_50 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-table\\n    :data=\\\"tableData\\\"\\n    :default-sort = \\\"{prop: 'date', order: 'descending'}\\\"\\n    style=\\\"width: 100%\\\">\\n    <el-table-column\\n      prop=\\\"date\\\"\\n      label=\\\"Date\\\"\\n      sortable\\n      width=\\\"180\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"name\\\"\\n      label=\\\"Name\\\"\\n      width=\\\"180\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"address\\\"\\n      label=\\\"Address\\\"\\n      :formatter=\\\"formatter\\\">\\n    </el-table-column>\\n  </el-table>\\n</template>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        tableData: [{\\n          date: '2016-05-03',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }, {\\n          date: '2016-05-02',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }, {\\n          date: '2016-05-04',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }, {\\n          date: '2016-05-01',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }]\\n      }\\n    },\\n    methods: {\\n      formatter(row, column) {\\n        return row.address;\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_51 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"filter\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#filter\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Filter\")\n], -1 /* HOISTED */)\nconst _hoisted_52 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Filter the table to find desired data.\", -1 /* HOISTED */)\nconst _hoisted_53 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Set attribute \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"filters\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" and \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"filter-method\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" in \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"el-table-column\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" makes this column filterable. \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"filters\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" is an array, and \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"filter-method\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" is a function deciding which rows are displayed. It has three parameters: \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"value\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\", \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"row\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" and \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"column\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\".\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_54 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-button @click=\\\"resetDateFilter\\\">reset date filter</el-button>\\n  <el-button @click=\\\"clearFilter\\\">reset all filters</el-button>\\n  <el-table\\n    ref=\\\"filterTable\\\"\\n    :data=\\\"tableData\\\"\\n    style=\\\"width: 100%\\\">\\n    <el-table-column\\n      prop=\\\"date\\\"\\n      label=\\\"Date\\\"\\n      sortable\\n      width=\\\"180\\\"\\n      column-key=\\\"date\\\"\\n      :filters=\\\"[{text: '2016-05-01', value: '2016-05-01'}, {text: '2016-05-02', value: '2016-05-02'}, {text: '2016-05-03', value: '2016-05-03'}, {text: '2016-05-04', value: '2016-05-04'}]\\\"\\n      :filter-method=\\\"filterHandler\\\"\\n    >\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"name\\\"\\n      label=\\\"Name\\\"\\n      width=\\\"180\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"address\\\"\\n      label=\\\"Address\\\"\\n      :formatter=\\\"formatter\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"tag\\\"\\n      label=\\\"Tag\\\"\\n      width=\\\"100\\\"\\n      :filters=\\\"[{ text: 'Home', value: 'Home' }, { text: 'Office', value: 'Office' }]\\\"\\n      :filter-method=\\\"filterTag\\\"\\n      filter-placement=\\\"bottom-end\\\">\\n      <template slot-scope=\\\"scope\\\">\\n        <el-tag\\n          :type=\\\"scope.row.tag === 'Home' ? 'primary' : 'success'\\\"\\n          disable-transitions>{{scope.row.tag}}</el-tag>\\n      </template>\\n    </el-table-column>\\n  </el-table>\\n</template>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        tableData: [{\\n          date: '2016-05-03',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          tag: 'Home'\\n        }, {\\n          date: '2016-05-02',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          tag: 'Office'\\n        }, {\\n          date: '2016-05-04',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          tag: 'Home'\\n        }, {\\n          date: '2016-05-01',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          tag: 'Office'\\n        }]\\n      }\\n    },\\n    methods: {\\n      resetDateFilter() {\\n        this.$refs.filterTable.clearFilter('date');\\n      },\\n      clearFilter() {\\n        this.$refs.filterTable.clearFilter();\\n      },\\n      formatter(row, column) {\\n        return row.address;\\n      },\\n      filterTag(value, row) {\\n        return row.tag === value;\\n      },\\n      filterHandler(value, row, column) {\\n        const property = column['property'];\\n        return row[property] === value;\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_55 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"custom-column-template\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#custom-column-template\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Custom column template\")\n], -1 /* HOISTED */)\nconst _hoisted_56 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Customize table column so it can be integrated with other components.\", -1 /* HOISTED */)\nconst _hoisted_57 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"You have access to the following data: row, column, $index and store (state management of Table) by \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", { href: \"https://vuejs.org/v2/guide/components.html#Scoped-Slots\" }, \"Scoped slot\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\".\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_58 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-table\\n    :data=\\\"tableData\\\"\\n    style=\\\"width: 100%\\\">\\n    <el-table-column\\n      label=\\\"Date\\\"\\n      width=\\\"180\\\">\\n      <template slot-scope=\\\"scope\\\">\\n        <i class=\\\"el-icon-time\\\"></i>\\n        <span style=\\\"margin-left: 10px\\\">{{ scope.row.date }}</span>\\n      </template>\\n    </el-table-column>\\n    <el-table-column\\n      label=\\\"Name\\\"\\n      width=\\\"180\\\">\\n      <template slot-scope=\\\"scope\\\">\\n        <el-popover trigger=\\\"hover\\\" placement=\\\"top\\\">\\n          <p>Name: {{ scope.row.name }}</p>\\n          <p>Addr: {{ scope.row.address }}</p>\\n          <div slot=\\\"reference\\\" class=\\\"name-wrapper\\\">\\n            <el-tag size=\\\"medium\\\">{{ scope.row.name }}</el-tag>\\n          </div>\\n        </el-popover>\\n      </template>\\n    </el-table-column>\\n    <el-table-column\\n      label=\\\"Operations\\\">\\n      <template slot-scope=\\\"scope\\\">\\n        <el-button\\n          size=\\\"mini\\\"\\n          @click=\\\"handleEdit(scope.$index, scope.row)\\\">Edit</el-button>\\n        <el-button\\n          size=\\\"mini\\\"\\n          type=\\\"danger\\\"\\n          @click=\\\"handleDelete(scope.$index, scope.row)\\\">Delete</el-button>\\n      </template>\\n    </el-table-column>\\n  </el-table>\\n</template>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        tableData: [{\\n          date: '2016-05-03',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }, {\\n          date: '2016-05-02',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }, {\\n          date: '2016-05-04',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }, {\\n          date: '2016-05-01',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }]\\n      }\\n    },\\n    methods: {\\n      handleEdit(index, row) {\\n        console.log(index, row);\\n      },\\n      handleDelete(index, row) {\\n        console.log(index, row);\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_59 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"table-with-custom-header\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#table-with-custom-header\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Table with custom header\")\n], -1 /* HOISTED */)\nconst _hoisted_60 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Customize table header so it can be even more customized.\", -1 /* HOISTED */)\nconst _hoisted_61 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"You can customize how the header looks by header \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", { href: \"https://vuejs.org/v2/guide/components-slots.html#Scoped-Slots\" }, \"scoped slots\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\".\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_62 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-table\\n    :data=\\\"tableData.filter(data => !search || data.name.toLowerCase().includes(search.toLowerCase()))\\\"\\n    style=\\\"width: 100%\\\">\\n    <el-table-column\\n      label=\\\"Date\\\"\\n      prop=\\\"date\\\">\\n    </el-table-column>\\n    <el-table-column\\n      label=\\\"Name\\\"\\n      prop=\\\"name\\\">\\n    </el-table-column>\\n    <el-table-column\\n      align=\\\"right\\\">\\n      <template slot=\\\"header\\\" slot-scope=\\\"scope\\\">\\n        <el-input\\n          v-model=\\\"search\\\"\\n          size=\\\"mini\\\"\\n          placeholder=\\\"Type to search\\\"/>\\n      </template>\\n      <template slot-scope=\\\"scope\\\">\\n        <el-button\\n          size=\\\"mini\\\"\\n          @click=\\\"handleEdit(scope.$index, scope.row)\\\">Edit</el-button>\\n        <el-button\\n          size=\\\"mini\\\"\\n          type=\\\"danger\\\"\\n          @click=\\\"handleDelete(scope.$index, scope.row)\\\">Delete</el-button>\\n      </template>\\n    </el-table-column>\\n  </el-table>\\n</template>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        tableData: [{\\n          date: '2016-05-03',\\n          name: 'Tom',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }, {\\n          date: '2016-05-02',\\n          name: 'John',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }, {\\n          date: '2016-05-04',\\n          name: 'Morgan',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }, {\\n          date: '2016-05-01',\\n          name: 'Jessy',\\n          address: 'No. 189, Grove St, Los Angeles'\\n        }],\\n        search: '',\\n      }\\n    },\\n    methods: {\\n      handleEdit(index, row) {\\n        console.log(index, row);\\n      },\\n      handleDelete(index, row) {\\n        console.log(index, row);\\n      }\\n    },\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_63 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"expandable-row\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#expandable-row\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Expandable row\")\n], -1 /* HOISTED */)\nconst _hoisted_64 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"When the row content is too long and you do not want to display the horizontal scroll bar, you can use the expandable row feature.\", -1 /* HOISTED */)\nconst _hoisted_65 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Activate expandable row by adding type=\\\"expand\\\" and scoped slot. The template for el-table-column will be rendered as the contents of the expanded row, and you can access the same attributes as when you are using \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"Scoped slot\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" in custom column templates.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_66 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-table\\n    :data=\\\"tableData\\\"\\n    style=\\\"width: 100%\\\">\\n    <el-table-column type=\\\"expand\\\">\\n      <template slot-scope=\\\"props\\\">\\n        <p>State: {{ props.row.state }}</p>\\n        <p>City: {{ props.row.city }}</p>\\n        <p>Address: {{ props.row.address }}</p>\\n        <p>Zip: {{ props.row.zip }}</p>\\n      </template>\\n    </el-table-column>\\n    <el-table-column\\n      label=\\\"Date\\\"\\n      prop=\\\"date\\\">\\n    </el-table-column>\\n    <el-table-column\\n      label=\\\"Name\\\"\\n      prop=\\\"name\\\">\\n    </el-table-column>\\n  </el-table>\\n</template>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        tableData: [{\\n          date: '2016-05-03',\\n          name: 'Tom',\\n          state: 'California',\\n          city: 'Los Angeles',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          zip: 'CA 90036'\\n        }, {\\n          date: '2016-05-02',\\n          name: 'Tom',\\n          state: 'California',\\n          city: 'Los Angeles',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          zip: 'CA 90036'\\n        }, {\\n          date: '2016-05-04',\\n          name: 'Tom',\\n          state: 'California',\\n          city: 'Los Angeles',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          zip: 'CA 90036'\\n        }, {\\n          date: '2016-05-01',\\n          name: 'Tom',\\n          state: 'California',\\n          city: 'Los Angeles',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          zip: 'CA 90036'\\n        }, {\\n          date: '2016-05-08',\\n          name: 'Tom',\\n          state: 'California',\\n          city: 'Los Angeles',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          zip: 'CA 90036'\\n        }, {\\n          date: '2016-05-06',\\n          name: 'Tom',\\n          state: 'California',\\n          city: 'Los Angeles',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          zip: 'CA 90036'\\n        }, {\\n          date: '2016-05-07',\\n          name: 'Tom',\\n          state: 'California',\\n          city: 'Los Angeles',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          zip: 'CA 90036'\\n        }]\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_67 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"tree-data-and-lazy-mode\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#tree-data-and-lazy-mode\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Tree data and lazy mode\")\n], -1 /* HOISTED */)\nconst _hoisted_68 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"You can display tree structure data. When row contains the \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"children\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" field, it is treated as nested data. For rendering nested data, the prop \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"row-key\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" is required。Also, child row data can be loaded asynchronously. Set \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"lazy\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" property of Table to true and the function \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"load\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\". Specify \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"hasChildren\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" attribute in row to determine which row contains children. Both \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"children\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" and \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"hasChildren\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" can be configured via \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"tree-props\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\".\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_69 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n<div>\\n  <el-table\\n    :data=\\\"tableData\\\"\\n    style=\\\"width: 100%;margin-bottom: 20px;\\\"\\n    row-key=\\\"id\\\"\\n    border\\n    default-expand-all>\\n    <el-table-column\\n      prop=\\\"date\\\"\\n      label=\\\"date\\\"\\n      sortable\\n      width=\\\"180\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"name\\\"\\n      label=\\\"Name\\\"\\n      sortable\\n      width=\\\"180\\\">\\n    </el-table-column>\\n  </el-table>\\n\\n  <el-table\\n    :data=\\\"tableData1\\\"\\n    style=\\\"width: 100%\\\"\\n    row-key=\\\"id\\\"\\n    border\\n    lazy\\n    :load=\\\"load\\\"\\n    :tree-props=\\\"{children: 'children', hasChildren: 'hasChildren'}\\\">\\n    <el-table-column\\n      prop=\\\"date\\\"\\n      label=\\\"Date\\\"\\n      width=\\\"180\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"name\\\"\\n      label=\\\"Name\\\"\\n      width=\\\"180\\\">\\n    </el-table-column>\\n  </el-table>\\n</div>\\n</template>\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        tableData: [{\\n          id: 1,\\n          date: '2016-05-02',\\n          name: 'wangxiaohu'\\n        }, {\\n          id: 2,\\n          date: '2016-05-04',\\n          name: 'wangxiaohu'\\n        }, {\\n          id: 3,\\n          date: '2016-05-01',\\n          name: 'wangxiaohu',\\n          children: [{\\n              id: 31,\\n              date: '2016-05-01',\\n              name: 'wangxiaohu'\\n            }, {\\n              id: 32,\\n              date: '2016-05-01',\\n              name: 'wangxiaohu'\\n          }]\\n        }, {\\n          id: 4,\\n          date: '2016-05-03',\\n          name: 'wangxiaohu'\\n        }],\\n        tableData1: [{\\n          id: 1,\\n          date: '2016-05-02',\\n          name: 'wangxiaohu'\\n        }, {\\n          id: 2,\\n          date: '2016-05-04',\\n          name: 'wangxiaohu'\\n        }, {\\n          id: 3,\\n          date: '2016-05-01',\\n          name: 'wangxiaohu',\\n          hasChildren: true\\n        }, {\\n          id: 4,\\n          date: '2016-05-03',\\n          name: 'wangxiaohu'\\n        }]\\n      }\\n    },\\n    methods: {\\n      load(tree, treeNode, resolve) {\\n        setTimeout(() => {\\n          resolve([\\n            {\\n              id: 31,\\n              date: '2016-05-01',\\n              name: 'wangxiaohu'\\n            }, {\\n              id: 32,\\n              date: '2016-05-01',\\n              name: 'wangxiaohu'\\n            }\\n          ])\\n        }, 1000)\\n      }\\n    },\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_70 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"summary-row\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#summary-row\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Summary row\")\n], -1 /* HOISTED */)\nconst _hoisted_71 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"For table of numbers, you can add an extra row at the table footer displaying each column's sum.\", -1 /* HOISTED */)\nconst _hoisted_72 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"You can add the summary row by setting \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"show-summary\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" to \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"true\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\". By default, for the summary row, the first column does not sum anything up but always displays 'Sum' (you can configure the displayed text using \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"sum-text\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"), while other columns sum every number in that column up and display them. You can of course define your own sum behaviour. To do so, pass a method to \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"summary-method\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\", which returns an array, and each element of the returned array will be displayed in the columns of the summary row. The second table of this example is a detailed demo.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_73 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-table\\n    :data=\\\"tableData\\\"\\n    border\\n    show-summary\\n    style=\\\"width: 100%\\\">\\n    <el-table-column\\n      prop=\\\"id\\\"\\n      label=\\\"ID\\\"\\n      width=\\\"180\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"name\\\"\\n      label=\\\"Name\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"amount1\\\"\\n      sortable\\n      label=\\\"Amount 1\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"amount2\\\"\\n      sortable\\n      label=\\\"Amount 2\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"amount3\\\"\\n      sortable\\n      label=\\\"Amount 3\\\">\\n    </el-table-column>\\n  </el-table>\\n\\n  <el-table\\n    :data=\\\"tableData\\\"\\n    border\\n    height=\\\"200\\\"\\n    :summary-method=\\\"getSummaries\\\"\\n    show-summary\\n    style=\\\"width: 100%; margin-top: 20px\\\">\\n    <el-table-column\\n      prop=\\\"id\\\"\\n      label=\\\"ID\\\"\\n      width=\\\"180\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"name\\\"\\n      label=\\\"Name\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"amount1\\\"\\n      label=\\\"Cost 1 ($)\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"amount2\\\"\\n      label=\\\"Cost 2 ($)\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"amount3\\\"\\n      label=\\\"Cost 3 ($)\\\">\\n    </el-table-column>\\n  </el-table>\\n</template>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        tableData: [{\\n          id: '12987122',\\n          name: 'Tom',\\n          amount1: '234',\\n          amount2: '3.2',\\n          amount3: 10\\n        }, {\\n          id: '12987123',\\n          name: 'Tom',\\n          amount1: '165',\\n          amount2: '4.43',\\n          amount3: 12\\n        }, {\\n          id: '12987124',\\n          name: 'Tom',\\n          amount1: '324',\\n          amount2: '1.9',\\n          amount3: 9\\n        }, {\\n          id: '12987125',\\n          name: 'Tom',\\n          amount1: '621',\\n          amount2: '2.2',\\n          amount3: 17\\n        }, {\\n          id: '12987126',\\n          name: 'Tom',\\n          amount1: '539',\\n          amount2: '4.1',\\n          amount3: 15\\n        }]\\n      };\\n    },\\n    methods: {\\n      getSummaries(param) {\\n        const { columns, data } = param;\\n        const sums = [];\\n        columns.forEach((column, index) => {\\n          if (index === 0) {\\n            sums[index] = 'Total Cost';\\n            return;\\n          }\\n          const values = data.map(item => Number(item[column.property]));\\n          if (!values.every(value => isNaN(value))) {\\n            sums[index] = '$ ' + values.reduce((prev, curr) => {\\n              const value = Number(curr);\\n              if (!isNaN(value)) {\\n                return prev + curr;\\n              } else {\\n                return prev;\\n              }\\n            }, 0);\\n          } else {\\n            sums[index] = 'N/A';\\n          }\\n        });\\n\\n        return sums;\\n      }\\n    }\\n  };\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_74 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"rowspan-and-colspan\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#rowspan-and-colspan\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Rowspan and colspan\")\n], -1 /* HOISTED */)\nconst _hoisted_75 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Configuring rowspan and colspan allows you to merge cells\", -1 /* HOISTED */)\nconst _hoisted_76 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Use the \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"span-method\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" attribute to configure rowspan and colspan. It accepts a method, and passes an object to that method including current row \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"row\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\", current column \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"column\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\", current row index \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"rowIndex\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" and current column index \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"columnIndex\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\". The method should return an array of two numbers, the first number being \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"rowspan\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" and second \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"colspan\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\". It can also return an object with \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"rowspan\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" and \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"colspan\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" props.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_77 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <div>\\n    <el-table\\n      :data=\\\"tableData\\\"\\n      :span-method=\\\"arraySpanMethod\\\"\\n      border\\n      style=\\\"width: 100%\\\">\\n      <el-table-column\\n        prop=\\\"id\\\"\\n        label=\\\"ID\\\"\\n        width=\\\"180\\\">\\n      </el-table-column>\\n      <el-table-column\\n        prop=\\\"name\\\"\\n        label=\\\"Name\\\">\\n      </el-table-column>\\n      <el-table-column\\n        prop=\\\"amount1\\\"\\n        sortable\\n        label=\\\"Amount 1\\\">\\n      </el-table-column>\\n      <el-table-column\\n        prop=\\\"amount2\\\"\\n        sortable\\n        label=\\\"Amount 2\\\">\\n      </el-table-column>\\n      <el-table-column\\n        prop=\\\"amount3\\\"\\n        sortable\\n        label=\\\"Amount 3\\\">\\n      </el-table-column>\\n    </el-table>\\n\\n    <el-table\\n      :data=\\\"tableData\\\"\\n      :span-method=\\\"objectSpanMethod\\\"\\n      border\\n      style=\\\"width: 100%; margin-top: 20px\\\">\\n      <el-table-column\\n        prop=\\\"id\\\"\\n        label=\\\"ID\\\"\\n        width=\\\"180\\\">\\n      </el-table-column>\\n      <el-table-column\\n        prop=\\\"name\\\"\\n        label=\\\"Name\\\">\\n      </el-table-column>\\n      <el-table-column\\n        prop=\\\"amount1\\\"\\n        label=\\\"Amount 1\\\">\\n      </el-table-column>\\n      <el-table-column\\n        prop=\\\"amount2\\\"\\n        label=\\\"Amount 2\\\">\\n      </el-table-column>\\n      <el-table-column\\n        prop=\\\"amount3\\\"\\n        label=\\\"Amount 3\\\">\\n      </el-table-column>\\n    </el-table>\\n  </div>\\n</template>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        tableData: [{\\n          id: '12987122',\\n          name: 'Tom',\\n          amount1: '234',\\n          amount2: '3.2',\\n          amount3: 10\\n        }, {\\n          id: '12987123',\\n          name: 'Tom',\\n          amount1: '165',\\n          amount2: '4.43',\\n          amount3: 12\\n        }, {\\n          id: '12987124',\\n          name: 'Tom',\\n          amount1: '324',\\n          amount2: '1.9',\\n          amount3: 9\\n        }, {\\n          id: '12987125',\\n          name: 'Tom',\\n          amount1: '621',\\n          amount2: '2.2',\\n          amount3: 17\\n        }, {\\n          id: '12987126',\\n          name: 'Tom',\\n          amount1: '539',\\n          amount2: '4.1',\\n          amount3: 15\\n        }]\\n      };\\n    },\\n    methods: {\\n      arraySpanMethod({ row, column, rowIndex, columnIndex }) {\\n        if (rowIndex % 2 === 0) {\\n          if (columnIndex === 0) {\\n            return [1, 2];\\n          } else if (columnIndex === 1) {\\n            return [0, 0];\\n          }\\n        }\\n      },\\n\\n      objectSpanMethod({ row, column, rowIndex, columnIndex }) {\\n        if (columnIndex === 0) {\\n          if (rowIndex % 2 === 0) {\\n            return {\\n              rowspan: 2,\\n              colspan: 1\\n            };\\n          } else {\\n            return {\\n              rowspan: 0,\\n              colspan: 0\\n            };\\n          }\\n        }\\n      }\\n    }\\n  };\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_78 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"custom-index\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#custom-index\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Custom index\")\n], -1 /* HOISTED */)\nconst _hoisted_79 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"You can customize row index in \"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"type=index\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" columns.\")\n], -1 /* HOISTED */)\nconst _hoisted_80 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"To customize row indices, use \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"index\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" attribute on \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"el-table-column\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" with \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"type=index\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\". If it is assigned to a number, all indices will have an offset of that number. It also accepts a method with each index (starting from \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"0\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\") as parameter, and the returned value will be displayed as index.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_81 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-table\\n    :data=\\\"tableData\\\"\\n    style=\\\"width: 100%\\\">\\n    <el-table-column\\n      type=\\\"index\\\"\\n      :index=\\\"indexMethod\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"date\\\"\\n      label=\\\"Date\\\"\\n      width=\\\"180\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"name\\\"\\n      label=\\\"Name\\\"\\n      width=\\\"180\\\">\\n    </el-table-column>\\n    <el-table-column\\n      prop=\\\"address\\\"\\n      label=\\\"Address\\\">\\n    </el-table-column>\\n  </el-table>\\n</template>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        tableData: [{\\n          date: '2016-05-03',\\n          name: 'Tom',\\n          state: 'California',\\n          city: 'Los Angeles',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          zip: 'CA 90036',\\n          tag: 'Home'\\n        }, {\\n          date: '2016-05-02',\\n          name: 'Tom',\\n          state: 'California',\\n          city: 'Los Angeles',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          zip: 'CA 90036',\\n          tag: 'Office'\\n        }, {\\n          date: '2016-05-04',\\n          name: 'Tom',\\n          state: 'California',\\n          city: 'Los Angeles',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          zip: 'CA 90036',\\n          tag: 'Home'\\n        }, {\\n          date: '2016-05-01',\\n          name: 'Tom',\\n          state: 'California',\\n          city: 'Los Angeles',\\n          address: 'No. 189, Grove St, Los Angeles',\\n          zip: 'CA 90036',\\n          tag: 'Office'\\n        }],\\n      }\\n    },\\n    methods: {\\n      indexMethod(index) {\\n        return index * 2;\\n      }\\n    }\\n  };\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_82 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createStaticVNode\"])(\"<h3 id=\\\"table-attributes\\\"><a class=\\\"header-anchor\\\" href=\\\"#table-attributes\\\">¶</a> Table Attributes</h3><table><thead><tr><th>Attribute</th><th>Description</th><th>Type</th><th>Accepted Values</th><th>Default</th></tr></thead><tbody><tr><td>data</td><td>Table data</td><td>array</td><td>—</td><td>—</td></tr><tr><td>height</td><td>Table&#39;s height. By default it has an <code>auto</code> height. If its value is a number, the height is measured in pixels; if its value is a string, the value will be assigned to element&#39;s style.height, the height is affected by external styles</td><td>string/number</td><td>—</td><td>—</td></tr><tr><td>max-height</td><td>Table&#39;s max-height. The legal value is a number or the height in px.</td><td>string/number</td><td>—</td><td>—</td></tr><tr><td>stripe</td><td>whether Table is striped</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>border</td><td>whether Table has vertical border</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>size</td><td>size of Table</td><td>string</td><td>medium / small / mini</td><td>—</td></tr><tr><td>fit</td><td>whether width of column automatically fits its container</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>show-header</td><td>whether Table header is visible</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>highlight-current-row</td><td>whether current row is highlighted</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>current-row-key</td><td>key of current row, a set only prop</td><td>string,number</td><td>—</td><td>—</td></tr><tr><td>row-class-name</td><td>function that returns custom class names for a row, or a string assigning class names for every row</td><td>Function({row, rowIndex})/String</td><td>—</td><td>—</td></tr><tr><td>row-style</td><td>function that returns custom style for a row, or an object assigning custom style for every row</td><td>Function({row, rowIndex})/Object</td><td>—</td><td>—</td></tr><tr><td>cell-class-name</td><td>function that returns custom class names for a cell, or a string assigning class names for every cell</td><td>Function({row, column, rowIndex, columnIndex})/String</td><td>—</td><td>—</td></tr><tr><td>cell-style</td><td>function that returns custom style for a cell, or an object assigning custom style for every cell</td><td>Function({row, column, rowIndex, columnIndex})/Object</td><td>—</td><td>—</td></tr><tr><td>header-row-class-name</td><td>function that returns custom class names for a row in table header, or a string assigning class names for every row in table header</td><td>Function({row, rowIndex})/String</td><td>—</td><td>—</td></tr><tr><td>header-row-style</td><td>function that returns custom style for a row in table header, or an object assigning custom style for every row in table header</td><td>Function({row, rowIndex})/Object</td><td>—</td><td>—</td></tr><tr><td>header-cell-class-name</td><td>function that returns custom class names for a cell in table header, or a string assigning class names for every cell in table header</td><td>Function({row, column, rowIndex, columnIndex})/String</td><td>—</td><td>—</td></tr><tr><td>header-cell-style</td><td>function that returns custom style for a cell in table header, or an object assigning custom style for every cell in table header</td><td>Function({row, column, rowIndex, columnIndex})/Object</td><td>—</td><td>—</td></tr><tr><td>row-key</td><td>key of row data, used for optimizing rendering. Required if <code>reserve-selection</code> is on or display tree data. When its type is String, multi-level access is supported, e.g. <code>user.info.id</code>, but <code>user.info[0].id</code> is not supported, in which case <code>Function</code> should be used.</td><td>Function(row)/String</td><td>—</td><td>—</td></tr><tr><td>empty-text</td><td>Displayed text when data is empty. You can customize this area with <code>slot=&quot;empty&quot;</code></td><td>String</td><td>—</td><td>No Data</td></tr><tr><td>default-expand-all</td><td>whether expand all rows by default, works when the table has a column type=&quot;expand&quot; or contains tree structure data</td><td>Boolean</td><td>—</td><td>false</td></tr><tr><td>expand-row-keys</td><td>set expanded rows by this prop, prop&#39;s value is the keys of expand rows, you should set row-key before using this prop</td><td>Array</td><td>—</td><td></td></tr><tr><td>default-sort</td><td>set the default sort column and order. property <code>prop</code> is used to set default sort column, property <code>order</code> is used to set default sort order</td><td>Object</td><td><code>order</code>: ascending, descending</td><td>if <code>prop</code> is set, and <code>order</code> is not set, then <code>order</code> is default to ascending</td></tr><tr><td>tooltip-effect</td><td>tooltip <code>effect</code> property</td><td>String</td><td>dark/light</td><td></td></tr><tr><td>show-summary</td><td>whether to display a summary row</td><td>Boolean</td><td>—</td><td>false</td></tr><tr><td>sum-text</td><td>displayed text for the first column of summary row</td><td>String</td><td>—</td><td>Sum</td></tr><tr><td>summary-method</td><td>custom summary method</td><td>Function({ columns, data })</td><td>—</td><td>—</td></tr><tr><td>span-method</td><td>method that returns rowspan and colspan</td><td>Function({ row, column, rowIndex, columnIndex })</td><td>—</td><td>—</td></tr><tr><td>select-on-indeterminate</td><td>controls the behavior of master checkbox in multi-select tables when only some rows are selected (but not all). If true, all rows will be selected, else deselected.</td><td>Boolean</td><td>—</td><td>true</td></tr><tr><td>indent</td><td>horizontal indentation of tree data</td><td>Number</td><td>—</td><td>16</td></tr><tr><td>lazy</td><td>whether to lazy loading data</td><td>Boolean</td><td>—</td><td>—</td></tr><tr><td>load</td><td>method for loading child row data, only works when <code>lazy</code> is true</td><td>Function(row, treeNode, resolve)</td><td>—</td><td>—</td></tr><tr><td>tree-props</td><td>configuration for rendering nested data</td><td>Object</td><td>—</td><td>{ hasChildren: &#39;hasChildren&#39;, children: &#39;children&#39; }</td></tr></tbody></table><h3 id=\\\"table-events\\\"><a class=\\\"header-anchor\\\" href=\\\"#table-events\\\">¶</a> Table Events</h3><table><thead><tr><th>Event Name</th><th>Description</th><th>Parameters</th></tr></thead><tbody><tr><td>select</td><td>triggers when user clicks the checkbox in a row</td><td>selection, row</td></tr><tr><td>select-all</td><td>triggers when user clicks the checkbox in table header</td><td>selection</td></tr><tr><td>selection-change</td><td>triggers when selection changes</td><td>selection</td></tr><tr><td>cell-mouse-enter</td><td>triggers when hovering into a cell</td><td>row, column, cell, event</td></tr><tr><td>cell-mouse-leave</td><td>triggers when hovering out of a cell</td><td>row, column, cell, event</td></tr><tr><td>cell-click</td><td>triggers when clicking a cell</td><td>row, column, cell, event</td></tr><tr><td>cell-dblclick</td><td>triggers when double clicking a cell</td><td>row, column, cell, event</td></tr><tr><td>row-click</td><td>triggers when clicking a row</td><td>row, column, event</td></tr><tr><td>row-contextmenu</td><td>triggers when user right clicks on a row</td><td>row, column, event</td></tr><tr><td>row-dblclick</td><td>triggers when double clicking a row</td><td>row, column, event</td></tr><tr><td>header-click</td><td>triggers when clicking a column header</td><td>column, event</td></tr><tr><td>header-contextmenu</td><td>triggers when user right clicks on a column header</td><td>column, event</td></tr><tr><td>sort-change</td><td>triggers when Table&#39;s sorting changes</td><td>{ column, prop, order }</td></tr><tr><td>filter-change</td><td>column&#39;s key. If you need to use the filter-change event, this attribute is mandatory to identify which column is being filtered</td><td>filters</td></tr><tr><td>current-change</td><td>triggers when current row changes</td><td>currentRow, oldCurrentRow</td></tr><tr><td>header-dragend</td><td>triggers after changing a column&#39;s width by dragging the column header&#39;s border</td><td>newWidth, oldWidth, column, event</td></tr><tr><td>expand-change</td><td>triggers when user expands or collapses a row (for expandable table, second param is expandedRows; for tree Table, second param is expanded)</td><td>row, (expandedRows | expanded)</td></tr></tbody></table><h3 id=\\\"table-methods\\\"><a class=\\\"header-anchor\\\" href=\\\"#table-methods\\\">¶</a> Table Methods</h3><table><thead><tr><th>Method</th><th>Description</th><th>Parameters</th></tr></thead><tbody><tr><td>clearSelection</td><td>used in multiple selection Table, clear user selection</td><td>—</td></tr><tr><td>toggleRowSelection</td><td>used in multiple selection Table, toggle if a certain row is selected. With the second parameter, you can directly set if this row is selected</td><td>row, selected</td></tr><tr><td>toggleAllSelection</td><td>used in multiple selection Table, toggle the selected state of all rows</td><td>-</td></tr><tr><td>toggleRowExpansion</td><td>used in expandable Table or tree Table, toggle if a certain row is expanded. With the second parameter, you can directly set if this row is expanded or collapsed</td><td>row, expanded</td></tr><tr><td>setCurrentRow</td><td>used in single selection Table, set a certain row selected. If called without any parameter, it will clear selection.</td><td>row</td></tr><tr><td>clearSort</td><td>clear sorting, restore data to the original order</td><td>—</td></tr><tr><td>clearFilter</td><td>clear filters of the columns whose <code>columnKey</code> are passed in. If no params, clear all filters</td><td>columnKeys</td></tr><tr><td>doLayout</td><td>refresh the layout of Table. When the visibility of Table changes, you may need to call this method to get a correct layout</td><td>—</td></tr><tr><td>sort</td><td>sort Table manually. Property <code>prop</code> is used to set sort column, property <code>order</code> is used to set sort order</td><td>prop: string, order: string</td></tr></tbody></table><h3 id=\\\"table-slot\\\"><a class=\\\"header-anchor\\\" href=\\\"#table-slot\\\">¶</a> Table Slot</h3><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>append</td><td>Contents to be inserted after the last row. You may need this slot if you want to implement infinite scroll for the table. This slot will be displayed above the summary row if there is one.</td></tr></tbody></table><h3 id=\\\"table-column-attributes\\\"><a class=\\\"header-anchor\\\" href=\\\"#table-column-attributes\\\">¶</a> Table-column Attributes</h3><table><thead><tr><th>Attribute</th><th>Description</th><th>Type</th><th>Accepted Values</th><th>Default</th></tr></thead><tbody><tr><td>type</td><td>type of the column. If set to <code>selection</code>, the column will display checkbox. If set to <code>index</code>, the column will display index of the row (staring from 1). If set to <code>expand</code>, the column will display expand icon.</td><td>string</td><td>selection/index/expand</td><td>—</td></tr><tr><td>index</td><td>customize indices for each row, works on columns with <code>type=index</code></td><td>number, Function(index)</td><td>-</td><td>-</td></tr><tr><td>label</td><td>column label</td><td>string</td><td>—</td><td>—</td></tr><tr><td>column-key</td><td>column&#39;s key. If you need to use the filter-change event, you need this attribute to identify which column is being filtered</td><td>string</td><td>string</td><td>—</td></tr><tr><td>prop</td><td>field name. You can also use its alias: <code>property</code></td><td>string</td><td>—</td><td>—</td></tr><tr><td>width</td><td>column width</td><td>string</td><td>—</td><td>—</td></tr><tr><td>min-width</td><td>column minimum width. Columns with <code>width</code> has a fixed width, while columns with <code>min-width</code> has a width that is distributed in proportion</td><td>string</td><td>—</td><td>—</td></tr><tr><td>fixed</td><td>whether column is fixed at left/right. Will be fixed at left if <code>true</code></td><td>string/boolean</td><td>true/left/right</td><td>—</td></tr><tr><td>render-header</td><td>render function for table header of this column</td><td>Function(h, { column, $index })</td><td>—</td><td>—</td></tr><tr><td>sortable</td><td>whether column can be sorted. Remote sorting can be done by setting this attribute to &#39;custom&#39; and listening to the <code>sort-change</code> event of Table</td><td>boolean, string</td><td>true, false, custom</td><td>false</td></tr><tr><td>sort-method</td><td>sorting method, works when <code>sortable</code> is <code>true</code>. Should return a number, just like Array.sort</td><td>Function(a, b)</td><td>—</td><td>—</td></tr><tr><td>sort-by</td><td>specify which property to sort by, works when <code>sortable</code> is <code>true</code> and <code>sort-method</code> is <code>undefined</code>. If set to an Array, the column will sequentially sort by the next property if the previous one is equal</td><td>Function(row, index)/String/Array</td><td>—</td><td>—</td></tr><tr><td>sort-orders</td><td>the order of the sorting strategies used when sorting the data, works when <code>sortable</code> is <code>true</code>. Accepts an array, as the user clicks on the header, the column is sorted in order of the elements in the array</td><td>array</td><td>the elements in the array need to be one of the following: <code>ascending</code>, <code>descending</code> and <code>null</code> (restores to the original order)</td><td>[&#39;ascending&#39;, &#39;descending&#39;, null]</td></tr><tr><td>resizable</td><td>whether column width can be resized, works when <code>border</code> of <code>el-table</code> is <code>true</code></td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>formatter</td><td>function that formats cell content</td><td>Function(row, column, cellValue, index)</td><td>—</td><td>—</td></tr><tr><td>show-overflow-tooltip</td><td>whether to hide extra content and show them in a tooltip when hovering on the cell</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>align</td><td>alignment</td><td>string</td><td>left/center/right</td><td>left</td></tr><tr><td>header-align</td><td>alignment of the table header. If omitted, the value of the above <code>align</code> attribute will be applied</td><td>String</td><td>left/center/right</td><td>—</td></tr><tr><td>class-name</td><td>class name of cells in the column</td><td>string</td><td>—</td><td>—</td></tr><tr><td>label-class-name</td><td>class name of the label of this column</td><td>string</td><td>—</td><td>—</td></tr><tr><td>selectable</td><td>function that determines if a certain row can be selected, works when <code>type</code> is &#39;selection&#39;</td><td>Function(row, index)</td><td>—</td><td>—</td></tr><tr><td>reserve-selection</td><td>whether to reserve selection after data refreshing, works when <code>type</code> is &#39;selection&#39;. Note that <code>row-key</code> is required for this to work</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>filters</td><td>an array of data filtering options. For each element in this array, <code>text</code> and <code>value</code> are required</td><td>Array[{ text, value }]</td><td>—</td><td>—</td></tr><tr><td>filter-placement</td><td>placement for the filter dropdown</td><td>String</td><td>same as Tooltip&#39;s <code>placement</code></td><td>—</td></tr><tr><td>filter-multiple</td><td>whether data filtering supports multiple options</td><td>Boolean</td><td>—</td><td>true</td></tr><tr><td>filter-method</td><td>data filtering method. If <code>filter-multiple</code> is on, this method will be called multiple times for each row, and a row will display if one of the calls returns <code>true</code></td><td>Function(value, row, column)</td><td>—</td><td>—</td></tr><tr><td>filtered-value</td><td>filter value for selected data, might be useful when table header is rendered with <code>render-header</code></td><td>Array</td><td>—</td><td>—</td></tr></tbody></table><h3 id=\\\"table-column-scoped-slot\\\"><a class=\\\"header-anchor\\\" href=\\\"#table-column-scoped-slot\\\">¶</a> Table-column Scoped Slot</h3><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>—</td><td>Custom content for table columns. The scope parameter is { row, column, $index }</td></tr><tr><td>header</td><td>Custom content for table header. The scope parameter is { column, $index }</td></tr></tbody></table>\", 12)\n\nfunction render(_ctx, _cache) {\n  const _component_element_demo0 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo0\")\n  const _component_demo_block = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"demo-block\")\n  const _component_element_demo1 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo1\")\n  const _component_element_demo2 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo2\")\n  const _component_element_demo3 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo3\")\n  const _component_element_demo4 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo4\")\n  const _component_element_demo5 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo5\")\n  const _component_element_demo6 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo6\")\n  const _component_element_demo7 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo7\")\n  const _component_element_demo8 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo8\")\n  const _component_element_demo9 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo9\")\n  const _component_element_demo10 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo10\")\n  const _component_element_demo11 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo11\")\n  const _component_element_demo12 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo12\")\n  const _component_element_demo13 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo13\")\n  const _component_element_demo14 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo14\")\n  const _component_element_demo15 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo15\")\n  const _component_element_demo16 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo16\")\n  const _component_element_demo17 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo17\")\n  const _component_element_demo18 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo18\")\n  const _component_element_demo19 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo19\")\n\n  return (Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"openBlock\"])(), Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createBlock\"])(\"section\", _hoisted_1, [\n    _hoisted_2,\n    _hoisted_3,\n    _hoisted_4,\n    _hoisted_5,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo0)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_7\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_6\n      ]),\n      _: 1\n    }),\n    _hoisted_8,\n    _hoisted_9,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo1)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_11\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_10\n      ]),\n      _: 1\n    }),\n    _hoisted_12,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo2)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_14\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_13\n      ]),\n      _: 1\n    }),\n    _hoisted_15,\n    _hoisted_16,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo3)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_18\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_17\n      ]),\n      _: 1\n    }),\n    _hoisted_19,\n    _hoisted_20,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo4)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_22\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_21\n      ]),\n      _: 1\n    }),\n    _hoisted_23,\n    _hoisted_24,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo5)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_26\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_25\n      ]),\n      _: 1\n    }),\n    _hoisted_27,\n    _hoisted_28,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo6)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_30\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_29\n      ]),\n      _: 1\n    }),\n    _hoisted_31,\n    _hoisted_32,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo7)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_34\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_33\n      ]),\n      _: 1\n    }),\n    _hoisted_35,\n    _hoisted_36,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo8)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_38\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_37\n      ]),\n      _: 1\n    }),\n    _hoisted_39,\n    _hoisted_40,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo9)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_42\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_41\n      ]),\n      _: 1\n    }),\n    _hoisted_43,\n    _hoisted_44,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo10)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_46\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_45\n      ]),\n      _: 1\n    }),\n    _hoisted_47,\n    _hoisted_48,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo11)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_50\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_49\n      ]),\n      _: 1\n    }),\n    _hoisted_51,\n    _hoisted_52,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo12)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_54\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_53\n      ]),\n      _: 1\n    }),\n    _hoisted_55,\n    _hoisted_56,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo13)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_58\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_57\n      ]),\n      _: 1\n    }),\n    _hoisted_59,\n    _hoisted_60,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo14)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_62\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_61\n      ]),\n      _: 1\n    }),\n    _hoisted_63,\n    _hoisted_64,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo15)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_66\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_65\n      ]),\n      _: 1\n    }),\n    _hoisted_67,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo16)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_69\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_68\n      ]),\n      _: 1\n    }),\n    _hoisted_70,\n    _hoisted_71,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo17)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_73\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_72\n      ]),\n      _: 1\n    }),\n    _hoisted_74,\n    _hoisted_75,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo18)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_77\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_76\n      ]),\n      _: 1\n    }),\n    _hoisted_78,\n    _hoisted_79,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo19)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_81\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_80\n      ]),\n      _: 1\n    }),\n    _hoisted_82\n  ]))\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vue-loader/dist/templateLoader.js?!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/en-US/table.md?vue&type=template&id=57ef6f68\n");

/***/ })

}]);