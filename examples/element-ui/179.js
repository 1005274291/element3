(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[179],{

/***/ "./examples/docs/fr-FR/form.md":
/*!*************************************!*\
  !*** ./examples/docs/fr-FR/form.md ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _form_md_vue_type_template_id_ccec254a__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./form.md?vue&type=template&id=ccec254a */ \"./examples/docs/fr-FR/form.md?vue&type=template&id=ccec254a\");\n/* harmony import */ var _form_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./form.md?vue&type=script&lang=js */ \"./examples/docs/fr-FR/form.md?vue&type=script&lang=js\");\n/* empty/unused harmony star reexport */\n\n\n_form_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].render = _form_md_vue_type_template_id_ccec254a__WEBPACK_IMPORTED_MODULE_0__[\"render\"]\n/* hot reload */\nif (true) {\n  _form_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].__hmrId = \"ccec254a\"\n  const api = __VUE_HMR_RUNTIME__\n  module.hot.accept()\n  if (!api.createRecord('ccec254a', _form_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])) {\n    api.reload('ccec254a', _form_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])\n  }\n  \n  module.hot.accept(/*! ./form.md?vue&type=template&id=ccec254a */ \"./examples/docs/fr-FR/form.md?vue&type=template&id=ccec254a\", function(__WEBPACK_OUTDATED_DEPENDENCIES__) { /* harmony import */ _form_md_vue_type_template_id_ccec254a__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./form.md?vue&type=template&id=ccec254a */ \"./examples/docs/fr-FR/form.md?vue&type=template&id=ccec254a\");\n(() => {\n    api.rerender('ccec254a', _form_md_vue_type_template_id_ccec254a__WEBPACK_IMPORTED_MODULE_0__[\"render\"])\n  })(__WEBPACK_OUTDATED_DEPENDENCIES__); }.bind(this))\n\n}\n\n_form_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].__file = \"examples/docs/fr-FR/form.md\"\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (_form_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9leGFtcGxlcy9kb2NzL2ZyLUZSL2Zvcm0ubWQ/ZTRiZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQSx3Q0FBZ0U7QUFDVjtBQUNMO0FBQ2pELHdFQUFNLFVBQVUsNkVBQU07QUFDdEI7QUFDQSxJQUFJLElBQVU7QUFDZCxFQUFFLHdFQUFNO0FBQ1I7QUFDQTtBQUNBLG9DQUFvQyx3RUFBTTtBQUMxQywyQkFBMkIsd0VBQU07QUFDakM7O0FBRUEsb0JBQW9CLDRHQUF5QyxFQUFFO0FBQUE7QUFDL0QsNkJBQTZCLDZFQUFNO0FBQ25DLEdBQUc7O0FBRUg7O0FBRUEsd0VBQU07O0FBRVMsdUkiLCJmaWxlIjoiLi9leGFtcGxlcy9kb2NzL2ZyLUZSL2Zvcm0ubWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXIgfSBmcm9tIFwiLi9mb3JtLm1kP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWNjZWMyNTRhXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vZm9ybS5tZD92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5leHBvcnQgKiBmcm9tIFwiLi9mb3JtLm1kP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcbnNjcmlwdC5yZW5kZXIgPSByZW5kZXJcbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHNjcmlwdC5fX2htcklkID0gXCJjY2VjMjU0YVwiXG4gIGNvbnN0IGFwaSA9IF9fVlVFX0hNUl9SVU5USU1FX19cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIWFwaS5jcmVhdGVSZWNvcmQoJ2NjZWMyNTRhJywgc2NyaXB0KSkge1xuICAgIGFwaS5yZWxvYWQoJ2NjZWMyNTRhJywgc2NyaXB0KVxuICB9XG4gIFxuICBtb2R1bGUuaG90LmFjY2VwdChcIi4vZm9ybS5tZD92dWUmdHlwZT10ZW1wbGF0ZSZpZD1jY2VjMjU0YVwiLCAoKSA9PiB7XG4gICAgYXBpLnJlcmVuZGVyKCdjY2VjMjU0YScsIHJlbmRlcilcbiAgfSlcblxufVxuXG5zY3JpcHQuX19maWxlID0gXCJleGFtcGxlcy9kb2NzL2ZyLUZSL2Zvcm0ubWRcIlxuXG5leHBvcnQgZGVmYXVsdCBzY3JpcHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./examples/docs/fr-FR/form.md\n");

/***/ }),

/***/ "./examples/docs/fr-FR/form.md?vue&type=script&lang=js":
/*!*************************************************************!*\
  !*** ./examples/docs/fr-FR/form.md?vue&type=script&lang=js ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_dist_index_js_ref_3_0_build_md_loader_index_js_form_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib!../../../node_modules/vue-loader/dist??ref--3-0!../../../build/md-loader!./form.md?vue&type=script&lang=js */ \"./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/fr-FR/form.md?vue&type=script&lang=js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_dist_index_js_ref_3_0_build_md_loader_index_js_form_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; });\n\n/* empty/unused harmony star reexport */ \n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9leGFtcGxlcy9kb2NzL2ZyLUZSL2Zvcm0ubWQ/OTdlOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHdDQUF5TSIsImZpbGUiOiIuL2V4YW1wbGVzL2RvY3MvZnItRlIvZm9ybS5tZD92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9yZWYtLTMtMCEuLi8uLi8uLi9idWlsZC9tZC1sb2FkZXIvaW5kZXguanMhLi9mb3JtLm1kP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCI7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3JlZi0tMy0wIS4uLy4uLy4uL2J1aWxkL21kLWxvYWRlci9pbmRleC5qcyEuL2Zvcm0ubWQ/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./examples/docs/fr-FR/form.md?vue&type=script&lang=js\n");

/***/ }),

/***/ "./examples/docs/fr-FR/form.md?vue&type=template&id=ccec254a":
/*!*******************************************************************!*\
  !*** ./examples/docs/fr-FR/form.md?vue&type=template&id=ccec254a ***!
  \*******************************************************************/
/*! exports provided: render */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_vue_loader_dist_templateLoader_js_ref_5_node_modules_vue_loader_dist_index_js_ref_3_0_build_md_loader_index_js_form_md_vue_type_template_id_ccec254a__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/vue-loader/dist/templateLoader.js??ref--5!../../../node_modules/vue-loader/dist??ref--3-0!../../../build/md-loader!./form.md?vue&type=template&id=ccec254a */ \"./node_modules/vue-loader/dist/templateLoader.js?!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/fr-FR/form.md?vue&type=template&id=ccec254a\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return _node_modules_vue_loader_dist_templateLoader_js_ref_5_node_modules_vue_loader_dist_index_js_ref_3_0_build_md_loader_index_js_form_md_vue_type_template_id_ccec254a__WEBPACK_IMPORTED_MODULE_0__[\"render\"]; });\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9leGFtcGxlcy9kb2NzL2ZyLUZSL2Zvcm0ubWQ/OTJiOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQSIsImZpbGUiOiIuL2V4YW1wbGVzL2RvY3MvZnItRlIvZm9ybS5tZD92dWUmdHlwZT10ZW1wbGF0ZSZpZD1jY2VjMjU0YS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvdGVtcGxhdGVMb2FkZXIuanM/P3JlZi0tNSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9yZWYtLTMtMCEuLi8uLi8uLi9idWlsZC9tZC1sb2FkZXIvaW5kZXguanMhLi9mb3JtLm1kP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWNjZWMyNTRhXCIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./examples/docs/fr-FR/form.md?vue&type=template&id=ccec254a\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/fr-FR/form.md?vue&type=script&lang=js":
/*!********************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/vue-loader/dist??ref--3-0!./build/md-loader!./examples/docs/fr-FR/form.md?vue&type=script&lang=js ***!
  \********************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var highlight_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! highlight.js */ \"./node_modules/highlight.js/lib/index.js\");\n/* harmony import */ var highlight_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(highlight_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm-bundler.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'component-doc',\n  components: {\n    \"element-demo0\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx,\n        createTextVNode: _createTextVNode,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_input = _resolveComponent(\"el-input\");\n\n        const _component_el_form_item = _resolveComponent(\"el-form-item\");\n\n        const _component_el_option = _resolveComponent(\"el-option\");\n\n        const _component_el_select = _resolveComponent(\"el-select\");\n\n        const _component_el_date_picker = _resolveComponent(\"el-date-picker\");\n\n        const _component_el_col = _resolveComponent(\"el-col\");\n\n        const _component_el_time_picker = _resolveComponent(\"el-time-picker\");\n\n        const _component_el_switch = _resolveComponent(\"el-switch\");\n\n        const _component_el_checkbox = _resolveComponent(\"el-checkbox\");\n\n        const _component_el_checkbox_group = _resolveComponent(\"el-checkbox-group\");\n\n        const _component_el_radio = _resolveComponent(\"el-radio\");\n\n        const _component_el_radio_group = _resolveComponent(\"el-radio-group\");\n\n        const _component_el_button = _resolveComponent(\"el-button\");\n\n        const _component_el_form = _resolveComponent(\"el-form\");\n\n        return _openBlock(), _createBlock(_component_el_form, {\n          ref: \"form\",\n          model: _ctx.form,\n          \"label-width\": \"120px\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_form_item, {\n            label: \"Activity name\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_input, {\n              modelValue: _ctx.form.name,\n              \"onUpdate:modelValue\": $event => _ctx.form.name = $event\n            }, null, 8\n            /* PROPS */\n            , [\"modelValue\", \"onUpdate:modelValue\"])]),\n            _: 1\n          }), _createVNode(_component_el_form_item, {\n            label: \"Activity zone\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_select, {\n              modelValue: _ctx.form.region,\n              \"onUpdate:modelValue\": $event => _ctx.form.region = $event,\n              placeholder: \"please select your zone\"\n            }, {\n              default: _withCtx(() => [_createVNode(_component_el_option, {\n                label: \"Zone one\",\n                value: \"shanghai\"\n              }), _createVNode(_component_el_option, {\n                label: \"Zone two\",\n                value: \"beijing\"\n              })]),\n              _: 1\n            }, 8\n            /* PROPS */\n            , [\"modelValue\", \"onUpdate:modelValue\"])]),\n            _: 1\n          }), _createVNode(_component_el_form_item, {\n            label: \"Activity time\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_col, {\n              span: 11\n            }, {\n              default: _withCtx(() => [_createVNode(_component_el_date_picker, {\n                type: \"date\",\n                placeholder: \"Choisissez une date\",\n                modelValue: _ctx.form.date1,\n                \"onUpdate:modelValue\": $event => _ctx.form.date1 = $event,\n                style: {\n                  \"width\": \"100%\"\n                }\n              }, null, 8\n              /* PROPS */\n              , [\"modelValue\", \"onUpdate:modelValue\"])]),\n              _: 1\n            }), _createVNode(_component_el_col, {\n              class: \"line\",\n              span: 2\n            }, {\n              default: _withCtx(() => [_createTextVNode(\"-\")]),\n              _: 1\n            }), _createVNode(_component_el_col, {\n              span: 11\n            }, {\n              default: _withCtx(() => [_createVNode(_component_el_time_picker, {\n                placeholder: \"Pick a time\",\n                modelValue: _ctx.form.date2,\n                \"onUpdate:modelValue\": $event => _ctx.form.date2 = $event,\n                style: {\n                  \"width\": \"100%\"\n                }\n              }, null, 8\n              /* PROPS */\n              , [\"modelValue\", \"onUpdate:modelValue\"])]),\n              _: 1\n            })]),\n            _: 1\n          }), _createVNode(_component_el_form_item, {\n            label: \"Instant delivery\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_switch, {\n              modelValue: _ctx.form.delivery,\n              \"onUpdate:modelValue\": $event => _ctx.form.delivery = $event\n            }, null, 8\n            /* PROPS */\n            , [\"modelValue\", \"onUpdate:modelValue\"])]),\n            _: 1\n          }), _createVNode(_component_el_form_item, {\n            label: \"Activity type\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_checkbox_group, {\n              modelValue: _ctx.form.type,\n              \"onUpdate:modelValue\": $event => _ctx.form.type = $event\n            }, {\n              default: _withCtx(() => [_createVNode(_component_el_checkbox, {\n                label: \"Online activities\",\n                name: \"type\"\n              }), _createVNode(_component_el_checkbox, {\n                label: \"Promotion activities\",\n                name: \"type\"\n              }), _createVNode(_component_el_checkbox, {\n                label: \"Offline activities\",\n                name: \"type\"\n              }), _createVNode(_component_el_checkbox, {\n                label: \"Simple brand exposure\",\n                name: \"type\"\n              })]),\n              _: 1\n            }, 8\n            /* PROPS */\n            , [\"modelValue\", \"onUpdate:modelValue\"])]),\n            _: 1\n          }), _createVNode(_component_el_form_item, {\n            label: \"Resources\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_radio_group, {\n              modelValue: _ctx.form.resource,\n              \"onUpdate:modelValue\": $event => _ctx.form.resource = $event\n            }, {\n              default: _withCtx(() => [_createVNode(_component_el_radio, {\n                label: \"Sponsor\"\n              }), _createVNode(_component_el_radio, {\n                label: \"Venue\"\n              })]),\n              _: 1\n            }, 8\n            /* PROPS */\n            , [\"modelValue\", \"onUpdate:modelValue\"])]),\n            _: 1\n          }), _createVNode(_component_el_form_item, {\n            label: \"Activity form\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_input, {\n              type: \"textarea\",\n              modelValue: _ctx.form.desc,\n              \"onUpdate:modelValue\": $event => _ctx.form.desc = $event\n            }, null, 8\n            /* PROPS */\n            , [\"modelValue\", \"onUpdate:modelValue\"])]),\n            _: 1\n          }), _createVNode(_component_el_form_item, null, {\n            default: _withCtx(() => [_createVNode(_component_el_button, {\n              type: \"primary\",\n              onClick: _ctx.onSubmit\n            }, {\n              default: _withCtx(() => [_createTextVNode(\"Créer\")]),\n              _: 1\n            }, 8\n            /* PROPS */\n            , [\"onClick\"]), _createVNode(_component_el_button, null, {\n              default: _withCtx(() => [_createTextVNode(\"Annuler\")]),\n              _: 1\n            })]),\n            _: 1\n          })]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"model\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            form: {\n              name: '',\n              region: '',\n              date1: '',\n              date2: '',\n              delivery: false,\n              type: [],\n              resource: '',\n              desc: ''\n            }\n          };\n        },\n\n        methods: {\n          onSubmit() {\n            console.log('submit!');\n          }\n\n        }\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo1\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx,\n        createTextVNode: _createTextVNode,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_input = _resolveComponent(\"el-input\");\n\n        const _component_el_form_item = _resolveComponent(\"el-form-item\");\n\n        const _component_el_option = _resolveComponent(\"el-option\");\n\n        const _component_el_select = _resolveComponent(\"el-select\");\n\n        const _component_el_button = _resolveComponent(\"el-button\");\n\n        const _component_el_form = _resolveComponent(\"el-form\");\n\n        return _openBlock(), _createBlock(_component_el_form, {\n          inline: true,\n          model: _ctx.formInline,\n          class: \"demo-form-inline\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_form_item, {\n            label: \"Approved by\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_input, {\n              modelValue: _ctx.formInline.user,\n              \"onUpdate:modelValue\": $event => _ctx.formInline.user = $event,\n              placeholder: \"Approved by\"\n            }, null, 8\n            /* PROPS */\n            , [\"modelValue\", \"onUpdate:modelValue\"])]),\n            _: 1\n          }), _createVNode(_component_el_form_item, {\n            label: \"Activity zone\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_select, {\n              modelValue: _ctx.formInline.region,\n              \"onUpdate:modelValue\": $event => _ctx.formInline.region = $event,\n              placeholder: \"Activity zone\"\n            }, {\n              default: _withCtx(() => [_createVNode(_component_el_option, {\n                label: \"Zone one\",\n                value: \"shanghai\"\n              }), _createVNode(_component_el_option, {\n                label: \"Zone two\",\n                value: \"beijing\"\n              })]),\n              _: 1\n            }, 8\n            /* PROPS */\n            , [\"modelValue\", \"onUpdate:modelValue\"])]),\n            _: 1\n          }), _createVNode(_component_el_form_item, null, {\n            default: _withCtx(() => [_createVNode(_component_el_button, {\n              type: \"primary\",\n              onClick: _ctx.onSubmit\n            }, {\n              default: _withCtx(() => [_createTextVNode(\"Query\")]),\n              _: 1\n            }, 8\n            /* PROPS */\n            , [\"onClick\"])]),\n            _: 1\n          })]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"model\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            formInline: {\n              user: '',\n              region: ''\n            }\n          };\n        },\n\n        methods: {\n          onSubmit() {\n            console.log('submit!');\n          }\n\n        }\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo2\": function () {\n      const {\n        createTextVNode: _createTextVNode,\n        resolveComponent: _resolveComponent,\n        withCtx: _withCtx,\n        createVNode: _createVNode,\n        Fragment: _Fragment,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_radio_button = _resolveComponent(\"el-radio-button\");\n\n        const _component_el_radio_group = _resolveComponent(\"el-radio-group\");\n\n        const _component_el_input = _resolveComponent(\"el-input\");\n\n        const _component_el_form_item = _resolveComponent(\"el-form-item\");\n\n        const _component_el_form = _resolveComponent(\"el-form\");\n\n        return _openBlock(), _createBlock(_Fragment, null, [_createVNode(_component_el_radio_group, {\n          modelValue: _ctx.labelPosition,\n          \"onUpdate:modelValue\": $event => _ctx.labelPosition = $event,\n          size: \"small\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_radio_button, {\n            label: \"left\"\n          }, {\n            default: _withCtx(() => [_createTextVNode(\"Left\")]),\n            _: 1\n          }), _createVNode(_component_el_radio_button, {\n            label: \"right\"\n          }, {\n            default: _withCtx(() => [_createTextVNode(\"Right\")]),\n            _: 1\n          }), _createVNode(_component_el_radio_button, {\n            label: \"top\"\n          }, {\n            default: _withCtx(() => [_createTextVNode(\"Top\")]),\n            _: 1\n          })]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"]), _createVNode(\"div\", {\n          style: {\n            \"margin\": \"20px\"\n          }\n        }), _createVNode(_component_el_form, {\n          \"label-position\": _ctx.labelPosition,\n          \"label-width\": \"100px\",\n          model: _ctx.formLabelAlign\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_form_item, {\n            label: \"Name\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_input, {\n              modelValue: _ctx.formLabelAlign.name,\n              \"onUpdate:modelValue\": $event => _ctx.formLabelAlign.name = $event\n            }, null, 8\n            /* PROPS */\n            , [\"modelValue\", \"onUpdate:modelValue\"])]),\n            _: 1\n          }), _createVNode(_component_el_form_item, {\n            label: \"Activity zone\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_input, {\n              modelValue: _ctx.formLabelAlign.region,\n              \"onUpdate:modelValue\": $event => _ctx.formLabelAlign.region = $event\n            }, null, 8\n            /* PROPS */\n            , [\"modelValue\", \"onUpdate:modelValue\"])]),\n            _: 1\n          }), _createVNode(_component_el_form_item, {\n            label: \"Activity form\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_input, {\n              modelValue: _ctx.formLabelAlign.type,\n              \"onUpdate:modelValue\": $event => _ctx.formLabelAlign.type = $event\n            }, null, 8\n            /* PROPS */\n            , [\"modelValue\", \"onUpdate:modelValue\"])]),\n            _: 1\n          })]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"label-position\", \"model\"])], 64\n        /* STABLE_FRAGMENT */\n        );\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            labelPosition: 'right',\n            formLabelAlign: {\n              name: '',\n              region: '',\n              type: ''\n            }\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo3\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx,\n        createTextVNode: _createTextVNode,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_input = _resolveComponent(\"el-input\");\n\n        const _component_el_form_item = _resolveComponent(\"el-form-item\");\n\n        const _component_el_option = _resolveComponent(\"el-option\");\n\n        const _component_el_select = _resolveComponent(\"el-select\");\n\n        const _component_el_date_picker = _resolveComponent(\"el-date-picker\");\n\n        const _component_el_col = _resolveComponent(\"el-col\");\n\n        const _component_el_time_picker = _resolveComponent(\"el-time-picker\");\n\n        const _component_el_switch = _resolveComponent(\"el-switch\");\n\n        const _component_el_checkbox = _resolveComponent(\"el-checkbox\");\n\n        const _component_el_checkbox_group = _resolveComponent(\"el-checkbox-group\");\n\n        const _component_el_radio = _resolveComponent(\"el-radio\");\n\n        const _component_el_radio_group = _resolveComponent(\"el-radio-group\");\n\n        const _component_el_button = _resolveComponent(\"el-button\");\n\n        const _component_el_form = _resolveComponent(\"el-form\");\n\n        return _openBlock(), _createBlock(_component_el_form, {\n          model: _ctx.ruleForm,\n          rules: _ctx.rules,\n          ref: \"ruleForm\",\n          \"label-width\": \"120px\",\n          class: \"demo-ruleForm\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_form_item, {\n            label: \"Activity name\",\n            prop: \"name\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_input, {\n              modelValue: _ctx.ruleForm.name,\n              \"onUpdate:modelValue\": $event => _ctx.ruleForm.name = $event\n            }, null, 8\n            /* PROPS */\n            , [\"modelValue\", \"onUpdate:modelValue\"])]),\n            _: 1\n          }), _createVNode(_component_el_form_item, {\n            label: \"Activity zone\",\n            prop: \"region\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_select, {\n              modelValue: _ctx.ruleForm.region,\n              \"onUpdate:modelValue\": $event => _ctx.ruleForm.region = $event,\n              placeholder: \"Activity zone\"\n            }, {\n              default: _withCtx(() => [_createVNode(_component_el_option, {\n                label: \"Zone one\",\n                value: \"shanghai\"\n              }), _createVNode(_component_el_option, {\n                label: \"Zone two\",\n                value: \"beijing\"\n              })]),\n              _: 1\n            }, 8\n            /* PROPS */\n            , [\"modelValue\", \"onUpdate:modelValue\"])]),\n            _: 1\n          }), _createVNode(_component_el_form_item, {\n            label: \"Activity time\",\n            required: \"\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_col, {\n              span: 11\n            }, {\n              default: _withCtx(() => [_createVNode(_component_el_form_item, {\n                prop: \"date1\"\n              }, {\n                default: _withCtx(() => [_createVNode(_component_el_date_picker, {\n                  type: \"date\",\n                  placeholder: \"Choisissez une date\",\n                  modelValue: _ctx.ruleForm.date1,\n                  \"onUpdate:modelValue\": $event => _ctx.ruleForm.date1 = $event,\n                  style: {\n                    \"width\": \"100%\"\n                  }\n                }, null, 8\n                /* PROPS */\n                , [\"modelValue\", \"onUpdate:modelValue\"])]),\n                _: 1\n              })]),\n              _: 1\n            }), _createVNode(_component_el_col, {\n              class: \"line\",\n              span: 2\n            }, {\n              default: _withCtx(() => [_createTextVNode(\"-\")]),\n              _: 1\n            }), _createVNode(_component_el_col, {\n              span: 11\n            }, {\n              default: _withCtx(() => [_createVNode(_component_el_form_item, {\n                prop: \"date2\"\n              }, {\n                default: _withCtx(() => [_createVNode(_component_el_time_picker, {\n                  placeholder: \"Pick a time\",\n                  modelValue: _ctx.ruleForm.date2,\n                  \"onUpdate:modelValue\": $event => _ctx.ruleForm.date2 = $event,\n                  style: {\n                    \"width\": \"100%\"\n                  }\n                }, null, 8\n                /* PROPS */\n                , [\"modelValue\", \"onUpdate:modelValue\"])]),\n                _: 1\n              })]),\n              _: 1\n            })]),\n            _: 1\n          }), _createVNode(_component_el_form_item, {\n            label: \"Instant delivery\",\n            prop: \"delivery\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_switch, {\n              modelValue: _ctx.ruleForm.delivery,\n              \"onUpdate:modelValue\": $event => _ctx.ruleForm.delivery = $event\n            }, null, 8\n            /* PROPS */\n            , [\"modelValue\", \"onUpdate:modelValue\"])]),\n            _: 1\n          }), _createVNode(_component_el_form_item, {\n            label: \"Activity type\",\n            prop: \"type\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_checkbox_group, {\n              modelValue: _ctx.ruleForm.type,\n              \"onUpdate:modelValue\": $event => _ctx.ruleForm.type = $event\n            }, {\n              default: _withCtx(() => [_createVNode(_component_el_checkbox, {\n                label: \"Online activities\",\n                name: \"type\"\n              }), _createVNode(_component_el_checkbox, {\n                label: \"Promotion activities\",\n                name: \"type\"\n              }), _createVNode(_component_el_checkbox, {\n                label: \"Offline activities\",\n                name: \"type\"\n              }), _createVNode(_component_el_checkbox, {\n                label: \"Simple brand exposure\",\n                name: \"type\"\n              })]),\n              _: 1\n            }, 8\n            /* PROPS */\n            , [\"modelValue\", \"onUpdate:modelValue\"])]),\n            _: 1\n          }), _createVNode(_component_el_form_item, {\n            label: \"Resources\",\n            prop: \"resource\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_radio_group, {\n              modelValue: _ctx.ruleForm.resource,\n              \"onUpdate:modelValue\": $event => _ctx.ruleForm.resource = $event\n            }, {\n              default: _withCtx(() => [_createVNode(_component_el_radio, {\n                label: \"Sponsorship\"\n              }), _createVNode(_component_el_radio, {\n                label: \"Venue\"\n              })]),\n              _: 1\n            }, 8\n            /* PROPS */\n            , [\"modelValue\", \"onUpdate:modelValue\"])]),\n            _: 1\n          }), _createVNode(_component_el_form_item, {\n            label: \"Activity form\",\n            prop: \"desc\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_input, {\n              type: \"textarea\",\n              modelValue: _ctx.ruleForm.desc,\n              \"onUpdate:modelValue\": $event => _ctx.ruleForm.desc = $event\n            }, null, 8\n            /* PROPS */\n            , [\"modelValue\", \"onUpdate:modelValue\"])]),\n            _: 1\n          }), _createVNode(_component_el_form_item, null, {\n            default: _withCtx(() => [_createVNode(_component_el_button, {\n              type: \"primary\",\n              onClick: $event => _ctx.submitForm('ruleForm')\n            }, {\n              default: _withCtx(() => [_createTextVNode(\"Créer\")]),\n              _: 1\n            }, 8\n            /* PROPS */\n            , [\"onClick\"]), _createVNode(_component_el_button, {\n              onClick: $event => _ctx.resetForm('ruleForm')\n            }, {\n              default: _withCtx(() => [_createTextVNode(\"Réinitialiser\")]),\n              _: 1\n            }, 8\n            /* PROPS */\n            , [\"onClick\"])]),\n            _: 1\n          })]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"model\", \"rules\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            ruleForm: {\n              name: '',\n              region: '',\n              date1: '',\n              date2: '',\n              delivery: false,\n              type: [],\n              resource: '',\n              desc: ''\n            },\n            rules: {\n              name: [{\n                required: true,\n                message: 'Please input Activity name',\n                trigger: 'blur'\n              }, {\n                min: 3,\n                max: 5,\n                message: 'Length should be 3 to 5',\n                trigger: 'blur'\n              }],\n              region: [{\n                required: true,\n                message: 'Please select Activity zone',\n                trigger: 'change'\n              }],\n              date1: [{\n                type: 'date',\n                required: true,\n                message: 'Please pick a date',\n                trigger: 'change'\n              }],\n              date2: [{\n                type: 'date',\n                required: true,\n                message: 'Please pick a time',\n                trigger: 'change'\n              }],\n              type: [{\n                type: 'array',\n                required: true,\n                message: 'Please select at least one activity type',\n                trigger: 'change'\n              }],\n              resource: [{\n                required: true,\n                message: 'Please select activity resource',\n                trigger: 'change'\n              }],\n              desc: [{\n                required: true,\n                message: 'Please input activity form',\n                trigger: 'blur'\n              }]\n            }\n          };\n        },\n\n        methods: {\n          submitForm(formName) {\n            this.$refs[formName].validate(valid => {\n              if (valid) {\n                alert('submit!');\n              } else {\n                console.log('error submit!!');\n                return false;\n              }\n            });\n          },\n\n          resetForm(formName) {\n            this.$refs[formName].resetFields();\n          }\n\n        }\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo4\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx,\n        createTextVNode: _createTextVNode,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_input = _resolveComponent(\"el-input\");\n\n        const _component_el_form_item = _resolveComponent(\"el-form-item\");\n\n        const _component_el_button = _resolveComponent(\"el-button\");\n\n        const _component_el_form = _resolveComponent(\"el-form\");\n\n        return _openBlock(), _createBlock(_component_el_form, {\n          model: _ctx.ruleForm,\n          \"status-icon\": \"\",\n          rules: _ctx.rules,\n          ref: \"ruleForm\",\n          \"label-width\": \"120px\",\n          class: \"demo-ruleForm\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_form_item, {\n            label: \"Password\",\n            prop: \"pass\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_input, {\n              type: \"password\",\n              modelValue: _ctx.ruleForm.pass,\n              \"onUpdate:modelValue\": $event => _ctx.ruleForm.pass = $event,\n              autocomplete: \"off\"\n            }, null, 8\n            /* PROPS */\n            , [\"modelValue\", \"onUpdate:modelValue\"])]),\n            _: 1\n          }), _createVNode(_component_el_form_item, {\n            label: \"Confirm\",\n            prop: \"checkPass\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_input, {\n              type: \"password\",\n              modelValue: _ctx.ruleForm.checkPass,\n              \"onUpdate:modelValue\": $event => _ctx.ruleForm.checkPass = $event,\n              autocomplete: \"off\"\n            }, null, 8\n            /* PROPS */\n            , [\"modelValue\", \"onUpdate:modelValue\"])]),\n            _: 1\n          }), _createVNode(_component_el_form_item, {\n            label: \"Age\",\n            prop: \"age\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_input, {\n              modelValue: _ctx.ruleForm.age,\n              \"onUpdate:modelValue\": $event => _ctx.ruleForm.age = $event,\n              modelModifiers: {\n                number: true\n              }\n            }, null, 8\n            /* PROPS */\n            , [\"modelValue\", \"onUpdate:modelValue\"])]),\n            _: 1\n          }), _createVNode(_component_el_form_item, null, {\n            default: _withCtx(() => [_createVNode(_component_el_button, {\n              type: \"primary\",\n              onClick: $event => _ctx.submitForm('ruleForm')\n            }, {\n              default: _withCtx(() => [_createTextVNode(\"Submit\")]),\n              _: 1\n            }, 8\n            /* PROPS */\n            , [\"onClick\"]), _createVNode(_component_el_button, {\n              onClick: $event => _ctx.resetForm('ruleForm')\n            }, {\n              default: _withCtx(() => [_createTextVNode(\"Réinitialiser\")]),\n              _: 1\n            }, 8\n            /* PROPS */\n            , [\"onClick\"])]),\n            _: 1\n          })]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"model\", \"rules\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          var checkAge = (rule, value, callback) => {\n            if (!value) {\n              return callback(new Error('Veuillez entrer l\\'âge'));\n            }\n\n            setTimeout(() => {\n              if (!Number.isInteger(value)) {\n                callback(new Error('Veuillez entrer des chiffres'));\n              } else {\n                if (value < 18) {\n                  callback(new Error('L\\'âge doit être supérieur à 18 ans'));\n                } else {\n                  callback();\n                }\n              }\n            }, 1000);\n          };\n\n          var validatePass = (rule, value, callback) => {\n            if (value === '') {\n              callback(new Error('Veuillez entrer le mot de passe'));\n            } else {\n              if (this.ruleForm.checkPass !== '') {\n                this.$refs.ruleForm.validateField('checkPass');\n              }\n\n              callback();\n            }\n          };\n\n          var validatePass2 = (rule, value, callback) => {\n            if (value === '') {\n              callback(new Error('Veuillez entrer à nouveau le mot de passe'));\n            } else if (value !== this.ruleForm.pass) {\n              callback(new Error('Les deux entrées ne correspondent pas!'));\n            } else {\n              callback();\n            }\n          };\n\n          return {\n            ruleForm: {\n              pass: '',\n              checkPass: '',\n              age: ''\n            },\n            rules: {\n              pass: [{\n                validator: validatePass,\n                trigger: 'blur'\n              }],\n              checkPass: [{\n                validator: validatePass2,\n                trigger: 'blur'\n              }],\n              age: [{\n                validator: checkAge,\n                trigger: 'blur'\n              }]\n            }\n          };\n        },\n\n        methods: {\n          submitForm(formName) {\n            this.$refs[formName].validate(valid => {\n              if (valid) {\n                alert('submit!');\n              } else {\n                console.log('error submit!!');\n                return false;\n              }\n            });\n          },\n\n          resetForm(formName) {\n            this.$refs[formName].resetFields();\n          }\n\n        }\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo5\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx,\n        renderList: _renderList,\n        Fragment: _Fragment,\n        openBlock: _openBlock,\n        createBlock: _createBlock,\n        createTextVNode: _createTextVNode,\n        withModifiers: _withModifiers\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_input = _resolveComponent(\"el-input\");\n\n        const _component_el_form_item = _resolveComponent(\"el-form-item\");\n\n        const _component_el_button = _resolveComponent(\"el-button\");\n\n        const _component_el_form = _resolveComponent(\"el-form\");\n\n        return _openBlock(), _createBlock(_component_el_form, {\n          model: _ctx.dynamicValidateForm,\n          ref: \"dynamicValidateForm\",\n          \"label-width\": \"120px\",\n          class: \"demo-dynamic\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_form_item, {\n            prop: \"email\",\n            label: \"Email\",\n            rules: [{\n              required: true,\n              message: 'Veuillez entrer l\\'adresse e-mail',\n              trigger: 'blur'\n            }, {\n              type: 'email',\n              message: 'Veuillez entrer une adresse e-mail valide',\n              trigger: ['blur', 'change']\n            }]\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_input, {\n              modelValue: _ctx.dynamicValidateForm.email,\n              \"onUpdate:modelValue\": $event => _ctx.dynamicValidateForm.email = $event\n            }, null, 8\n            /* PROPS */\n            , [\"modelValue\", \"onUpdate:modelValue\"])]),\n            _: 1\n          }), (_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.dynamicValidateForm.domains, (domain, index) => {\n            return _openBlock(), _createBlock(_component_el_form_item, {\n              label: 'Domain' + index,\n              key: domain.key,\n              prop: 'domains.' + index + '.value',\n              rules: {\n                required: true,\n                message: 'domain ne peut pas être null',\n                trigger: 'blur'\n              }\n            }, {\n              default: _withCtx(() => [_createVNode(_component_el_input, {\n                modelValue: domain.value,\n                \"onUpdate:modelValue\": $event => domain.value = $event\n              }, null, 8\n              /* PROPS */\n              , [\"modelValue\", \"onUpdate:modelValue\"]), _createVNode(_component_el_button, {\n                onClick: _withModifiers($event => _ctx.removeDomain(domain), [\"prevent\"])\n              }, {\n                default: _withCtx(() => [_createTextVNode(\"Supprimer\")]),\n                _: 1\n              }, 8\n              /* PROPS */\n              , [\"onClick\"])]),\n              _: 2\n            }, 1032\n            /* PROPS, DYNAMIC_SLOTS */\n            , [\"label\", \"prop\"]);\n          }), 128\n          /* KEYED_FRAGMENT */\n          )), _createVNode(_component_el_form_item, null, {\n            default: _withCtx(() => [_createVNode(_component_el_button, {\n              type: \"primary\",\n              onClick: $event => _ctx.submitForm('dynamicValidateForm')\n            }, {\n              default: _withCtx(() => [_createTextVNode(\"Soumettre\")]),\n              _: 1\n            }, 8\n            /* PROPS */\n            , [\"onClick\"]), _createVNode(_component_el_button, {\n              onClick: _ctx.addDomain\n            }, {\n              default: _withCtx(() => [_createTextVNode(\"Nouveau domaine\")]),\n              _: 1\n            }, 8\n            /* PROPS */\n            , [\"onClick\"]), _createVNode(_component_el_button, {\n              onClick: $event => _ctx.resetForm('dynamicValidateForm')\n            }, {\n              default: _withCtx(() => [_createTextVNode(\"Réinitialiser\")]),\n              _: 1\n            }, 8\n            /* PROPS */\n            , [\"onClick\"])]),\n            _: 1\n          })]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"model\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            dynamicValidateForm: {\n              domains: [{\n                key: 1,\n                value: ''\n              }],\n              email: ''\n            }\n          };\n        },\n\n        methods: {\n          submitForm(formName) {\n            this.$refs[formName].validate(valid => {\n              if (valid) {\n                alert('submit!');\n              } else {\n                console.log('error submit!!');\n                return false;\n              }\n            });\n          },\n\n          resetForm(formName) {\n            this.$refs[formName].resetFields();\n          },\n\n          removeDomain(item) {\n            var index = this.dynamicValidateForm.domains.indexOf(item);\n\n            if (index !== -1) {\n              this.dynamicValidateForm.domains.splice(index, 1);\n            }\n          },\n\n          addDomain() {\n            this.dynamicValidateForm.domains.push({\n              key: Date.now(),\n              value: ''\n            });\n          }\n\n        }\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo6\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx,\n        createTextVNode: _createTextVNode,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_input = _resolveComponent(\"el-input\");\n\n        const _component_el_form_item = _resolveComponent(\"el-form-item\");\n\n        const _component_el_button = _resolveComponent(\"el-button\");\n\n        const _component_el_form = _resolveComponent(\"el-form\");\n\n        return _openBlock(), _createBlock(_component_el_form, {\n          model: _ctx.numberValidateForm,\n          ref: \"numberValidateForm\",\n          \"label-width\": \"100px\",\n          class: \"demo-ruleForm\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_form_item, {\n            label: \"age\",\n            prop: \"age\",\n            rules: [{\n              required: true,\n              message: 'l\\'âge est requis'\n            }, {\n              type: 'number',\n              message: 'l\\'âge doit être un nombre'\n            }]\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_input, {\n              type: \"age\",\n              modelValue: _ctx.numberValidateForm.age,\n              \"onUpdate:modelValue\": $event => _ctx.numberValidateForm.age = $event,\n              modelModifiers: {\n                number: true\n              },\n              autocomplete: \"off\"\n            }, null, 8\n            /* PROPS */\n            , [\"modelValue\", \"onUpdate:modelValue\"])]),\n            _: 1\n          }), _createVNode(_component_el_form_item, null, {\n            default: _withCtx(() => [_createVNode(_component_el_button, {\n              type: \"primary\",\n              onClick: $event => _ctx.submitForm('numberValidateForm')\n            }, {\n              default: _withCtx(() => [_createTextVNode(\"Soumettre\")]),\n              _: 1\n            }, 8\n            /* PROPS */\n            , [\"onClick\"]), _createVNode(_component_el_button, {\n              onClick: $event => _ctx.resetForm('numberValidateForm')\n            }, {\n              default: _withCtx(() => [_createTextVNode(\"Réinitialiser\")]),\n              _: 1\n            }, 8\n            /* PROPS */\n            , [\"onClick\"])]),\n            _: 1\n          })]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"model\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            numberValidateForm: {\n              age: ''\n            }\n          };\n        },\n\n        methods: {\n          submitForm(formName) {\n            this.$refs[formName].validate(valid => {\n              if (valid) {\n                alert('submit!');\n              } else {\n                console.log('error submit!!');\n                return false;\n              }\n            });\n          },\n\n          resetForm(formName) {\n            this.$refs[formName].resetFields();\n          }\n\n        }\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo7\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx,\n        createTextVNode: _createTextVNode,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_input = _resolveComponent(\"el-input\");\n\n        const _component_el_form_item = _resolveComponent(\"el-form-item\");\n\n        const _component_el_option = _resolveComponent(\"el-option\");\n\n        const _component_el_select = _resolveComponent(\"el-select\");\n\n        const _component_el_date_picker = _resolveComponent(\"el-date-picker\");\n\n        const _component_el_col = _resolveComponent(\"el-col\");\n\n        const _component_el_time_picker = _resolveComponent(\"el-time-picker\");\n\n        const _component_el_checkbox_button = _resolveComponent(\"el-checkbox-button\");\n\n        const _component_el_checkbox_group = _resolveComponent(\"el-checkbox-group\");\n\n        const _component_el_radio = _resolveComponent(\"el-radio\");\n\n        const _component_el_radio_group = _resolveComponent(\"el-radio-group\");\n\n        const _component_el_button = _resolveComponent(\"el-button\");\n\n        const _component_el_form = _resolveComponent(\"el-form\");\n\n        return _openBlock(), _createBlock(_component_el_form, {\n          ref: \"form\",\n          model: _ctx.sizeForm,\n          \"label-width\": \"120px\",\n          size: \"mini\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_form_item, {\n            label: \"Activity name\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_input, {\n              modelValue: _ctx.sizeForm.name,\n              \"onUpdate:modelValue\": $event => _ctx.sizeForm.name = $event\n            }, null, 8\n            /* PROPS */\n            , [\"modelValue\", \"onUpdate:modelValue\"])]),\n            _: 1\n          }), _createVNode(_component_el_form_item, {\n            label: \"Activity zone\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_select, {\n              modelValue: _ctx.sizeForm.region,\n              \"onUpdate:modelValue\": $event => _ctx.sizeForm.region = $event,\n              placeholder: \"veuillez sélectionner votre zone\"\n            }, {\n              default: _withCtx(() => [_createVNode(_component_el_option, {\n                label: \"Zone one\",\n                value: \"shanghai\"\n              }), _createVNode(_component_el_option, {\n                label: \"Zone two\",\n                value: \"beijing\"\n              })]),\n              _: 1\n            }, 8\n            /* PROPS */\n            , [\"modelValue\", \"onUpdate:modelValue\"])]),\n            _: 1\n          }), _createVNode(_component_el_form_item, {\n            label: \"Activity time\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_col, {\n              span: 11\n            }, {\n              default: _withCtx(() => [_createVNode(_component_el_date_picker, {\n                type: \"date\",\n                placeholder: \"Choisissez une date\",\n                modelValue: _ctx.sizeForm.date1,\n                \"onUpdate:modelValue\": $event => _ctx.sizeForm.date1 = $event,\n                style: {\n                  \"width\": \"100%\"\n                }\n              }, null, 8\n              /* PROPS */\n              , [\"modelValue\", \"onUpdate:modelValue\"])]),\n              _: 1\n            }), _createVNode(_component_el_col, {\n              class: \"line\",\n              span: 2\n            }, {\n              default: _withCtx(() => [_createTextVNode(\"-\")]),\n              _: 1\n            }), _createVNode(_component_el_col, {\n              span: 11\n            }, {\n              default: _withCtx(() => [_createVNode(_component_el_time_picker, {\n                placeholder: \"Choisissez une heure\",\n                modelValue: _ctx.sizeForm.date2,\n                \"onUpdate:modelValue\": $event => _ctx.sizeForm.date2 = $event,\n                style: {\n                  \"width\": \"100%\"\n                }\n              }, null, 8\n              /* PROPS */\n              , [\"modelValue\", \"onUpdate:modelValue\"])]),\n              _: 1\n            })]),\n            _: 1\n          }), _createVNode(_component_el_form_item, {\n            label: \"Activity type\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_checkbox_group, {\n              modelValue: _ctx.sizeForm.type,\n              \"onUpdate:modelValue\": $event => _ctx.sizeForm.type = $event\n            }, {\n              default: _withCtx(() => [_createVNode(_component_el_checkbox_button, {\n                label: \"Online activities\",\n                name: \"type\"\n              }), _createVNode(_component_el_checkbox_button, {\n                label: \"Promotion activities\",\n                name: \"type\"\n              })]),\n              _: 1\n            }, 8\n            /* PROPS */\n            , [\"modelValue\", \"onUpdate:modelValue\"])]),\n            _: 1\n          }), _createVNode(_component_el_form_item, {\n            label: \"Resources\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_radio_group, {\n              modelValue: _ctx.sizeForm.resource,\n              \"onUpdate:modelValue\": $event => _ctx.sizeForm.resource = $event,\n              size: \"medium\"\n            }, {\n              default: _withCtx(() => [_createVNode(_component_el_radio, {\n                border: \"\",\n                label: \"Sponsor\"\n              }), _createVNode(_component_el_radio, {\n                border: \"\",\n                label: \"Venue\"\n              })]),\n              _: 1\n            }, 8\n            /* PROPS */\n            , [\"modelValue\", \"onUpdate:modelValue\"])]),\n            _: 1\n          }), _createVNode(_component_el_form_item, {\n            size: \"large\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_button, {\n              type: \"primary\",\n              onClick: _ctx.onSubmit\n            }, {\n              default: _withCtx(() => [_createTextVNode(\"Créer\")]),\n              _: 1\n            }, 8\n            /* PROPS */\n            , [\"onClick\"]), _createVNode(_component_el_button, null, {\n              default: _withCtx(() => [_createTextVNode(\"Annuler\")]),\n              _: 1\n            })]),\n            _: 1\n          })]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"model\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            sizeForm: {\n              name: '',\n              region: '',\n              date1: '',\n              date2: '',\n              delivery: false,\n              type: [],\n              resource: '',\n              desc: ''\n            }\n          };\n        },\n\n        methods: {\n          onSubmit() {\n            console.log('submit!');\n          }\n\n        }\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }()\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/fr-FR/form.md?vue&type=script&lang=js\n");

/***/ }),

/***/ "./node_modules/vue-loader/dist/templateLoader.js?!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/fr-FR/form.md?vue&type=template&id=ccec254a":
/*!***************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/dist/templateLoader.js??ref--5!./node_modules/vue-loader/dist??ref--3-0!./build/md-loader!./examples/docs/fr-FR/form.md?vue&type=template&id=ccec254a ***!
  \***************************************************************************************************************************************************************************************/
/*! exports provided: render */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return render; });\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm-bundler.js\");\n\n\nconst _hoisted_1 = { class: \"content element-doc\" }\nconst _hoisted_2 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createStaticVNode\"])(\"<h2 id=\\\"form\\\"><a class=\\\"header-anchor\\\" href=\\\"#form\\\">¶</a> Form</h2><p>Un formulaire est constitué des éléments <code>input</code>, <code>radio</code>, <code>select</code>, <code>checkbox</code>, etc. Il sert principalement à collecter, vérifier et soumettre des données.</p><h3 id=\\\"formulaire-de-base\\\"><a class=\\\"header-anchor\\\" href=\\\"#formulaire-de-base\\\">¶</a> Formulaire de base</h3><p>Il peut contenir toutes sortes de champs tels que <code>input</code>, <code>select</code>, <code>radio</code> et <code>checkbox</code>.</p>\", 4)\nconst _hoisted_6 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Dans chaque composant \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"form\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\", il vous faudra utiliser la balise \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"form-item\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" pour servir de conteneur à chaque champ.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_7 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<el-form ref=\\\"form\\\" :model=\\\"form\\\" label-width=\\\"120px\\\">\\n  <el-form-item label=\\\"Activity name\\\">\\n    <el-input v-model=\\\"form.name\\\"></el-input>\\n  </el-form-item>\\n  <el-form-item label=\\\"Activity zone\\\">\\n    <el-select v-model=\\\"form.region\\\" placeholder=\\\"please select your zone\\\">\\n      <el-option label=\\\"Zone one\\\" value=\\\"shanghai\\\"></el-option>\\n      <el-option label=\\\"Zone two\\\" value=\\\"beijing\\\"></el-option>\\n    </el-select>\\n  </el-form-item>\\n  <el-form-item label=\\\"Activity time\\\">\\n    <el-col :span=\\\"11\\\">\\n      <el-date-picker type=\\\"date\\\" placeholder=\\\"Choisissez une date\\\" v-model=\\\"form.date1\\\" style=\\\"width: 100%;\\\"></el-date-picker>\\n    </el-col>\\n    <el-col class=\\\"line\\\" :span=\\\"2\\\">-</el-col>\\n    <el-col :span=\\\"11\\\">\\n      <el-time-picker placeholder=\\\"Pick a time\\\" v-model=\\\"form.date2\\\" style=\\\"width: 100%;\\\"></el-time-picker>\\n    </el-col>\\n  </el-form-item>\\n  <el-form-item label=\\\"Instant delivery\\\">\\n    <el-switch v-model=\\\"form.delivery\\\"></el-switch>\\n  </el-form-item>\\n  <el-form-item label=\\\"Activity type\\\">\\n    <el-checkbox-group v-model=\\\"form.type\\\">\\n      <el-checkbox label=\\\"Online activities\\\" name=\\\"type\\\"></el-checkbox>\\n      <el-checkbox label=\\\"Promotion activities\\\" name=\\\"type\\\"></el-checkbox>\\n      <el-checkbox label=\\\"Offline activities\\\" name=\\\"type\\\"></el-checkbox>\\n      <el-checkbox label=\\\"Simple brand exposure\\\" name=\\\"type\\\"></el-checkbox>\\n    </el-checkbox-group>\\n  </el-form-item>\\n  <el-form-item label=\\\"Resources\\\">\\n    <el-radio-group v-model=\\\"form.resource\\\">\\n      <el-radio label=\\\"Sponsor\\\"></el-radio>\\n      <el-radio label=\\\"Venue\\\"></el-radio>\\n    </el-radio-group>\\n  </el-form-item>\\n  <el-form-item label=\\\"Activity form\\\">\\n    <el-input type=\\\"textarea\\\" v-model=\\\"form.desc\\\"></el-input>\\n  </el-form-item>\\n  <el-form-item>\\n    <el-button type=\\\"primary\\\" @click=\\\"onSubmit\\\">Créer</el-button>\\n    <el-button>Annuler</el-button>\\n  </el-form-item>\\n</el-form>\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        form: {\\n          name: '',\\n          region: '',\\n          date1: '',\\n          date2: '',\\n          delivery: false,\\n          type: [],\\n          resource: '',\\n          desc: ''\\n        }\\n      }\\n    },\\n    methods: {\\n      onSubmit() {\\n        console.log('submit!');\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_8 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createStaticVNode\"])(\"<div class=\\\"tip\\\"><p><a href=\\\"https://www.w3.org/MarkUp/html-spec/html-spec_8.html#SEC8.2\\\">W3C</a> stipule que</p><blockquote><p><i>Lorsqu&#39;il n&#39;y a qu&#39;un seul champ de type texte dans un formulaire, le navigateur devrait accepter la pression de la touche Entrée sur ce champ comme méthode de soumission du formulaire</i></p></blockquote><p>Pour éviter ce comportement, vous pouvez ajouter <code>@submit.native.prevent</code> dans <code>&lt;el-form&gt;</code>.</p></div><h3 id=\\\"formulaire-horizontal\\\"><a class=\\\"header-anchor\\\" href=\\\"#formulaire-horizontal\\\">¶</a> Formulaire horizontal</h3><p>Lorsque l&#39;espace vertical est limité et que le formulaire est relativement simple, vous pouvez le placer sur une seule ligne.</p>\", 3)\nconst _hoisted_11 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Mettez l'attribut \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"inline\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" à \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"true\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" et le formulaire sera en une seul ligne.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_12 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<el-form :inline=\\\"true\\\" :model=\\\"formInline\\\" class=\\\"demo-form-inline\\\">\\n  <el-form-item label=\\\"Approved by\\\">\\n    <el-input v-model=\\\"formInline.user\\\" placeholder=\\\"Approved by\\\"></el-input>\\n  </el-form-item>\\n  <el-form-item label=\\\"Activity zone\\\">\\n    <el-select v-model=\\\"formInline.region\\\" placeholder=\\\"Activity zone\\\">\\n      <el-option label=\\\"Zone one\\\" value=\\\"shanghai\\\"></el-option>\\n      <el-option label=\\\"Zone two\\\" value=\\\"beijing\\\"></el-option>\\n    </el-select>\\n  </el-form-item>\\n  <el-form-item>\\n    <el-button type=\\\"primary\\\" @click=\\\"onSubmit\\\">Query</el-button>\\n  </el-form-item>\\n</el-form>\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        formInline: {\\n          user: '',\\n          region: ''\\n        }\\n      }\\n    },\\n    methods: {\\n      onSubmit() {\\n        console.log('submit!');\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_13 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"alignement\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#alignement\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Alignement\")\n], -1 /* HOISTED */)\nconst _hoisted_14 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Suivant votre design, il y a différents moyens d'aligner vos labels.\", -1 /* HOISTED */)\nconst _hoisted_15 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"L'attribut \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"label-position\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" permet de régler l'alignement, il peut être à \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"top\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" ou \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"left\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\". Quand il est à \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"top\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\", les labels sont placés au-dessus des champs.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_16 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<el-radio-group v-model=\\\"labelPosition\\\" size=\\\"small\\\">\\n  <el-radio-button label=\\\"left\\\">Left</el-radio-button>\\n  <el-radio-button label=\\\"right\\\">Right</el-radio-button>\\n  <el-radio-button label=\\\"top\\\">Top</el-radio-button>\\n</el-radio-group>\\n<div style=\\\"margin: 20px;\\\"></div>\\n<el-form :label-position=\\\"labelPosition\\\" label-width=\\\"100px\\\" :model=\\\"formLabelAlign\\\">\\n  <el-form-item label=\\\"Name\\\">\\n    <el-input v-model=\\\"formLabelAlign.name\\\"></el-input>\\n  </el-form-item>\\n  <el-form-item label=\\\"Activity zone\\\">\\n    <el-input v-model=\\\"formLabelAlign.region\\\"></el-input>\\n  </el-form-item>\\n  <el-form-item label=\\\"Activity form\\\">\\n    <el-input v-model=\\\"formLabelAlign.type\\\"></el-input>\\n  </el-form-item>\\n</el-form>\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        labelPosition: 'right',\\n        formLabelAlign: {\\n          name: '',\\n          region: '',\\n          type: ''\\n        }\\n      };\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_17 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"validation\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#validation\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Validation\")\n], -1 /* HOISTED */)\nconst _hoisted_18 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Le composant Form vous permet d'effectuer des vérifications, afin de détecter et corriger les erreurs facilement.\", -1 /* HOISTED */)\nconst _hoisted_19 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Ajoutez l'attribut \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"rules\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" au composant \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"Form\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\", passez les règles de validation, et configurez l'attribut \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"prop\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" de \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"Form-Item\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" pour ajouter la clé de la règle correspondante au champ. Plus d'informations ici: \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", { href: \"https://github.com/yiminghe/async-validator\" }, \"async-validator\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\".\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_20 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<el-form :model=\\\"ruleForm\\\" :rules=\\\"rules\\\" ref=\\\"ruleForm\\\" label-width=\\\"120px\\\" class=\\\"demo-ruleForm\\\">\\n  <el-form-item label=\\\"Activity name\\\" prop=\\\"name\\\">\\n    <el-input v-model=\\\"ruleForm.name\\\"></el-input>\\n  </el-form-item>\\n  <el-form-item label=\\\"Activity zone\\\" prop=\\\"region\\\">\\n    <el-select v-model=\\\"ruleForm.region\\\" placeholder=\\\"Activity zone\\\">\\n      <el-option label=\\\"Zone one\\\" value=\\\"shanghai\\\"></el-option>\\n      <el-option label=\\\"Zone two\\\" value=\\\"beijing\\\"></el-option>\\n    </el-select>\\n  </el-form-item>\\n  <el-form-item label=\\\"Activity time\\\" required>\\n    <el-col :span=\\\"11\\\">\\n      <el-form-item prop=\\\"date1\\\">\\n        <el-date-picker type=\\\"date\\\" placeholder=\\\"Choisissez une date\\\" v-model=\\\"ruleForm.date1\\\" style=\\\"width: 100%;\\\"></el-date-picker>\\n      </el-form-item>\\n    </el-col>\\n    <el-col class=\\\"line\\\" :span=\\\"2\\\">-</el-col>\\n    <el-col :span=\\\"11\\\">\\n      <el-form-item prop=\\\"date2\\\">\\n        <el-time-picker placeholder=\\\"Pick a time\\\" v-model=\\\"ruleForm.date2\\\" style=\\\"width: 100%;\\\"></el-time-picker>\\n      </el-form-item>\\n    </el-col>\\n  </el-form-item>\\n  <el-form-item label=\\\"Instant delivery\\\" prop=\\\"delivery\\\">\\n    <el-switch v-model=\\\"ruleForm.delivery\\\"></el-switch>\\n  </el-form-item>\\n  <el-form-item label=\\\"Activity type\\\" prop=\\\"type\\\">\\n    <el-checkbox-group v-model=\\\"ruleForm.type\\\">\\n      <el-checkbox label=\\\"Online activities\\\" name=\\\"type\\\"></el-checkbox>\\n      <el-checkbox label=\\\"Promotion activities\\\" name=\\\"type\\\"></el-checkbox>\\n      <el-checkbox label=\\\"Offline activities\\\" name=\\\"type\\\"></el-checkbox>\\n      <el-checkbox label=\\\"Simple brand exposure\\\" name=\\\"type\\\"></el-checkbox>\\n    </el-checkbox-group>\\n  </el-form-item>\\n  <el-form-item label=\\\"Resources\\\" prop=\\\"resource\\\">\\n    <el-radio-group v-model=\\\"ruleForm.resource\\\">\\n      <el-radio label=\\\"Sponsorship\\\"></el-radio>\\n      <el-radio label=\\\"Venue\\\"></el-radio>\\n    </el-radio-group>\\n  </el-form-item>\\n  <el-form-item label=\\\"Activity form\\\" prop=\\\"desc\\\">\\n    <el-input type=\\\"textarea\\\" v-model=\\\"ruleForm.desc\\\"></el-input>\\n  </el-form-item>\\n  <el-form-item>\\n    <el-button type=\\\"primary\\\" @click=\\\"submitForm('ruleForm')\\\">Créer</el-button>\\n    <el-button @click=\\\"resetForm('ruleForm')\\\">Réinitialiser</el-button>\\n  </el-form-item>\\n</el-form>\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        ruleForm: {\\n          name: '',\\n          region: '',\\n          date1: '',\\n          date2: '',\\n          delivery: false,\\n          type: [],\\n          resource: '',\\n          desc: ''\\n        },\\n        rules: {\\n          name: [\\n            { required: true, message: 'Please input Activity name', trigger: 'blur' },\\n            { min: 3, max: 5, message: 'Length should be 3 to 5', trigger: 'blur' }\\n          ],\\n          region: [\\n            { required: true, message: 'Please select Activity zone', trigger: 'change' }\\n          ],\\n          date1: [\\n            { type: 'date', required: true, message: 'Please pick a date', trigger: 'change' }\\n          ],\\n          date2: [\\n            { type: 'date', required: true, message: 'Please pick a time', trigger: 'change' }\\n          ],\\n          type: [\\n            { type: 'array', required: true, message: 'Please select at least one activity type', trigger: 'change' }\\n          ],\\n          resource: [\\n            { required: true, message: 'Please select activity resource', trigger: 'change' }\\n          ],\\n          desc: [\\n            { required: true, message: 'Please input activity form', trigger: 'blur' }\\n          ]\\n        }\\n      };\\n    },\\n    methods: {\\n      submitForm(formName) {\\n        this.$refs[formName].validate((valid) => {\\n          if (valid) {\\n            alert('submit!');\\n          } else {\\n            console.log('error submit!!');\\n            return false;\\n          }\\n        });\\n      },\\n      resetForm(formName) {\\n        this.$refs[formName].resetFields();\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_21 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"validations-personnalisees\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#validations-personnalisees\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Validations personnalisées\")\n], -1 /* HOISTED */)\nconst _hoisted_22 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Cet exemple montre comment vous pouvez personnaliser vos règles de validation pour effectuer une identification à deux facteurs.\", -1 /* HOISTED */)\nconst _hoisted_23 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Ici, nous utilisons \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"status-icon\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" pour afficher le résultat de la validation sous forme d'icône.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_24 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<el-form :model=\\\"ruleForm\\\" status-icon :rules=\\\"rules\\\" ref=\\\"ruleForm\\\" label-width=\\\"120px\\\" class=\\\"demo-ruleForm\\\">\\n  <el-form-item label=\\\"Password\\\" prop=\\\"pass\\\">\\n    <el-input type=\\\"password\\\" v-model=\\\"ruleForm.pass\\\" autocomplete=\\\"off\\\"></el-input>\\n  </el-form-item>\\n  <el-form-item label=\\\"Confirm\\\" prop=\\\"checkPass\\\">\\n    <el-input type=\\\"password\\\" v-model=\\\"ruleForm.checkPass\\\" autocomplete=\\\"off\\\"></el-input>\\n  </el-form-item>\\n  <el-form-item label=\\\"Age\\\" prop=\\\"age\\\">\\n    <el-input v-model.number=\\\"ruleForm.age\\\"></el-input>\\n  </el-form-item>\\n  <el-form-item>\\n    <el-button type=\\\"primary\\\" @click=\\\"submitForm('ruleForm')\\\">Submit</el-button>\\n    <el-button @click=\\\"resetForm('ruleForm')\\\">Réinitialiser</el-button>\\n  </el-form-item>\\n</el-form>\\n<script>\\n  export default {\\n    data() {\\n      var checkAge = (rule, value, callback) => {\\n        if (!value) {\\n          return callback(new Error('Veuillez entrer l\\\\'âge'));\\n        }\\n        setTimeout(() => {\\n          if (!Number.isInteger(value)) {\\n            callback(new Error('Veuillez entrer des chiffres'));\\n          } else {\\n            if (value < 18) {\\n              callback(new Error('L\\\\'âge doit être supérieur à 18 ans'));\\n            } else {\\n              callback();\\n            }\\n          }\\n        }, 1000);\\n      };\\n      var validatePass = (rule, value, callback) => {\\n        if (value === '') {\\n          callback(new Error('Veuillez entrer le mot de passe'));\\n        } else {\\n          if (this.ruleForm.checkPass !== '') {\\n            this.$refs.ruleForm.validateField('checkPass');\\n          }\\n          callback();\\n        }\\n      };\\n      var validatePass2 = (rule, value, callback) => {\\n        if (value === '') {\\n          callback(new Error('Veuillez entrer à nouveau le mot de passe'));\\n        } else if (value !== this.ruleForm.pass) {\\n          callback(new Error('Les deux entrées ne correspondent pas!'));\\n        } else {\\n          callback();\\n        }\\n      };\\n      return {\\n        ruleForm: {\\n          pass: '',\\n          checkPass: '',\\n          age: ''\\n        },\\n        rules: {\\n          pass: [\\n            { validator: validatePass, trigger: 'blur' }\\n          ],\\n          checkPass: [\\n            { validator: validatePass2, trigger: 'blur' }\\n          ],\\n          age: [\\n            { validator: checkAge, trigger: 'blur' }\\n          ]\\n        }\\n      };\\n    },\\n    methods: {\\n      submitForm(formName) {\\n        this.$refs[formName].validate((valid) => {\\n          if (valid) {\\n            alert('submit!');\\n          } else {\\n            console.log('error submit!!');\\n            return false;\\n          }\\n        });\\n      },\\n      resetForm(formName) {\\n        this.$refs[formName].resetFields();\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_25 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", { class: \"tip\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Les callback de validations personnalisées doivent être appelées. Un usage plus avancé se trouve ici: \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", { href: \"https://github.com/yiminghe/async-validator\" }, \"async-validator\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\".\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_26 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"ajouter-ou-supprimer-des-champs-dynamiquement\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#ajouter-ou-supprimer-des-champs-dynamiquement\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Ajouter ou supprimer des champs dynamiquement\")\n], -1 /* HOISTED */)\nconst _hoisted_27 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"En plus de pouvoir passer toutes les règles de validation en une seule fois au formulaire, vous pouvez aussi ajouter ou supprimer des règles sur un seul champ de manière dynamique.\")\n], -1 /* HOISTED */)\nconst _hoisted_28 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<el-form :model=\\\"dynamicValidateForm\\\" ref=\\\"dynamicValidateForm\\\" label-width=\\\"120px\\\" class=\\\"demo-dynamic\\\">\\n  <el-form-item\\n    prop=\\\"email\\\"\\n    label=\\\"Email\\\"\\n    :rules=\\\"[\\n      { required: true, message: 'Veuillez entrer l\\\\'adresse e-mail', trigger: 'blur' },\\n      { type: 'email', message: 'Veuillez entrer une adresse e-mail valide', trigger: ['blur', 'change'] }\\n    ]\\\"\\n  >\\n    <el-input v-model=\\\"dynamicValidateForm.email\\\"></el-input>\\n  </el-form-item>\\n  <el-form-item\\n    v-for=\\\"(domain, index) in dynamicValidateForm.domains\\\"\\n    :label=\\\"'Domain' + index\\\"\\n    :key=\\\"domain.key\\\"\\n    :prop=\\\"'domains.' + index + '.value'\\\"\\n    :rules=\\\"{\\n      required: true, message: 'domain ne peut pas être null', trigger: 'blur'\\n    }\\\"\\n  >\\n    <el-input v-model=\\\"domain.value\\\"></el-input><el-button @click.prevent=\\\"removeDomain(domain)\\\">Supprimer</el-button>\\n  </el-form-item>\\n  <el-form-item>\\n    <el-button type=\\\"primary\\\" @click=\\\"submitForm('dynamicValidateForm')\\\">Soumettre</el-button>\\n    <el-button @click=\\\"addDomain\\\">Nouveau domaine</el-button>\\n    <el-button @click=\\\"resetForm('dynamicValidateForm')\\\">Réinitialiser</el-button>\\n  </el-form-item>\\n</el-form>\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        dynamicValidateForm: {\\n          domains: [{\\n            key: 1,\\n            value: ''\\n          }],\\n          email: ''\\n        }\\n      };\\n    },\\n    methods: {\\n      submitForm(formName) {\\n        this.$refs[formName].validate((valid) => {\\n          if (valid) {\\n            alert('submit!');\\n          } else {\\n            console.log('error submit!!');\\n            return false;\\n          }\\n        });\\n      },\\n      resetForm(formName) {\\n        this.$refs[formName].resetFields();\\n      },\\n      removeDomain(item) {\\n        var index = this.dynamicValidateForm.domains.indexOf(item);\\n        if (index !== -1) {\\n          this.dynamicValidateForm.domains.splice(index, 1);\\n        }\\n      },\\n      addDomain() {\\n        this.dynamicValidateForm.domains.push({\\n          key: Date.now(),\\n          value: ''\\n        });\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_29 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"validation-des-nombres\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#validation-des-nombres\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Validation des nombres\")\n], -1 /* HOISTED */)\nconst _hoisted_30 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Pour valider les nombres correctement, il vous faudra ajouter le modificateur \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \".number\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" à l'attribut \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"v-model\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\". Il est utilisé par Vuejs pour transformer les valeurs en nombres .\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_31 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<el-form :model=\\\"numberValidateForm\\\" ref=\\\"numberValidateForm\\\" label-width=\\\"100px\\\" class=\\\"demo-ruleForm\\\">\\n  <el-form-item\\n    label=\\\"age\\\"\\n    prop=\\\"age\\\"\\n    :rules=\\\"[\\n      { required: true, message: 'l\\\\'âge est requis'},\\n      { type: 'number', message: 'l\\\\'âge doit être un nombre'}\\n    ]\\\"\\n  >\\n    <el-input type=\\\"age\\\" v-model.number=\\\"numberValidateForm.age\\\" autocomplete=\\\"off\\\"></el-input>\\n  </el-form-item>\\n  <el-form-item>\\n    <el-button type=\\\"primary\\\" @click=\\\"submitForm('numberValidateForm')\\\">Soumettre</el-button>\\n    <el-button @click=\\\"resetForm('numberValidateForm')\\\">Réinitialiser</el-button>\\n  </el-form-item>\\n</el-form>\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        numberValidateForm: {\\n          age: ''\\n        }\\n      };\\n    },\\n    methods: {\\n      submitForm(formName) {\\n        this.$refs[formName].validate((valid) => {\\n          if (valid) {\\n            alert('submit!');\\n          } else {\\n            console.log('error submit!!');\\n            return false;\\n          }\\n        });\\n      },\\n      resetForm(formName) {\\n        this.$refs[formName].resetFields();\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_32 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createStaticVNode\"])(\"<div class=\\\"tip\\\"><p>Lorsqu&#39;un <code>el-form-item</code> est imbriqué dans un autre <code>el-form-item</code>, la largeur de son label sera <code>0</code>. Utilisez <code>label-width</code> sur ce <code>el-form-item</code> si besoin.</p></div><h3 id=\\\"taille\\\"><a class=\\\"header-anchor\\\" href=\\\"#taille\\\">¶</a> Taille</h3><p>Tout les composants d&#39;un formulaire héritent leur attribut <code>size</code> de ce formulaire. Il est aussi possible de l&#39;utiliser individuellement sur chaque FormItem.</p>\", 3)\nconst _hoisted_35 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Vous pouvez régler le \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"size\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" de chaque item si vous ne souhaitez pas qu'il hérite de son parent.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_36 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<el-form ref=\\\"form\\\" :model=\\\"sizeForm\\\" label-width=\\\"120px\\\" size=\\\"mini\\\">\\n  <el-form-item label=\\\"Activity name\\\">\\n    <el-input v-model=\\\"sizeForm.name\\\"></el-input>\\n  </el-form-item>\\n  <el-form-item label=\\\"Activity zone\\\">\\n    <el-select v-model=\\\"sizeForm.region\\\" placeholder=\\\"veuillez sélectionner votre zone\\\">\\n      <el-option label=\\\"Zone one\\\" value=\\\"shanghai\\\"></el-option>\\n      <el-option label=\\\"Zone two\\\" value=\\\"beijing\\\"></el-option>\\n    </el-select>\\n  </el-form-item>\\n  <el-form-item label=\\\"Activity time\\\">\\n    <el-col :span=\\\"11\\\">\\n      <el-date-picker type=\\\"date\\\" placeholder=\\\"Choisissez une date\\\" v-model=\\\"sizeForm.date1\\\" style=\\\"width: 100%;\\\"></el-date-picker>\\n    </el-col>\\n    <el-col class=\\\"line\\\" :span=\\\"2\\\">-</el-col>\\n    <el-col :span=\\\"11\\\">\\n      <el-time-picker placeholder=\\\"Choisissez une heure\\\" v-model=\\\"sizeForm.date2\\\" style=\\\"width: 100%;\\\"></el-time-picker>\\n    </el-col>\\n  </el-form-item>\\n  <el-form-item label=\\\"Activity type\\\">\\n    <el-checkbox-group v-model=\\\"sizeForm.type\\\">\\n      <el-checkbox-button label=\\\"Online activities\\\" name=\\\"type\\\"></el-checkbox-button>\\n      <el-checkbox-button label=\\\"Promotion activities\\\" name=\\\"type\\\"></el-checkbox-button>\\n    </el-checkbox-group>\\n  </el-form-item>\\n  <el-form-item label=\\\"Resources\\\">\\n    <el-radio-group v-model=\\\"sizeForm.resource\\\" size=\\\"medium\\\">\\n      <el-radio border label=\\\"Sponsor\\\"></el-radio>\\n      <el-radio border label=\\\"Venue\\\"></el-radio>\\n    </el-radio-group>\\n  </el-form-item>\\n  <el-form-item size=\\\"large\\\">\\n    <el-button type=\\\"primary\\\" @click=\\\"onSubmit\\\">Créer</el-button>\\n    <el-button>Annuler</el-button>\\n  </el-form-item>\\n</el-form>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        sizeForm: {\\n          name: '',\\n          region: '',\\n          date1: '',\\n          date2: '',\\n          delivery: false,\\n          type: [],\\n          resource: '',\\n          desc: ''\\n        }\\n      };\\n    },\\n    methods: {\\n      onSubmit() {\\n        console.log('submit!');\\n      }\\n    }\\n  };\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_37 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createStaticVNode\"])(\"<h3 id=\\\"attributs-de-form\\\"><a class=\\\"header-anchor\\\" href=\\\"#attributs-de-form\\\">¶</a> Attributs de Form</h3><table><thead><tr><th>Attribut</th><th>Description</th><th>Type</th><th>Valeurs acceptées</th><th>Défaut</th></tr></thead><tbody><tr><td>model</td><td>Données du formulaire.</td><td>object</td><td>—</td><td>—</td></tr><tr><td>rules</td><td>Règles de validation du formulaire.</td><td>object</td><td>—</td><td>—</td></tr><tr><td>inline</td><td>Si le formulaire est horizontal.</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>label-position</td><td>Position des labels. Si &#39;left&#39; ou &#39;right&#39;, <code>label-width</code> est aussi requis.</td><td>string</td><td>left / right / top</td><td>right</td></tr><tr><td>label-width</td><td>Largeur des labels, tout les enfants directs hériteront de cette valeur. La largeur <code>auto</code> est supportée.</td><td>string</td><td>—</td><td>—</td></tr><tr><td>label-suffix</td><td>Suffixe de labels.</td><td>string</td><td>—</td><td>—</td></tr><tr><td>hide-required-asterisk</td><td>Si les champs obligatoires doivent avoir une astérisque rouge (étoile) à coté de leurs labels.</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>show-message</td><td>Si le message d&#39;erreur doit apparaître.</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>inline-message</td><td>Si le message d&#39;erreur doit apparaître en ligne avec son champ.</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>status-icon</td><td>Si une icône indiquant le résultat de validation doit apparaître.</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>validate-on-rule-change</td><td>Si la validation doit se déclencher lorsque <code>rules</code> est modifié.</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>size</td><td>Contrôle la taille des champs du formulaire.</td><td>string</td><td>medium / small / mini</td><td>—</td></tr><tr><td>disabled</td><td>Si tout les champs du formulaire doivent être désactivés. Si <code>true</code>, il ne peut pas être modifié par l&#39;attribut <code>disabled</code> des enfants.</td><td>boolean</td><td>—</td><td>false</td></tr></tbody></table><h3 id=\\\"methodes-de-form\\\"><a class=\\\"header-anchor\\\" href=\\\"#methodes-de-form\\\">¶</a> Méthodes de Form</h3><table><thead><tr><th>Méthode</th><th>Description</th><th>Paramètres</th></tr></thead><tbody><tr><td>validate</td><td>Valide le formulaire. Prends une callback en paramètre. Après la validation, la callback est exécutée avec deux paramètres: un boolean indiquant si la validation est bonne, et un objet contenant tout les champs qui ont échoués. Retourne une promesse si aucune callback n&#39;est passée.</td><td>Function(callback: Function(boolean, object))</td></tr><tr><td>validateField</td><td>Valide un ou plusieurs champs du formulaire.</td><td>Function(props: string | array, callback: Function(errorMessage: string))</td></tr><tr><td>resetFields</td><td>Efface tout les champs et les résultats de validation.</td><td>—</td></tr><tr><td>clearValidate</td><td>Efface les messages de validation de certains champs. Le paramètre est le nom du champ ou une liste des champs concernés. S&#39;il est omis, tout les champs seront concernés.</td><td>Function(props: string | array)</td></tr></tbody></table><h3 id=\\\"evennements-de-form\\\"><a class=\\\"header-anchor\\\" href=\\\"#evennements-de-form\\\">¶</a> Évènnements de Form</h3><table><thead><tr><th>Nom</th><th>Description</th><th>Paramètres</th></tr></thead><tbody><tr><td>validate</td><td>Se déclenche après la validation d&#39;un champ.</td><td>Nom du champs qui a été validé, si la validation est bonne et le message d&#39;erreur sinon.</td></tr></tbody></table><h3 id=\\\"attributs-de-formitem\\\"><a class=\\\"header-anchor\\\" href=\\\"#attributs-de-formitem\\\">¶</a> Attributs de FormItem</h3><table><thead><tr><th>Attribut</th><th>Description</th><th>Type</th><th>Valeurs acceptées</th><th>Défaut</th></tr></thead><tbody><tr><td>prop</td><td>Une des clés de <code>model</code>. Utilisés par les méthodes validate et resetFields. Requis.</td><td>string</td><td>Clés du model passé à <code>form</code>.</td><td></td></tr><tr><td>label</td><td>Le label.</td><td>string</td><td>—</td><td>—</td></tr><tr><td>label-width</td><td>Largeur du label, e.g. &#39;50px&#39;. La largeur <code>auto</code> est supportée.</td><td>string</td><td>—</td><td>—</td></tr><tr><td>required</td><td>Si le champ est requis ou non. Si omis, sera déterminé par les règles de validation.</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>rules</td><td>Règles de validation du formulaire.</td><td>object</td><td>—</td><td>—</td></tr><tr><td>error</td><td>Message d&#39;erreur du champ. S&#39;il est modifié, le champ l&#39;affichera immédiatement.</td><td>string</td><td>—</td><td>—</td></tr><tr><td>show-message</td><td>Si le message d&#39;erreur doit apparaître.</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>inline-message</td><td>Si le message d&#39;erreur doit être en ligne avec le champ.</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>size</td><td>Contrôle la taille du FormItem.</td><td>string</td><td>medium / small / mini</td><td>-</td></tr></tbody></table><h3 id=\\\"slot-de-form-item\\\"><a class=\\\"header-anchor\\\" href=\\\"#slot-de-form-item\\\">¶</a> Slot de Form-Item</h3><table><thead><tr><th>Nom</th><th>Description</th></tr></thead><tbody><tr><td>—</td><td>Contenu de Form Item.</td></tr><tr><td>label</td><td>Contenu du label.</td></tr></tbody></table><h3 id=\\\"slot-avec-portee-de-form-item\\\"><a class=\\\"header-anchor\\\" href=\\\"#slot-avec-portee-de-form-item\\\">¶</a> Slot avec portée de Form-Item</h3><table><thead><tr><th>Nom</th><th>Description</th></tr></thead><tbody><tr><td>error</td><td>Contenu personnalisé pour les messages de validation. Le paramètre du scope est { error }.</td></tr></tbody></table><h3 id=\\\"methodes-de-form-item\\\"><a class=\\\"header-anchor\\\" href=\\\"#methodes-de-form-item\\\">¶</a> Méthodes de Form-Item</h3><table><thead><tr><th>Méthode</th><th>Description</th><th>Paramètres</th></tr></thead><tbody><tr><td>resetField</td><td>Efface le champ et les résultats de validation.</td><td>—</td></tr><tr><td>clearValidate</td><td>Efface le status de validation du champ.</td><td>-</td></tr></tbody></table>\", 14)\n\nfunction render(_ctx, _cache) {\n  const _component_element_demo0 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo0\")\n  const _component_demo_block = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"demo-block\")\n  const _component_element_demo1 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo1\")\n  const _component_element_demo2 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo2\")\n  const _component_element_demo3 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo3\")\n  const _component_element_demo4 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo4\")\n  const _component_element_demo5 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo5\")\n  const _component_element_demo6 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo6\")\n  const _component_element_demo7 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo7\")\n\n  return (Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"openBlock\"])(), Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createBlock\"])(\"section\", _hoisted_1, [\n    _hoisted_2,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo0)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_7\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_6\n      ]),\n      _: 1\n    }),\n    _hoisted_8,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo1)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_12\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_11\n      ]),\n      _: 1\n    }),\n    _hoisted_13,\n    _hoisted_14,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo2)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_16\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_15\n      ]),\n      _: 1\n    }),\n    _hoisted_17,\n    _hoisted_18,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo3)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_20\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_19\n      ]),\n      _: 1\n    }),\n    _hoisted_21,\n    _hoisted_22,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo4)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_24\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_23\n      ]),\n      _: 1\n    }),\n    _hoisted_25,\n    _hoisted_26,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo5)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_28\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_27\n      ]),\n      _: 1\n    }),\n    _hoisted_29,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo6)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_31\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_30\n      ]),\n      _: 1\n    }),\n    _hoisted_32,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo7)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_36\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_35\n      ]),\n      _: 1\n    }),\n    _hoisted_37\n  ]))\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vue-loader/dist/templateLoader.js?!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/fr-FR/form.md?vue&type=template&id=ccec254a\n");

/***/ })

}]);