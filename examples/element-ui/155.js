(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[155],{

/***/ "./examples/docs/es/tree.md":
/*!**********************************!*\
  !*** ./examples/docs/es/tree.md ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _tree_md_vue_type_template_id_be4b9bec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tree.md?vue&type=template&id=be4b9bec */ \"./examples/docs/es/tree.md?vue&type=template&id=be4b9bec\");\n/* harmony import */ var _tree_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tree.md?vue&type=script&lang=js */ \"./examples/docs/es/tree.md?vue&type=script&lang=js\");\n/* empty/unused harmony star reexport */\n\n\n_tree_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].render = _tree_md_vue_type_template_id_be4b9bec__WEBPACK_IMPORTED_MODULE_0__[\"render\"]\n/* hot reload */\nif (true) {\n  _tree_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].__hmrId = \"be4b9bec\"\n  const api = __VUE_HMR_RUNTIME__\n  module.hot.accept()\n  if (!api.createRecord('be4b9bec', _tree_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])) {\n    api.reload('be4b9bec', _tree_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])\n  }\n  \n  module.hot.accept(/*! ./tree.md?vue&type=template&id=be4b9bec */ \"./examples/docs/es/tree.md?vue&type=template&id=be4b9bec\", function(__WEBPACK_OUTDATED_DEPENDENCIES__) { /* harmony import */ _tree_md_vue_type_template_id_be4b9bec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tree.md?vue&type=template&id=be4b9bec */ \"./examples/docs/es/tree.md?vue&type=template&id=be4b9bec\");\n(() => {\n    api.rerender('be4b9bec', _tree_md_vue_type_template_id_be4b9bec__WEBPACK_IMPORTED_MODULE_0__[\"render\"])\n  })(__WEBPACK_OUTDATED_DEPENDENCIES__); }.bind(this))\n\n}\n\n_tree_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].__file = \"examples/docs/es/tree.md\"\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (_tree_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9leGFtcGxlcy9kb2NzL2VzL3RyZWUubWQ/MWYxYiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQSx3Q0FBZ0U7QUFDVjtBQUNMO0FBQ2pELHdFQUFNLFVBQVUsNkVBQU07QUFDdEI7QUFDQSxJQUFJLElBQVU7QUFDZCxFQUFFLHdFQUFNO0FBQ1I7QUFDQTtBQUNBLG9DQUFvQyx3RUFBTTtBQUMxQywyQkFBMkIsd0VBQU07QUFDakM7O0FBRUEsb0JBQW9CLHlHQUF5QyxFQUFFO0FBQUE7QUFDL0QsNkJBQTZCLDZFQUFNO0FBQ25DLEdBQUc7O0FBRUg7O0FBRUEsd0VBQU07O0FBRVMsdUkiLCJmaWxlIjoiLi9leGFtcGxlcy9kb2NzL2VzL3RyZWUubWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXIgfSBmcm9tIFwiLi90cmVlLm1kP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWJlNGI5YmVjXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vdHJlZS5tZD92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5leHBvcnQgKiBmcm9tIFwiLi90cmVlLm1kP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcbnNjcmlwdC5yZW5kZXIgPSByZW5kZXJcbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHNjcmlwdC5fX2htcklkID0gXCJiZTRiOWJlY1wiXG4gIGNvbnN0IGFwaSA9IF9fVlVFX0hNUl9SVU5USU1FX19cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIWFwaS5jcmVhdGVSZWNvcmQoJ2JlNGI5YmVjJywgc2NyaXB0KSkge1xuICAgIGFwaS5yZWxvYWQoJ2JlNGI5YmVjJywgc2NyaXB0KVxuICB9XG4gIFxuICBtb2R1bGUuaG90LmFjY2VwdChcIi4vdHJlZS5tZD92dWUmdHlwZT10ZW1wbGF0ZSZpZD1iZTRiOWJlY1wiLCAoKSA9PiB7XG4gICAgYXBpLnJlcmVuZGVyKCdiZTRiOWJlYycsIHJlbmRlcilcbiAgfSlcblxufVxuXG5zY3JpcHQuX19maWxlID0gXCJleGFtcGxlcy9kb2NzL2VzL3RyZWUubWRcIlxuXG5leHBvcnQgZGVmYXVsdCBzY3JpcHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./examples/docs/es/tree.md\n");

/***/ }),

/***/ "./examples/docs/es/tree.md?vue&type=script&lang=js":
/*!**********************************************************!*\
  !*** ./examples/docs/es/tree.md?vue&type=script&lang=js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_dist_index_js_ref_3_0_build_md_loader_index_js_tree_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib!../../../node_modules/vue-loader/dist??ref--3-0!../../../build/md-loader!./tree.md?vue&type=script&lang=js */ \"./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/es/tree.md?vue&type=script&lang=js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_dist_index_js_ref_3_0_build_md_loader_index_js_tree_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; });\n\n/* empty/unused harmony star reexport */ \n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9leGFtcGxlcy9kb2NzL2VzL3RyZWUubWQ/NGFkOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHdDQUF5TSIsImZpbGUiOiIuL2V4YW1wbGVzL2RvY3MvZXMvdHJlZS5tZD92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9yZWYtLTMtMCEuLi8uLi8uLi9idWlsZC9tZC1sb2FkZXIvaW5kZXguanMhLi90cmVlLm1kP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCI7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3JlZi0tMy0wIS4uLy4uLy4uL2J1aWxkL21kLWxvYWRlci9pbmRleC5qcyEuL3RyZWUubWQ/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./examples/docs/es/tree.md?vue&type=script&lang=js\n");

/***/ }),

/***/ "./examples/docs/es/tree.md?vue&type=template&id=be4b9bec":
/*!****************************************************************!*\
  !*** ./examples/docs/es/tree.md?vue&type=template&id=be4b9bec ***!
  \****************************************************************/
/*! exports provided: render */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_vue_loader_dist_templateLoader_js_ref_5_node_modules_vue_loader_dist_index_js_ref_3_0_build_md_loader_index_js_tree_md_vue_type_template_id_be4b9bec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/vue-loader/dist/templateLoader.js??ref--5!../../../node_modules/vue-loader/dist??ref--3-0!../../../build/md-loader!./tree.md?vue&type=template&id=be4b9bec */ \"./node_modules/vue-loader/dist/templateLoader.js?!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/es/tree.md?vue&type=template&id=be4b9bec\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return _node_modules_vue_loader_dist_templateLoader_js_ref_5_node_modules_vue_loader_dist_index_js_ref_3_0_build_md_loader_index_js_tree_md_vue_type_template_id_be4b9bec__WEBPACK_IMPORTED_MODULE_0__[\"render\"]; });\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9leGFtcGxlcy9kb2NzL2VzL3RyZWUubWQ/ZWUxMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQSIsImZpbGUiOiIuL2V4YW1wbGVzL2RvY3MvZXMvdHJlZS5tZD92dWUmdHlwZT10ZW1wbGF0ZSZpZD1iZTRiOWJlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvdGVtcGxhdGVMb2FkZXIuanM/P3JlZi0tNSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9yZWYtLTMtMCEuLi8uLi8uLi9idWlsZC9tZC1sb2FkZXIvaW5kZXguanMhLi90cmVlLm1kP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWJlNGI5YmVjXCIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./examples/docs/es/tree.md?vue&type=template&id=be4b9bec\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/es/tree.md?vue&type=script&lang=js":
/*!*****************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/vue-loader/dist??ref--3-0!./build/md-loader!./examples/docs/es/tree.md?vue&type=script&lang=js ***!
  \*****************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm-bundler.js\");\n/* harmony import */ var highlight_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! highlight.js */ \"./node_modules/highlight.js/lib/index.js\");\n/* harmony import */ var highlight_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(highlight_js__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'component-doc',\n  components: {\n    \"element-demo0\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_0__;\n\n      function render(_ctx, _cache) {\n        const _component_el_tree = _resolveComponent(\"el-tree\");\n\n        return _openBlock(), _createBlock(_component_el_tree, {\n          data: _ctx.data,\n          props: _ctx.defaultProps,\n          \"onNode-click\": _ctx.handleNodeClick\n        }, null, 8\n        /* PROPS */\n        , [\"data\", \"props\", \"onNode-click\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            data: [{\n              label: 'Level one 1',\n              children: [{\n                label: 'Level two 1-1',\n                children: [{\n                  label: 'Level three 1-1-1'\n                }]\n              }]\n            }, {\n              label: 'Level one 2',\n              children: [{\n                label: 'Level two 2-1',\n                children: [{\n                  label: 'Level three 2-1-1'\n                }]\n              }, {\n                label: 'Level two 2-2',\n                children: [{\n                  label: 'Level three 2-2-1'\n                }]\n              }]\n            }, {\n              label: 'Level one 3',\n              children: [{\n                label: 'Level two 3-1',\n                children: [{\n                  label: 'Level three 3-1-1'\n                }]\n              }, {\n                label: 'Level two 3-2',\n                children: [{\n                  label: 'Level three 3-2-1'\n                }]\n              }]\n            }],\n            defaultProps: {\n              children: 'children',\n              label: 'label'\n            }\n          };\n        },\n\n        methods: {\n          handleNodeClick(data) {\n            console.log(data);\n          }\n\n        }\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_1___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo1\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_0__;\n\n      function render(_ctx, _cache) {\n        const _component_el_tree = _resolveComponent(\"el-tree\");\n\n        return _openBlock(), _createBlock(_component_el_tree, {\n          props: _ctx.props,\n          load: _ctx.loadNode,\n          lazy: \"\",\n          \"show-checkbox\": \"\",\n          \"onCheck-change\": _ctx.handleCheckChange\n        }, null, 8\n        /* PROPS */\n        , [\"props\", \"load\", \"onCheck-change\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            props: {\n              label: 'name',\n              children: 'zones'\n            },\n            count: 1\n          };\n        },\n\n        methods: {\n          handleCheckChange(data, checked, indeterminate) {\n            console.log(data, checked, indeterminate);\n          },\n\n          handleNodeClick(data) {\n            console.log(data);\n          },\n\n          loadNode(node, resolve) {\n            if (node.level === 0) {\n              return resolve([{\n                name: 'Root1'\n              }, {\n                name: 'Root2'\n              }]);\n            }\n\n            if (node.level > 3) return resolve([]);\n            var hasChild;\n\n            if (node.data.name === 'region1') {\n              hasChild = true;\n            } else if (node.data.name === 'region2') {\n              hasChild = false;\n            } else {\n              hasChild = Math.random() > 0.5;\n            }\n\n            setTimeout(() => {\n              var data;\n\n              if (hasChild) {\n                data = [{\n                  name: 'zone' + this.count++\n                }, {\n                  name: 'zone' + this.count++\n                }];\n              } else {\n                data = [];\n              }\n\n              resolve(data);\n            }, 500);\n          }\n\n        }\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_1___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo2\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_0__;\n\n      function render(_ctx, _cache) {\n        const _component_el_tree = _resolveComponent(\"el-tree\");\n\n        return _openBlock(), _createBlock(_component_el_tree, {\n          props: _ctx.props,\n          load: _ctx.loadNode,\n          lazy: \"\",\n          \"show-checkbox\": \"\"\n        }, null, 8\n        /* PROPS */\n        , [\"props\", \"load\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            props: {\n              label: 'name',\n              children: 'zones',\n              isLeaf: 'leaf'\n            }\n          };\n        },\n\n        methods: {\n          loadNode(node, resolve) {\n            if (node.level === 0) {\n              return resolve([{\n                name: 'region'\n              }]);\n            }\n\n            if (node.level > 1) return resolve([]);\n            setTimeout(() => {\n              const data = [{\n                name: 'leaf',\n                leaf: true\n              }, {\n                name: 'zone'\n              }];\n              resolve(data);\n            }, 500);\n          }\n\n        }\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_1___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo3\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_0__;\n\n      function render(_ctx, _cache) {\n        const _component_el_tree = _resolveComponent(\"el-tree\");\n\n        return _openBlock(), _createBlock(_component_el_tree, {\n          data: _ctx.data,\n          props: _ctx.defaultProps,\n          \"show-checkbox\": \"\",\n          \"onCheck-change\": _ctx.handleCheckChange\n        }, null, 8\n        /* PROPS */\n        , [\"data\", \"props\", \"onCheck-change\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            data: [{\n              id: 1,\n              label: 'Level one 1',\n              children: [{\n                id: 3,\n                label: 'Level two 2-1',\n                children: [{\n                  id: 4,\n                  label: 'Level three 3-1-1'\n                }, {\n                  id: 5,\n                  label: 'Level three 3-1-2',\n                  disabled: true\n                }]\n              }, {\n                id: 2,\n                label: 'Level two 2-2',\n                disabled: true,\n                children: [{\n                  id: 6,\n                  label: 'Level three 3-2-1'\n                }, {\n                  id: 7,\n                  label: 'Level three 3-2-2',\n                  disabled: true\n                }]\n              }]\n            }],\n            defaultProps: {\n              children: 'children',\n              label: 'label',\n              disabled: 'disabled'\n            }\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_1___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo4\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_0__;\n\n      function render(_ctx, _cache) {\n        const _component_el_tree = _resolveComponent(\"el-tree\");\n\n        return _openBlock(), _createBlock(_component_el_tree, {\n          data: _ctx.data,\n          \"show-checkbox\": \"\",\n          \"node-key\": \"id\",\n          \"default-expanded-keys\": [2, 3],\n          \"default-checked-keys\": [5],\n          props: _ctx.defaultProps\n        }, null, 8\n        /* PROPS */\n        , [\"data\", \"props\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            data: [{\n              id: 1,\n              label: 'Level one 1',\n              children: [{\n                id: 4,\n                label: 'Level two 1-1',\n                children: [{\n                  id: 9,\n                  label: 'Level three 1-1-1'\n                }, {\n                  id: 10,\n                  label: 'Level three 1-1-2'\n                }]\n              }]\n            }, {\n              id: 2,\n              label: 'Level one 2',\n              children: [{\n                id: 5,\n                label: 'Level two 2-1'\n              }, {\n                id: 6,\n                label: 'Level two 2-2'\n              }]\n            }, {\n              id: 3,\n              label: 'Level one 3',\n              children: [{\n                id: 7,\n                label: 'Level two 3-1'\n              }, {\n                id: 8,\n                label: 'Level two 3-2'\n              }]\n            }],\n            defaultProps: {\n              children: 'children',\n              label: 'label'\n            }\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_1___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo5\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        createTextVNode: _createTextVNode,\n        withCtx: _withCtx,\n        Fragment: _Fragment,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_0__;\n\n      function render(_ctx, _cache) {\n        const _component_el_tree = _resolveComponent(\"el-tree\");\n\n        const _component_el_button = _resolveComponent(\"el-button\");\n\n        return _openBlock(), _createBlock(_Fragment, null, [_createVNode(_component_el_tree, {\n          data: _ctx.data,\n          \"show-checkbox\": \"\",\n          \"default-expand-all\": \"\",\n          \"node-key\": \"id\",\n          ref: \"tree\",\n          \"highlight-current\": \"\",\n          props: _ctx.defaultProps\n        }, null, 8\n        /* PROPS */\n        , [\"data\", \"props\"]), _createVNode(\"div\", {\n          class: \"buttons\"\n        }, [_createVNode(_component_el_button, {\n          onClick: _ctx.getCheckedNodes\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"get by node\")]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"onClick\"]), _createVNode(_component_el_button, {\n          onClick: _ctx.getCheckedKeys\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"get by key\")]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"onClick\"]), _createVNode(_component_el_button, {\n          onClick: _ctx.setCheckedNodes\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"set by node\")]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"onClick\"]), _createVNode(_component_el_button, {\n          onClick: _ctx.setCheckedKeys\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"set by key\")]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"onClick\"]), _createVNode(_component_el_button, {\n          onClick: _ctx.resetChecked\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"reset\")]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"onClick\"])])], 64\n        /* STABLE_FRAGMENT */\n        );\n      }\n\n      const democomponentExport = {\n        methods: {\n          getCheckedNodes() {\n            console.log(this.$refs.tree.getCheckedNodes());\n          },\n\n          getCheckedKeys() {\n            console.log(this.$refs.tree.getCheckedKeys());\n          },\n\n          setCheckedNodes() {\n            this.$refs.tree.setCheckedNodes([{\n              id: 5,\n              label: 'Level two 2-1'\n            }, {\n              id: 9,\n              label: 'Level three 1-1-1'\n            }]);\n          },\n\n          setCheckedKeys() {\n            this.$refs.tree.setCheckedKeys([3]);\n          },\n\n          resetChecked() {\n            this.$refs.tree.setCheckedKeys([]);\n          }\n\n        },\n\n        data() {\n          return {\n            data: [{\n              id: 1,\n              label: 'Level one 1',\n              children: [{\n                id: 4,\n                label: 'Level two 1-1',\n                children: [{\n                  id: 9,\n                  label: 'Level three 1-1-1'\n                }, {\n                  id: 10,\n                  label: 'Level three 1-1-2'\n                }]\n              }]\n            }, {\n              id: 2,\n              label: 'Level one 2',\n              children: [{\n                id: 5,\n                label: 'Level two 2-1'\n              }, {\n                id: 6,\n                label: 'Level two 2-2'\n              }]\n            }, {\n              id: 3,\n              label: 'Level one 3',\n              children: [{\n                id: 7,\n                label: 'Level two 3-1'\n              }, {\n                id: 8,\n                label: 'Level two 3-2'\n              }]\n            }],\n            defaultProps: {\n              children: 'children',\n              label: 'label'\n            }\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_1___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo6\": function () {\n      const {\n        createVNode: _createVNode,\n        resolveComponent: _resolveComponent,\n        toDisplayString: _toDisplayString,\n        createTextVNode: _createTextVNode,\n        withCtx: _withCtx,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_0__;\n\n      function render(_ctx, _cache) {\n        const _component_el_tree = _resolveComponent(\"el-tree\");\n\n        const _component_el_button = _resolveComponent(\"el-button\");\n\n        return _openBlock(), _createBlock(\"div\", {\n          class: \"custom-tree-container\"\n        }, [_createVNode(\"div\", {\n          class: \"block\"\n        }, [_createVNode(\"p\", null, \"Using render-content\"), _createVNode(_component_el_tree, {\n          data: _ctx.data,\n          \"show-checkbox\": \"\",\n          \"node-key\": \"id\",\n          \"default-expand-all\": \"\",\n          \"expand-on-click-node\": false,\n          \"render-content\": _ctx.renderContent\n        }, null, 8\n        /* PROPS */\n        , [\"data\", \"render-content\"])]), _createVNode(\"div\", {\n          class: \"block\"\n        }, [_createVNode(\"p\", null, \"Using scoped slot\"), _createVNode(_component_el_tree, {\n          data: _ctx.data,\n          \"show-checkbox\": \"\",\n          \"node-key\": \"id\",\n          \"default-expand-all\": \"\",\n          \"expand-on-click-node\": false\n        }, {\n          default: _withCtx(() => [_createVNode(\"span\", {\n            class: \"custom-tree-node\",\n            \"slot-scope\": \"{ node, data }\"\n          }, [_createVNode(\"span\", null, _toDisplayString(_ctx.node.label), 1\n          /* TEXT */\n          ), _createVNode(\"span\", null, [_createVNode(_component_el_button, {\n            type: \"text\",\n            size: \"mini\",\n            onClick: () => _ctx.append(_ctx.data)\n          }, {\n            default: _withCtx(() => [_createTextVNode(\" Append \")]),\n            _: 1\n          }, 8\n          /* PROPS */\n          , [\"onClick\"]), _createVNode(_component_el_button, {\n            type: \"text\",\n            size: \"mini\",\n            onClick: () => _ctx.remove(_ctx.node, _ctx.data)\n          }, {\n            default: _withCtx(() => [_createTextVNode(\" Delete \")]),\n            _: 1\n          }, 8\n          /* PROPS */\n          , [\"onClick\"])])])]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"data\"])])]);\n      }\n\n      let id = 1000;\n      const democomponentExport = {\n        data() {\n          const data = [{\n            id: 1,\n            label: 'Level one 1',\n            children: [{\n              id: 4,\n              label: 'Level two 1-1',\n              children: [{\n                id: 9,\n                label: 'Level three 1-1-1'\n              }, {\n                id: 10,\n                label: 'Level three 1-1-2'\n              }]\n            }]\n          }, {\n            id: 2,\n            label: 'Level one 2',\n            children: [{\n              id: 5,\n              label: 'Level two 2-1'\n            }, {\n              id: 6,\n              label: 'Level two 2-2'\n            }]\n          }, {\n            id: 3,\n            label: 'Level one 3',\n            children: [{\n              id: 7,\n              label: 'Level two 3-1'\n            }, {\n              id: 8,\n              label: 'Level two 3-2'\n            }]\n          }];\n          return {\n            data: JSON.parse(JSON.stringify(data)),\n            data: JSON.parse(JSON.stringify(data))\n          };\n        },\n\n        methods: {\n          append(data) {\n            const newChild = {\n              id: id++,\n              label: 'testtest',\n              children: []\n            };\n\n            if (!data.children) {\n              this.$set(data, 'children', []);\n            }\n\n            data.children.push(newChild);\n          },\n\n          remove(node, data) {\n            const parent = node.parent;\n            const children = parent.data.children || parent.data;\n            const index = children.findIndex(d => d.id === data.id);\n            children.splice(index, 1);\n          },\n\n          renderContent(h, {\n            node,\n            data,\n            store\n          }) {\n            return Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"span\", {\n              \"class\": \"custom-tree-node\"\n            }, [Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"span\", null, [node.label]), Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"span\", null, [Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"el-button\"), {\n              \"size\": \"mini\",\n              \"type\": \"text\",\n              \"on-click\": () => this.append(data)\n            }, {\n              default: () => [Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Append\")]\n            }), Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"el-button\"), {\n              \"size\": \"mini\",\n              \"type\": \"text\",\n              \"on-click\": () => this.remove(node, data)\n            }, {\n              default: () => [Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Delete\")]\n            })])]);\n          }\n\n        }\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_1___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo7\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        Fragment: _Fragment,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_0__;\n\n      function render(_ctx, _cache) {\n        const _component_el_input = _resolveComponent(\"el-input\");\n\n        const _component_el_tree = _resolveComponent(\"el-tree\");\n\n        return _openBlock(), _createBlock(_Fragment, null, [_createVNode(_component_el_input, {\n          placeholder: \"Filter keyword\",\n          modelValue: _ctx.filterText,\n          \"onUpdate:modelValue\": $event => _ctx.filterText = $event\n        }, null, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"]), _createVNode(_component_el_tree, {\n          class: \"filter-tree\",\n          data: _ctx.data,\n          props: _ctx.defaultProps,\n          \"default-expand-all\": \"\",\n          \"filter-node-method\": _ctx.filterNode,\n          ref: \"tree\"\n        }, null, 8\n        /* PROPS */\n        , [\"data\", \"props\", \"filter-node-method\"])], 64\n        /* STABLE_FRAGMENT */\n        );\n      }\n\n      const democomponentExport = {\n        watch: {\n          filterText(val) {\n            this.$refs.tree.filter(val);\n          }\n\n        },\n        methods: {\n          filterNode(value, data) {\n            if (!value) return true;\n            return data.label.indexOf(value) !== -1;\n          }\n\n        },\n\n        data() {\n          return {\n            filterText: '',\n            data: [{\n              id: 1,\n              label: 'Level one 1',\n              children: [{\n                id: 4,\n                label: 'Level two 1-1',\n                children: [{\n                  id: 9,\n                  label: 'Level three 1-1-1'\n                }, {\n                  id: 10,\n                  label: 'Level three 1-1-2'\n                }]\n              }]\n            }, {\n              id: 2,\n              label: 'Level one 2',\n              children: [{\n                id: 5,\n                label: 'Level two 2-1'\n              }, {\n                id: 6,\n                label: 'Level two 2-2'\n              }]\n            }, {\n              id: 3,\n              label: 'Level one 3',\n              children: [{\n                id: 7,\n                label: 'Level two 3-1'\n              }, {\n                id: 8,\n                label: 'Level two 3-2'\n              }]\n            }],\n            defaultProps: {\n              children: 'children',\n              label: 'label'\n            }\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_1___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo8\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_0__;\n\n      function render(_ctx, _cache) {\n        const _component_el_tree = _resolveComponent(\"el-tree\");\n\n        return _openBlock(), _createBlock(_component_el_tree, {\n          data: _ctx.data,\n          props: _ctx.defaultProps,\n          accordion: \"\",\n          \"onNode-click\": _ctx.handleNodeClick\n        }, null, 8\n        /* PROPS */\n        , [\"data\", \"props\", \"onNode-click\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            data: [{\n              label: 'Level one 1',\n              children: [{\n                label: 'Level two 1-1',\n                children: [{\n                  label: 'Level three 1-1-1'\n                }]\n              }]\n            }, {\n              label: 'Level one 2',\n              children: [{\n                label: 'Level two 2-1',\n                children: [{\n                  label: 'Level three 2-1-1'\n                }]\n              }, {\n                label: 'Level two 2-2',\n                children: [{\n                  label: 'Level three 2-2-1'\n                }]\n              }]\n            }, {\n              label: 'Level one 3',\n              children: [{\n                label: 'Level two 3-1',\n                children: [{\n                  label: 'Level three 3-1-1'\n                }]\n              }, {\n                label: 'Level two 3-2',\n                children: [{\n                  label: 'Level three 3-2-1'\n                }]\n              }]\n            }],\n            defaultProps: {\n              children: 'children',\n              label: 'label'\n            }\n          };\n        },\n\n        methods: {\n          handleNodeClick(data) {\n            console.log(data);\n          }\n\n        }\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_1___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo9\": function () {\n      const {\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        openBlock: _openBlock,\n        createBlock: _createBlock\n      } = vue__WEBPACK_IMPORTED_MODULE_0__;\n\n      function render(_ctx, _cache) {\n        const _component_el_tree = _resolveComponent(\"el-tree\");\n\n        return _openBlock(), _createBlock(_component_el_tree, {\n          data: _ctx.data,\n          \"node-key\": \"id\",\n          \"default-expand-all\": \"\",\n          \"onNode-drag-start\": _ctx.handleDragStart,\n          \"onNode-drag-enter\": _ctx.handleDragEnter,\n          \"onNode-drag-leave\": _ctx.handleDragLeave,\n          \"onNode-drag-over\": _ctx.handleDragOver,\n          \"onNode-drag-end\": _ctx.handleDragEnd,\n          \"onNode-drop\": _ctx.handleDrop,\n          draggable: \"\",\n          \"allow-drop\": _ctx.allowDrop,\n          \"allow-drag\": _ctx.allowDrag\n        }, null, 8\n        /* PROPS */\n        , [\"data\", \"onNode-drag-start\", \"onNode-drag-enter\", \"onNode-drag-leave\", \"onNode-drag-over\", \"onNode-drag-end\", \"onNode-drop\", \"allow-drop\", \"allow-drag\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            data: [{\n              label: 'Level one 1',\n              children: [{\n                label: 'Level two 1-1',\n                children: [{\n                  label: 'Level three 1-1-1'\n                }]\n              }]\n            }, {\n              label: 'Level one 2',\n              children: [{\n                label: 'Level two 2-1',\n                children: [{\n                  label: 'Level three 2-1-1'\n                }]\n              }, {\n                label: 'Level two 2-2',\n                children: [{\n                  label: 'Level three 2-2-1'\n                }]\n              }]\n            }, {\n              label: 'Level one 3',\n              children: [{\n                label: 'Level two 3-1',\n                children: [{\n                  label: 'Level three 3-1-1'\n                }]\n              }, {\n                label: 'Level two 3-2',\n                children: [{\n                  label: 'Level three 3-2-1'\n                }]\n              }]\n            }],\n            defaultProps: {\n              children: 'children',\n              label: 'label'\n            }\n          };\n        },\n\n        methods: {\n          handleDragStart(node, ev) {\n            console.log('drag start', node);\n          },\n\n          handleDragEnter(draggingNode, dropNode, ev) {\n            console.log('tree drag enter: ', dropNode.label);\n          },\n\n          handleDragLeave(draggingNode, dropNode, ev) {\n            console.log('tree drag leave: ', dropNode.label);\n          },\n\n          handleDragOver(draggingNode, dropNode, ev) {\n            console.log('tree drag over: ', dropNode.label);\n          },\n\n          handleDragEnd(draggingNode, dropNode, dropType, ev) {\n            console.log('tree drag end: ', dropNode && dropNode.label, dropType);\n          },\n\n          handleDrop(draggingNode, dropNode, dropType, ev) {\n            console.log('tree drop: ', dropNode.label, dropType);\n          },\n\n          allowDrop(draggingNode, dropNode, type) {\n            if (dropNode.data.label === 'Level two 3-1') {\n              return type !== 'inner';\n            } else {\n              return true;\n            }\n          },\n\n          allowDrag(draggingNode) {\n            return draggingNode.data.label.indexOf('Level three 3-1-1') === -1;\n          }\n\n        }\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_1___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }()\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/es/tree.md?vue&type=script&lang=js\n");

/***/ }),

/***/ "./node_modules/vue-loader/dist/templateLoader.js?!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/es/tree.md?vue&type=template&id=be4b9bec":
/*!************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/dist/templateLoader.js??ref--5!./node_modules/vue-loader/dist??ref--3-0!./build/md-loader!./examples/docs/es/tree.md?vue&type=template&id=be4b9bec ***!
  \************************************************************************************************************************************************************************************/
/*! exports provided: render */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return render; });\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm-bundler.js\");\n\n\nconst _hoisted_1 = { class: \"content element-doc\" }\nconst _hoisted_2 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h2\", { id: \"tree\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#tree\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Tree\")\n], -1 /* HOISTED */)\nconst _hoisted_3 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Muestra un conjunto de datos jerárquicos.\", -1 /* HOISTED */)\nconst _hoisted_4 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"uso-basico\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#uso-basico\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Uso básico\")\n], -1 /* HOISTED */)\nconst _hoisted_5 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Estructura básica de árbol.\", -1 /* HOISTED */)\nconst _hoisted_6 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<el-tree :data=\\\"data\\\" :props=\\\"defaultProps\\\" @node-click=\\\"handleNodeClick\\\"></el-tree>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        data: [{\\n          label: 'Level one 1',\\n          children: [{\\n            label: 'Level two 1-1',\\n            children: [{\\n              label: 'Level three 1-1-1'\\n            }]\\n          }]\\n        }, {\\n          label: 'Level one 2',\\n          children: [{\\n            label: 'Level two 2-1',\\n            children: [{\\n              label: 'Level three 2-1-1'\\n            }]\\n          }, {\\n            label: 'Level two 2-2',\\n            children: [{\\n              label: 'Level three 2-2-1'\\n            }]\\n          }]\\n        }, {\\n          label: 'Level one 3',\\n          children: [{\\n            label: 'Level two 3-1',\\n            children: [{\\n              label: 'Level three 3-1-1'\\n            }]\\n          }, {\\n            label: 'Level two 3-2',\\n            children: [{\\n              label: 'Level three 3-2-1'\\n            }]\\n          }]\\n        }],\\n        defaultProps: {\\n          children: 'children',\\n          label: 'label'\\n        }\\n      };\\n    },\\n    methods: {\\n      handleNodeClick(data) {\\n        console.log(data);\\n      }\\n    }\\n  };\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_7 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"seleccionable\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#seleccionable\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Seleccionable\")\n], -1 /* HOISTED */)\nconst _hoisted_8 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Usado para la selección de nodos.\", -1 /* HOISTED */)\nconst _hoisted_9 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Este ejemplo también muestra como cargar los datos de forma asíncrona.\")\n], -1 /* HOISTED */)\nconst _hoisted_10 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<el-tree\\n  :props=\\\"props\\\"\\n  :load=\\\"loadNode\\\"\\n  lazy\\n  show-checkbox\\n  @check-change=\\\"handleCheckChange\\\">\\n</el-tree>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        props: {\\n          label: 'name',\\n          children: 'zones'\\n        },\\n        count: 1\\n      };\\n    },\\n    methods: {\\n      handleCheckChange(data, checked, indeterminate) {\\n        console.log(data, checked, indeterminate);\\n      },\\n      handleNodeClick(data) {\\n        console.log(data);\\n      },\\n      loadNode(node, resolve) {\\n        if (node.level === 0) {\\n          return resolve([{ name: 'Root1' }, { name: 'Root2' }]);\\n        }\\n        if (node.level > 3) return resolve([]);\\n\\n        var hasChild;\\n        if (node.data.name === 'region1') {\\n          hasChild = true;\\n        } else if (node.data.name === 'region2') {\\n          hasChild = false;\\n        } else {\\n          hasChild = Math.random() > 0.5;\\n        }\\n\\n        setTimeout(() => {\\n          var data;\\n          if (hasChild) {\\n            data = [{\\n              name: 'zone' + this.count++\\n            }, {\\n              name: 'zone' + this.count++\\n            }];\\n          } else {\\n            data = [];\\n          }\\n\\n          resolve(data);\\n        }, 500);\\n      }\\n    }\\n  };\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_11 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"nodos-hoja-en-modo-perezoso-lazy-load\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#nodos-hoja-en-modo-perezoso-lazy-load\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Nodos hoja en modo perezoso (lazy load)\")\n], -1 /* HOISTED */)\nconst _hoisted_12 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Los datos de un nodo no son cargados hasta que no es pinchado, así que el árbol no puede predecir si es una hoja. Por eso a cada nodo se le añade el botón de desplegar, y si el nodo es una hoja el botón desaparecerá al pinchar en él. También puede decirle al árbol que el nodo es una hoja de antemano, y así evita que muestre el botón de desplegar.\")\n], -1 /* HOISTED */)\nconst _hoisted_13 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<el-tree\\n  :props=\\\"props\\\"\\n  :load=\\\"loadNode\\\"\\n  lazy\\n  show-checkbox>\\n</el-tree>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        props: {\\n          label: 'name',\\n          children: 'zones',\\n          isLeaf: 'leaf'\\n        },\\n      };\\n    },\\n    methods: {\\n      loadNode(node, resolve) {\\n        if (node.level === 0) {\\n          return resolve([{ name: 'region' }]);\\n        }\\n        if (node.level > 1) return resolve([]);\\n\\n        setTimeout(() => {\\n          const data = [{\\n            name: 'leaf',\\n            leaf: true\\n          }, {\\n            name: 'zone'\\n          }];\\n\\n          resolve(data);\\n        }, 500);\\n      }\\n    }\\n  };\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_14 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"checkbox-desactivados\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#checkbox-desactivados\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Checkbox desactivados\")\n], -1 /* HOISTED */)\nconst _hoisted_15 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"El checkbox de un nodo se puede poner como desactivado.\", -1 /* HOISTED */)\nconst _hoisted_16 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"En el ejemplo, la propiedad \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"disabled\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" se declara en \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"defaultProps\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\", y algunos nodos se ponen como \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"disabled:true\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\". Los checkboxes correspondientes son desactivados y no se pueden pinchar.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_17 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<el-tree\\n  :data=\\\"data\\\"\\n  :props=\\\"defaultProps\\\"\\n  show-checkbox\\n  @check-change=\\\"handleCheckChange\\\">\\n</el-tree>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        data: [{\\n          id: 1,\\n          label: 'Level one 1',\\n          children: [{\\n            id: 3,\\n            label: 'Level two 2-1',\\n            children: [{\\n              id: 4,\\n              label: 'Level three 3-1-1'\\n            }, {\\n              id: 5,\\n              label: 'Level three 3-1-2',\\n              disabled: true\\n            }]\\n          }, {\\n            id: 2,\\n            label: 'Level two 2-2',\\n            disabled: true,\\n            children: [{\\n              id: 6,\\n              label: 'Level three 3-2-1'\\n            }, {\\n              id: 7,\\n              label: 'Level three 3-2-2',\\n              disabled: true\\n            }]\\n          }]\\n        }],\\n        defaultProps: {\\n            children: 'children',\\n            label: 'label',\\n            disabled: 'disabled',\\n        },\\n      };\\n    }\\n  };\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_18 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"desplegado-o-seleccionado-por-defecto\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#desplegado-o-seleccionado-por-defecto\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Desplegado o seleccionado por defecto\")\n], -1 /* HOISTED */)\nconst _hoisted_19 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Los nodos pueden estar desplegados o seleccionados por defecto.\", -1 /* HOISTED */)\nconst _hoisted_20 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Utilice \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"default-expanded-keys\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" y \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"default-checked-keys\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" para establecer los nodos desplegados y seleccionados respectivamente. Tenga en cuenta que para que funcione es necesario que tengan \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"node-key\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\". Su valor es el nombre de una clave en el objeto data, y el valor de la clave debe ser único en todo el árbol.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_21 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<el-tree\\n  :data=\\\"data\\\"\\n  show-checkbox\\n  node-key=\\\"id\\\"\\n  :default-expanded-keys=\\\"[2, 3]\\\"\\n  :default-checked-keys=\\\"[5]\\\"\\n  :props=\\\"defaultProps\\\">\\n</el-tree>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        data: [{\\n          id: 1,\\n          label: 'Level one 1',\\n          children: [{\\n            id: 4,\\n            label: 'Level two 1-1',\\n            children: [{\\n              id: 9,\\n              label: 'Level three 1-1-1'\\n            }, {\\n              id: 10,\\n              label: 'Level three 1-1-2'\\n            }]\\n          }]\\n        }, {\\n          id: 2,\\n          label: 'Level one 2',\\n          children: [{\\n            id: 5,\\n            label: 'Level two 2-1'\\n          }, {\\n            id: 6,\\n            label: 'Level two 2-2'\\n          }]\\n        }, {\\n          id: 3,\\n          label: 'Level one 3',\\n          children: [{\\n            id: 7,\\n            label: 'Level two 3-1'\\n          }, {\\n            id: 8,\\n            label: 'Level two 3-2'\\n          }]\\n        }],\\n        defaultProps: {\\n          children: 'children',\\n          label: 'label'\\n        }\\n      };\\n    }\\n  };\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_22 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"seleccionando-nodos\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#seleccionando-nodos\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Seleccionando nodos\")\n], -1 /* HOISTED */)\nconst _hoisted_23 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Este ejemplo muestra como establecer y leer nodos seleccionados. Esto se puede hacer por nodos o por claves. Si lo hace por claves el atributo \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"node-key\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" es necesario.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_24 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<el-tree\\n  :data=\\\"data\\\"\\n  show-checkbox\\n  default-expand-all\\n  node-key=\\\"id\\\"\\n  ref=\\\"tree\\\"\\n  highlight-current\\n  :props=\\\"defaultProps\\\">\\n</el-tree>\\n\\n<div class=\\\"buttons\\\">\\n  <el-button @click=\\\"getCheckedNodes\\\">get by node</el-button>\\n  <el-button @click=\\\"getCheckedKeys\\\">get by key</el-button>\\n  <el-button @click=\\\"setCheckedNodes\\\">set by node</el-button>\\n  <el-button @click=\\\"setCheckedKeys\\\">set by key</el-button>\\n  <el-button @click=\\\"resetChecked\\\">reset</el-button>\\n</div>\\n\\n<script>\\n  export default {\\n    methods: {\\n      getCheckedNodes() {\\n        console.log(this.$refs.tree.getCheckedNodes());\\n      },\\n      getCheckedKeys() {\\n        console.log(this.$refs.tree.getCheckedKeys());\\n      },\\n      setCheckedNodes() {\\n        this.$refs.tree.setCheckedNodes([{\\n          id: 5,\\n          label: 'Level two 2-1'\\n        }, {\\n          id: 9,\\n          label: 'Level three 1-1-1'\\n        }]);\\n      },\\n      setCheckedKeys() {\\n        this.$refs.tree.setCheckedKeys([3]);\\n      },\\n      resetChecked() {\\n        this.$refs.tree.setCheckedKeys([]);\\n      }\\n    },\\n\\n    data() {\\n      return {\\n        data: [{\\n          id: 1,\\n          label: 'Level one 1',\\n          children: [{\\n            id: 4,\\n            label: 'Level two 1-1',\\n            children: [{\\n              id: 9,\\n              label: 'Level three 1-1-1'\\n            }, {\\n              id: 10,\\n              label: 'Level three 1-1-2'\\n            }]\\n          }]\\n        }, {\\n          id: 2,\\n          label: 'Level one 2',\\n          children: [{\\n            id: 5,\\n            label: 'Level two 2-1'\\n          }, {\\n            id: 6,\\n            label: 'Level two 2-2'\\n          }]\\n        }, {\\n          id: 3,\\n          label: 'Level one 3',\\n          children: [{\\n            id: 7,\\n            label: 'Level two 3-1'\\n          }, {\\n            id: 8,\\n            label: 'Level two 3-2'\\n          }]\\n        }],\\n        defaultProps: {\\n          children: 'children',\\n          label: 'label'\\n        }\\n      };\\n    }\\n  };\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_25 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"contenido-personalizado-en-los-nodos\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#contenido-personalizado-en-los-nodos\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Contenido personalizado en los nodos\")\n], -1 /* HOISTED */)\nconst _hoisted_26 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"El contenido de los nodos puede ser personalizado, así que puede añadir iconos y botones a su gusto.\", -1 /* HOISTED */)\nconst _hoisted_27 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Hay dos maneras de personalizar la plantilla para los nodos de árbol: \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"render-content\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" y scoped slot. Utilice \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"render-content\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" para asignar una función de renderizado que devuelve el contenido del árbol de nodos. Mire la documentación de node para una introducción detallada a las funciones de renderizado. Si prefiere scoped slot, tendrá acceso a los \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"nodos\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" y \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"datos\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" en el ámbito de aplicación, representando el objeto TreeNode y los datos del nodo actual respectivamente. Tenga en cuenta que este ejemplo no puede ejecutarse en codepen.io ya que no soporta la sintaxis JSX. En un proyecto real \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"render-content\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" funcionará si las dependencias relevantes están configuradas correctamente.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_28 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<div class=\\\"custom-tree-container\\\">\\n  <div class=\\\"block\\\">\\n    <p>Using render-content</p>\\n    <el-tree\\n      :data=\\\"data\\\"\\n      show-checkbox\\n      node-key=\\\"id\\\"\\n      default-expand-all\\n      :expand-on-click-node=\\\"false\\\"\\n      :render-content=\\\"renderContent\\\">\\n    </el-tree>\\n  </div>\\n  <div class=\\\"block\\\">\\n    <p>Using scoped slot</p>\\n    <el-tree\\n      :data=\\\"data\\\"\\n      show-checkbox\\n      node-key=\\\"id\\\"\\n      default-expand-all\\n      :expand-on-click-node=\\\"false\\\">\\n      <span class=\\\"custom-tree-node\\\" slot-scope=\\\"{ node, data }\\\">\\n        <span>{{ node.label }}</span>\\n        <span>\\n          <el-button\\n            type=\\\"text\\\"\\n            size=\\\"mini\\\"\\n            @click=\\\"() => append(data)\\\">\\n            Append\\n          </el-button>\\n          <el-button\\n            type=\\\"text\\\"\\n            size=\\\"mini\\\"\\n            @click=\\\"() => remove(node, data)\\\">\\n            Delete\\n          </el-button>\\n        </span>\\n      </span>\\n    </el-tree>\\n  </div>\\n</div>\\n\\n<script>\\n  let id = 1000;\\n\\n  export default {\\n    data() {\\n      const data = [{\\n        id: 1,\\n        label: 'Level one 1',\\n        children: [{\\n          id: 4,\\n          label: 'Level two 1-1',\\n          children: [{\\n            id: 9,\\n            label: 'Level three 1-1-1'\\n          }, {\\n            id: 10,\\n            label: 'Level three 1-1-2'\\n          }]\\n        }]\\n      }, {\\n        id: 2,\\n        label: 'Level one 2',\\n        children: [{\\n          id: 5,\\n          label: 'Level two 2-1'\\n        }, {\\n          id: 6,\\n          label: 'Level two 2-2'\\n        }]\\n      }, {\\n        id: 3,\\n        label: 'Level one 3',\\n        children: [{\\n          id: 7,\\n          label: 'Level two 3-1'\\n        }, {\\n          id: 8,\\n          label: 'Level two 3-2'\\n        }]\\n      }];\\n      return {\\n        data: JSON.parse(JSON.stringify(data)),\\n        data: JSON.parse(JSON.stringify(data))\\n      }\\n    },\\n\\n    methods: {\\n      append(data) {\\n        const newChild = { id: id++, label: 'testtest', children: [] };\\n        if (!data.children) {\\n          this.$set(data, 'children', []);\\n        }\\n        data.children.push(newChild);\\n      },\\n\\n      remove(node, data) {\\n        const parent = node.parent;\\n        const children = parent.data.children || parent.data;\\n        const index = children.findIndex(d => d.id === data.id);\\n        children.splice(index, 1);\\n      },\\n\\n      renderContent(h, { node, data, store }) {\\n        return (\\n          <span class=\\\"custom-tree-node\\\">\\n            <span>{node.label}</span>\\n            <span>\\n              <el-button size=\\\"mini\\\" type=\\\"text\\\" on-click={ () => this.append(data) }>Append</el-button>\\n              <el-button size=\\\"mini\\\" type=\\\"text\\\" on-click={ () => this.remove(node, data) }>Delete</el-button>\\n            </span>\\n          </span>);\\n      }\\n    }\\n  };\\n</script>\\n\\n<style>\\n  .custom-tree-node {\\n    flex: 1;\\n    display: flex;\\n    align-items: center;\\n    justify-content: space-between;\\n    font-size: 14px;\\n    padding-right: 8px;\\n  }\\n</style>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_29 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"filtrado-de-nodos\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#filtrado-de-nodos\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Filtrado de nodos\")\n], -1 /* HOISTED */)\nconst _hoisted_30 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Los nodos del árbol se pueden filtrar.\", -1 /* HOISTED */)\nconst _hoisted_31 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Invoque el método \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"filter\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" de la instancia de Tree para filtrar los nodos. Su parámetro es la palabra de filtrado. Tenga en cuenta que para que funcione es necesario \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"filter-node-method\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\", y su valor el método de filtrado.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_32 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<el-input\\n  placeholder=\\\"Filter keyword\\\"\\n  v-model=\\\"filterText\\\">\\n</el-input>\\n\\n<el-tree\\n  class=\\\"filter-tree\\\"\\n  :data=\\\"data\\\"\\n  :props=\\\"defaultProps\\\"\\n  default-expand-all\\n  :filter-node-method=\\\"filterNode\\\"\\n  ref=\\\"tree\\\">\\n</el-tree>\\n\\n<script>\\n  export default {\\n    watch: {\\n      filterText(val) {\\n        this.$refs.tree.filter(val);\\n      }\\n    },\\n\\n    methods: {\\n      filterNode(value, data) {\\n        if (!value) return true;\\n        return data.label.indexOf(value) !== -1;\\n      }\\n    },\\n\\n    data() {\\n      return {\\n        filterText: '',\\n        data: [{\\n          id: 1,\\n          label: 'Level one 1',\\n          children: [{\\n            id: 4,\\n            label: 'Level two 1-1',\\n            children: [{\\n              id: 9,\\n              label: 'Level three 1-1-1'\\n            }, {\\n              id: 10,\\n              label: 'Level three 1-1-2'\\n            }]\\n          }]\\n        }, {\\n          id: 2,\\n          label: 'Level one 2',\\n          children: [{\\n            id: 5,\\n            label: 'Level two 2-1'\\n          }, {\\n            id: 6,\\n            label: 'Level two 2-2'\\n          }]\\n        }, {\\n          id: 3,\\n          label: 'Level one 3',\\n          children: [{\\n            id: 7,\\n            label: 'Level two 3-1'\\n          }, {\\n            id: 8,\\n            label: 'Level two 3-2'\\n          }]\\n        }],\\n        defaultProps: {\\n          children: 'children',\\n          label: 'label'\\n        }\\n      };\\n    }\\n  };\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_33 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"acordeon\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#acordeon\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Acordeón\")\n], -1 /* HOISTED */)\nconst _hoisted_34 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Solo puede ser expandido un nodo del mismo nivel a la vez.\", -1 /* HOISTED */)\nconst _hoisted_35 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<el-tree\\n  :data=\\\"data\\\"\\n  :props=\\\"defaultProps\\\"\\n  accordion\\n  @node-click=\\\"handleNodeClick\\\">\\n</el-tree>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        data: [{\\n          label: 'Level one 1',\\n          children: [{\\n            label: 'Level two 1-1',\\n            children: [{\\n              label: 'Level three 1-1-1'\\n            }]\\n          }]\\n        }, {\\n          label: 'Level one 2',\\n          children: [{\\n            label: 'Level two 2-1',\\n            children: [{\\n              label: 'Level three 2-1-1'\\n            }]\\n          }, {\\n            label: 'Level two 2-2',\\n            children: [{\\n              label: 'Level three 2-2-1'\\n            }]\\n          }]\\n        }, {\\n          label: 'Level one 3',\\n          children: [{\\n            label: 'Level two 3-1',\\n            children: [{\\n              label: 'Level three 3-1-1'\\n            }]\\n          }, {\\n            label: 'Level two 3-2',\\n            children: [{\\n              label: 'Level three 3-2-1'\\n            }]\\n          }]\\n        }],\\n        defaultProps: {\\n          children: 'children',\\n          label: 'label'\\n        }\\n      };\\n    },\\n    methods: {\\n      handleNodeClick(data) {\\n        console.log(data);\\n      }\\n    }\\n  };\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_36 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"draggable\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#draggable\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Draggable\")\n], -1 /* HOISTED */)\nconst _hoisted_37 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Puede arrastrar y soltar nodos de Tree añadiendo un atributo \"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"draggable\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" .\")\n], -1 /* HOISTED */)\nconst _hoisted_38 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<el-tree\\n  :data=\\\"data\\\"\\n  node-key=\\\"id\\\"\\n  default-expand-all\\n  @node-drag-start=\\\"handleDragStart\\\"\\n  @node-drag-enter=\\\"handleDragEnter\\\"\\n  @node-drag-leave=\\\"handleDragLeave\\\"\\n  @node-drag-over=\\\"handleDragOver\\\"\\n  @node-drag-end=\\\"handleDragEnd\\\"\\n  @node-drop=\\\"handleDrop\\\"\\n  draggable\\n  :allow-drop=\\\"allowDrop\\\"\\n  :allow-drag=\\\"allowDrag\\\">\\n</el-tree>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        data: [{\\n          label: 'Level one 1',\\n          children: [{\\n            label: 'Level two 1-1',\\n            children: [{\\n              label: 'Level three 1-1-1'\\n            }]\\n          }]\\n        }, {\\n          label: 'Level one 2',\\n          children: [{\\n            label: 'Level two 2-1',\\n            children: [{\\n              label: 'Level three 2-1-1'\\n            }]\\n          }, {\\n            label: 'Level two 2-2',\\n            children: [{\\n              label: 'Level three 2-2-1'\\n            }]\\n          }]\\n        }, {\\n          label: 'Level one 3',\\n          children: [{\\n            label: 'Level two 3-1',\\n            children: [{\\n              label: 'Level three 3-1-1'\\n            }]\\n          }, {\\n            label: 'Level two 3-2',\\n            children: [{\\n              label: 'Level three 3-2-1'\\n            }]\\n          }]\\n        }],\\n        defaultProps: {\\n          children: 'children',\\n          label: 'label'\\n        }\\n      };\\n    },\\n    methods: {\\n      handleDragStart(node, ev) {\\n        console.log('drag start', node);\\n      },\\n      handleDragEnter(draggingNode, dropNode, ev) {\\n        console.log('tree drag enter: ', dropNode.label);\\n      },\\n      handleDragLeave(draggingNode, dropNode, ev) {\\n        console.log('tree drag leave: ', dropNode.label);\\n      },\\n      handleDragOver(draggingNode, dropNode, ev) {\\n        console.log('tree drag over: ', dropNode.label);\\n      },\\n      handleDragEnd(draggingNode, dropNode, dropType, ev) {\\n        console.log('tree drag end: ', dropNode && dropNode.label, dropType);\\n      },\\n      handleDrop(draggingNode, dropNode, dropType, ev) {\\n        console.log('tree drop: ', dropNode.label, dropType);\\n      },\\n      allowDrop(draggingNode, dropNode, type) {\\n        if (dropNode.data.label === 'Level two 3-1') {\\n          return type !== 'inner';\\n        } else {\\n          return true;\\n        }\\n      },\\n      allowDrag(draggingNode) {\\n        return draggingNode.data.label.indexOf('Level three 3-1-1') === -1;\\n      }\\n    }\\n  };\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_39 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createStaticVNode\"])(\"<h3 id=\\\"atributos\\\"><a class=\\\"header-anchor\\\" href=\\\"#atributos\\\">¶</a> Atributos</h3><table><thead><tr><th>Atributo</th><th>Descripción</th><th>Tipo</th><th>Valores aceptados</th><th>Por defecto</th></tr></thead><tbody><tr><td>data</td><td>Datos del árbol</td><td>array</td><td>—</td><td>—</td></tr><tr><td>empty-text</td><td>Texto a mostrar cuando data es void</td><td>string</td><td>—</td><td>—</td></tr><tr><td>node-key</td><td>Identificador único en todo el árbol para los nodos</td><td>string</td><td>—</td><td>—</td></tr><tr><td>props</td><td>Opciones de configuración</td><td>object</td><td>—</td><td>—</td></tr><tr><td>render-after-expand</td><td>si se mostrarán los nodos hijo sólo después de que se desglose por primera vez un nodo padre</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>load</td><td>Método para cargar los datos de subárboles</td><td>function(node, resolve)</td><td>—</td><td>—</td></tr><tr><td>render-content</td><td>Función de renderizado para los nodos</td><td>Function(h, { node, data, store }</td><td>—</td><td>—</td></tr><tr><td>highlight-current</td><td>Si el nodo actual está resaltado</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>default-expand-all</td><td>Expandir todos los nodos por defecto</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>expand-on-click-node</td><td>Si expandir o contraer un nodo al pincharlo, si es false solo se hará al pinchar en la flecha</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>check-on-click-node</td><td>si marcar o desmarcar el nodo al hacer clic en el. Si es <code>false</code>, el nodo sólo se puede marcar o desmarcar haciendo clic en la casilla de verificación.</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>auto-expand-parent</td><td>Expandir un nodo padre si el hijo está seleccionado</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>default-expanded-keys</td><td>Array de claves de los nodos expandidos inicialmente</td><td>array</td><td>—</td><td>—</td></tr><tr><td>show-checkbox</td><td>Si un nodo es seleccionable</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>check-strictly</td><td>El estado de selección de un nodo no afecta a sus padres o hijos, cuando <code>show-checkbox</code> es <code>true</code></td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>default-checked-keys</td><td>Array con claves de los nodos seleccionados inicialmente</td><td>array</td><td>—</td><td>—</td></tr><tr><td>current-node-key</td><td>la clave del nodo inicialmente seleccionado</td><td>string, number</td><td>—</td><td>—</td></tr><tr><td>filter-node-method</td><td>Esta función se ejecutará en cada nodo cuando se use el método filtrar, si devuelve <code>false</code> el nodo se oculta</td><td>Function(value, data, node)</td><td>—</td><td>—</td></tr><tr><td>accordion</td><td>Si solo un nodo de cada nivel puede expandirse a la vez</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>indent</td><td>Indentación horizontal de los nodos en niveles adyacentes, en pixeles</td><td>number</td><td>—</td><td>16</td></tr><tr><td>icon-class</td><td>Icono del nodo del árbol de cliente</td><td>string</td><td>-</td><td>-</td></tr><tr><td>lazy</td><td>si se trata de un nodo de hoja lazy load, utilizado con el atributo <code>load</code></td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>draggable</td><td>si se habilita la función de drag &amp; drop en los nodos</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>allow-drag</td><td>esta función se ejecutará antes de arrastrar un nodo. si devuelve <code>false</code>, el nodo no puede ser arrastrado.</td><td>Function(nodo)</td><td>—</td><td>—</td></tr><tr><td>allow-drop</td><td>esta función se ejecutará al arrastrar y soltar un nodo. si devuelve false, el nodo arrastrando no se puede soltar en el nodo destino. <code>type</code> tiene tres valores posibles: &#39;prev&#39; (insertar el nodo de arrastre antes del nodo de destino), &#39;inner&#39; (insertar el nodo de arrastre en el nodo de destino) y &#39;next&#39; (insertar el nodo de arrastre después del nodo de destino)</td><td>Function(Nodoquesearrastra, Nododestino, type)</td><td>—</td><td>—</td></tr></tbody></table><h3 id=\\\"props\\\"><a class=\\\"header-anchor\\\" href=\\\"#props\\\">¶</a> props</h3><table><thead><tr><th>Atributo</th><th>Descripción</th><th>Tipo</th><th>Valores aceptados</th><th>Por defecto</th></tr></thead><tbody><tr><td>label</td><td>Especifica que clave del objecto nodo se utilizará como label</td><td>string, function(data, node)</td><td>—</td><td>—</td></tr><tr><td>children</td><td>Especifica que objeto del nodo se utiliza como subárbol</td><td>string</td><td>—</td><td>—</td></tr><tr><td>isLeaf</td><td>Especifica si el nodo es una hoja, sólo funciona cuando lazy load está activado</td><td>boolean, function(datos, nodo)</td><td>—</td><td>—</td></tr></tbody></table><h3 id=\\\"metodos\\\"><a class=\\\"header-anchor\\\" href=\\\"#metodos\\\">¶</a> Métodos</h3><p><code>Tree</code> tiene los siguientes métodos, que devuelven el array de nodos seleccionados.</p><table><thead><tr><th>Método</th><th>Descripción</th><th>Parámetros</th></tr></thead><tbody><tr><td>filter</td><td>Filtra los nodos del árbol, los nodos filtrados estarán ocultos</td><td>Acepta un parámetro que será usado como primer parámetro para filter-node-method</td></tr><tr><td>updateKeyChildren</td><td>Asocia un nuevo dato al nodo, solo funciona si <code>node-key</code> está asignado</td><td>(key, data)Acepta dos parámetros: 1. clave del nodo 2. nuevo dato</td></tr><tr><td>getCheckedNodes</td><td>si el nodo puede ser seleccionado (<code>show-checkbox</code> es <code>true</code>), devuelve el array de nodos actualmente seleccionada.</td><td>(leafOnly, includeHalfChecked) Acepta dos parámetros de tipo booleano: 1. El valor por defecto es <code>false</code>. Si el parámetro es <code>true</code>, sólo devuelve el array de subnodos actualmente seleccionado. 2. El valor por defecto es <code>false</code>. Si el parámetro es <code>true</code>, el valor de retorno contiene nodos halfchecked.</td></tr><tr><td>setCheckedNodes</td><td>Establece algunos nodos como seleccionados, solo funciona cuando <code>node-key</code> está asignado</td><td>Un array de nodos a seleccionar</td></tr><tr><td>getCheckedKeys</td><td>Si los nodos pueden ser seleccionados (<code>show-checkbox</code> es <code>true</code>), devuelve un array con las claves de los nodos seleccionados</td><td>(leafOnly) Acepta un booleano que por defecto es <code>false</code>.</td></tr><tr><td>setCheckedKeys</td><td>Establece algunos nodos como seleccionados, solo si <code>node-key</code> está asignado</td><td>(keys, leafOnly) Acepta dos parametros: 1. un array de claves 2. un booleano cuyo valor por defecto es <code>false</code>. Si el parámetro es <code>true</code>, solo devuelve los nodos seleccionados</td></tr><tr><td>setChecked</td><td>Establece si un nodo está seleccionado, solo funciona si <code>node-key</code> esta asignado</td><td>(key/data, checked, deep) Acepta tres parámetros: 1. la clave o dato del nodo a ser seleccionado 2. un booleano que indica si un nodo el nodo estará seleccionado 3. un booleanoque indica si se hará en profundidad</td></tr><tr><td>getHalfCheckedNodes</td><td>Si el nodo puede ser seleccionado (<code>show-checkbox</code> es <code>true</code>), devuelve la mitad del array de nodos actualmente seleccionada.</td><td>-</td></tr><tr><td>getHalfCheckedKeys</td><td>Si el nodo puede ser seleccionado (<code>show-checkbox</code> es <code>true</code>), devuelve la mitad del array de claves del nodo actualmente seleccionado.</td><td>-</td></tr><tr><td>getCurrentKey</td><td>devuelve la clave del nodo resaltado actualmente (null si no hay ninguno)</td><td>—</td></tr><tr><td>getCurrentNode</td><td>devuelve los datos del nodo de resaltado (nulo si no hay ningún nodo resaltado)</td><td>—</td></tr><tr><td>setCurrentKey</td><td>establece el nodo resaltado por la clave, solo funciona si <code>node-key</code> está asignado</td><td>(key) la clave del nodo a ser resaltado. Si es <code>null</code>, cancela los nodos actualmente resaltados</td></tr><tr><td>setCurrentNode</td><td>establece el nodo resaltado, solo funciona si <code>node-key</code> está asignado</td><td>(node) nodo a ser resaltado</td></tr><tr><td>getNode</td><td>devuelve el nodo por el dato o la clave</td><td>(data) los datos o clave del nodo</td></tr><tr><td>remove</td><td>elimina un nodo, solo funciona si <code>node-key</code> está asignado</td><td>(data) los datos del nodo o nodo a borrar</td></tr><tr><td>append</td><td>añadir un nodo hijo a un nodo determinado del árbol</td><td>(data, parentNode) 1. los datos del nodo hijo que se añadirán 2. los datos del nodo padre, clave o nodo</td></tr><tr><td>insertBefore</td><td>insertar un nodo antes de un nodo dado en el árbol</td><td>(data, refNode) 1. Datos del nodo que se insertarán 2. Datos del nodo de referencia, clave o nodo</td></tr><tr><td>insertAfter</td><td>insertar un nodo después de un nodo dado en el árbol</td><td>(data, refNode) 1. Datos del nodo que se insertarán 2. Datos del nodo de referencia, clave o nodo</td></tr></tbody></table><h3 id=\\\"eventos\\\"><a class=\\\"header-anchor\\\" href=\\\"#eventos\\\">¶</a> Eventos</h3><table><thead><tr><th>Nombre del evento</th><th>Descripción</th><th>Parámetros</th></tr></thead><tbody><tr><td>node-click</td><td>se lanza cuando un nodo es pinchado</td><td>tres parámetros: el objeto del nodo seleccionado, propiedad <code>node</code> de TreeNode y el TreeNode en si</td></tr><tr><td>node-contextmenu</td><td>se lanza cuando en un nodo se hace clic con el botón derecho</td><td>cuatro parámetros: evento, el objeto nodo sobre el que se hizo clic, la propiedad <code>node</code> del TreeNode, el TreeNode en si mismo</td></tr><tr><td>check-change</td><td>se lanza cuando el estado de selección del nodo cambia</td><td>tres parámetros: objeto nodo que se corresponde con el que ha cambiado, booleano que dice si esta seleccionado, booleano que dice si el nodo tiene hijos seleccionados</td></tr><tr><td>check</td><td>se activa al hacer clic en la casilla de selección de un nodo</td><td>dos parámetros: objeto de nodo correspondiente al nodo que se marca/desmarca, objeto de estatus de árbol verificado que tiene cuatro puntales: checkedNodes, checkedKeys, halfCheckedNodes, halfCheckedKeys</td></tr><tr><td>current-change</td><td>cambia cuando el nodo actual cambia</td><td>dos parámetros: objeto nodo que se corresponde al nodo actual y propiedad <code>node</code> del TreeNode</td></tr><tr><td>node-expand</td><td>se lanza cuando el nodo actual se abre</td><td>tres parámetros: el objeto del nodo abierto, propiedad <code>node</code> de TreeNode y el TreeNode en si</td></tr><tr><td>node-collapse</td><td>se lanza cuando el nodo actual se cierra</td><td>tres parámetros: el objeto del nodo cerrado, propiedad <code>node</code> de TreeNode y el TreeNode en si</td></tr><tr><td>node-drag-start</td><td>se activa cuando se inicia el arrastre</td><td>dos parámetros: el objeto del nodo que se arrastrara, evento.</td></tr><tr><td>node-drag-enter</td><td>se desencadena cuando el nodo de arrastre entra en otro nodo</td><td>tres parámetros: objeto del nodo que se arrastra, objeto del nodo en el que entra, evento.</td></tr><tr><td>node-drag-leave</td><td>se desencadena cuando el nodo de arrastre sale de un nodo</td><td>tres parámetros: objeto del nodo que se arrastra, objeto del nodo del cual se sale, evento.</td></tr><tr><td>node-drag-over</td><td>se activa cuando se arrastra sobre un nodo (como el evento mouseover)</td><td>tres parámetros: objeto del nodo que se arrastra, objeto del nodo sobre el que esta el arrastre, evento.</td></tr><tr><td>node-drag-end</td><td>se activa cuando se termina de arrastrar</td><td>cuatro parámetros: objeto del nodo que se arrastra, objeto del nodo que corresponde al final del arrastre (puede ser <code>undefined</code> ), tipo de integración (antes (before), después (after), dentro (inner) ), evento.</td></tr><tr><td>node-drop</td><td>después de soltar el nodo de arrastre</td><td>cuatro parámetros: objeto del nodo que se esta arrastrando, objeto del nodo sobre el que se esta soltando, tipo de integración (antes (before), después (after), dentro (inner) ), evento.</td></tr></tbody></table><h3 id=\\\"scoped-slot\\\"><a class=\\\"header-anchor\\\" href=\\\"#scoped-slot\\\">¶</a> Scoped Slot</h3><table><thead><tr><th>Nombre</th><th>Descripción</th></tr></thead><tbody><tr><td>—</td><td>Contenido personalizado para nodos de tree. El parámetro del scope es { node, data }.</td></tr></tbody></table>\", 11)\n\nfunction render(_ctx, _cache) {\n  const _component_element_demo0 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo0\")\n  const _component_demo_block = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"demo-block\")\n  const _component_element_demo1 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo1\")\n  const _component_element_demo2 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo2\")\n  const _component_element_demo3 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo3\")\n  const _component_element_demo4 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo4\")\n  const _component_element_demo5 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo5\")\n  const _component_element_demo6 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo6\")\n  const _component_element_demo7 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo7\")\n  const _component_element_demo8 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo8\")\n  const _component_element_demo9 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo9\")\n\n  return (Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"openBlock\"])(), Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createBlock\"])(\"section\", _hoisted_1, [\n    _hoisted_2,\n    _hoisted_3,\n    _hoisted_4,\n    _hoisted_5,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo0)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_6\n      ]),\n      _: 1\n    }),\n    _hoisted_7,\n    _hoisted_8,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo1)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_10\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_9\n      ]),\n      _: 1\n    }),\n    _hoisted_11,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo2)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_13\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_12\n      ]),\n      _: 1\n    }),\n    _hoisted_14,\n    _hoisted_15,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo3)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_17\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_16\n      ]),\n      _: 1\n    }),\n    _hoisted_18,\n    _hoisted_19,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo4)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_21\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_20\n      ]),\n      _: 1\n    }),\n    _hoisted_22,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo5)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_24\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_23\n      ]),\n      _: 1\n    }),\n    _hoisted_25,\n    _hoisted_26,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo6)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_28\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_27\n      ]),\n      _: 1\n    }),\n    _hoisted_29,\n    _hoisted_30,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo7)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_32\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_31\n      ]),\n      _: 1\n    }),\n    _hoisted_33,\n    _hoisted_34,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo8)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_35\n      ]),\n      _: 1\n    }),\n    _hoisted_36,\n    _hoisted_37,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo9)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_38\n      ]),\n      _: 1\n    }),\n    _hoisted_39\n  ]))\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vue-loader/dist/templateLoader.js?!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/es/tree.md?vue&type=template&id=be4b9bec\n");

/***/ })

}]);