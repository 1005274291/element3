(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[87],{

/***/ "./examples/docs/en-US/select.md":
/*!***************************************!*\
  !*** ./examples/docs/en-US/select.md ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _select_md_vue_type_template_id_93644390__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./select.md?vue&type=template&id=93644390 */ \"./examples/docs/en-US/select.md?vue&type=template&id=93644390\");\n/* harmony import */ var _select_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./select.md?vue&type=script&lang=js */ \"./examples/docs/en-US/select.md?vue&type=script&lang=js\");\n/* empty/unused harmony star reexport */\n\n\n_select_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].render = _select_md_vue_type_template_id_93644390__WEBPACK_IMPORTED_MODULE_0__[\"render\"]\n/* hot reload */\nif (true) {\n  _select_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].__hmrId = \"93644390\"\n  const api = __VUE_HMR_RUNTIME__\n  module.hot.accept()\n  if (!api.createRecord('93644390', _select_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])) {\n    api.reload('93644390', _select_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])\n  }\n  \n  module.hot.accept(/*! ./select.md?vue&type=template&id=93644390 */ \"./examples/docs/en-US/select.md?vue&type=template&id=93644390\", function(__WEBPACK_OUTDATED_DEPENDENCIES__) { /* harmony import */ _select_md_vue_type_template_id_93644390__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./select.md?vue&type=template&id=93644390 */ \"./examples/docs/en-US/select.md?vue&type=template&id=93644390\");\n(() => {\n    api.rerender('93644390', _select_md_vue_type_template_id_93644390__WEBPACK_IMPORTED_MODULE_0__[\"render\"])\n  })(__WEBPACK_OUTDATED_DEPENDENCIES__); }.bind(this))\n\n}\n\n_select_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].__file = \"examples/docs/en-US/select.md\"\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (_select_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9leGFtcGxlcy9kb2NzL2VuLVVTL3NlbGVjdC5tZD9jZmIxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBLHdDQUFrRTtBQUNWO0FBQ0w7QUFDbkQsMEVBQU0sVUFBVSwrRUFBTTtBQUN0QjtBQUNBLElBQUksSUFBVTtBQUNkLEVBQUUsMEVBQU07QUFDUjtBQUNBO0FBQ0Esb0NBQW9DLDBFQUFNO0FBQzFDLDJCQUEyQiwwRUFBTTtBQUNqQzs7QUFFQSxvQkFBb0IsZ0hBQTJDLEVBQUU7QUFBQTtBQUNqRSw2QkFBNkIsK0VBQU07QUFDbkMsR0FBRzs7QUFFSDs7QUFFQSwwRUFBTTs7QUFFUyx5SSIsImZpbGUiOiIuL2V4YW1wbGVzL2RvY3MvZW4tVVMvc2VsZWN0Lm1kLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSBcIi4vc2VsZWN0Lm1kP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTkzNjQ0MzkwXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vc2VsZWN0Lm1kP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcbmV4cG9ydCAqIGZyb20gXCIuL3NlbGVjdC5tZD92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5zY3JpcHQucmVuZGVyID0gcmVuZGVyXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICBzY3JpcHQuX19obXJJZCA9IFwiOTM2NDQzOTBcIlxuICBjb25zdCBhcGkgPSBfX1ZVRV9ITVJfUlVOVElNRV9fXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFhcGkuY3JlYXRlUmVjb3JkKCc5MzY0NDM5MCcsIHNjcmlwdCkpIHtcbiAgICBhcGkucmVsb2FkKCc5MzY0NDM5MCcsIHNjcmlwdClcbiAgfVxuICBcbiAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL3NlbGVjdC5tZD92dWUmdHlwZT10ZW1wbGF0ZSZpZD05MzY0NDM5MFwiLCAoKSA9PiB7XG4gICAgYXBpLnJlcmVuZGVyKCc5MzY0NDM5MCcsIHJlbmRlcilcbiAgfSlcblxufVxuXG5zY3JpcHQuX19maWxlID0gXCJleGFtcGxlcy9kb2NzL2VuLVVTL3NlbGVjdC5tZFwiXG5cbmV4cG9ydCBkZWZhdWx0IHNjcmlwdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./examples/docs/en-US/select.md\n");

/***/ }),

/***/ "./examples/docs/en-US/select.md?vue&type=script&lang=js":
/*!***************************************************************!*\
  !*** ./examples/docs/en-US/select.md?vue&type=script&lang=js ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_dist_index_js_ref_3_0_build_md_loader_index_js_select_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib!../../../node_modules/vue-loader/dist??ref--3-0!../../../build/md-loader!./select.md?vue&type=script&lang=js */ \"./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/en-US/select.md?vue&type=script&lang=js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_dist_index_js_ref_3_0_build_md_loader_index_js_select_md_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; });\n\n/* empty/unused harmony star reexport */ \n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9leGFtcGxlcy9kb2NzL2VuLVVTL3NlbGVjdC5tZD85M2FlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsd0NBQTJNIiwiZmlsZSI6Ii4vZXhhbXBsZXMvZG9jcy9lbi1VUy9zZWxlY3QubWQ/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9pbmRleC5qcz8/cmVmLS0zLTAhLi4vLi4vLi4vYnVpbGQvbWQtbG9hZGVyL2luZGV4LmpzIS4vc2VsZWN0Lm1kP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCI7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3JlZi0tMy0wIS4uLy4uLy4uL2J1aWxkL21kLWxvYWRlci9pbmRleC5qcyEuL3NlbGVjdC5tZD92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./examples/docs/en-US/select.md?vue&type=script&lang=js\n");

/***/ }),

/***/ "./examples/docs/en-US/select.md?vue&type=template&id=93644390":
/*!*********************************************************************!*\
  !*** ./examples/docs/en-US/select.md?vue&type=template&id=93644390 ***!
  \*********************************************************************/
/*! exports provided: render */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_vue_loader_dist_templateLoader_js_ref_5_node_modules_vue_loader_dist_index_js_ref_3_0_build_md_loader_index_js_select_md_vue_type_template_id_93644390__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/vue-loader/dist/templateLoader.js??ref--5!../../../node_modules/vue-loader/dist??ref--3-0!../../../build/md-loader!./select.md?vue&type=template&id=93644390 */ \"./node_modules/vue-loader/dist/templateLoader.js?!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/en-US/select.md?vue&type=template&id=93644390\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return _node_modules_vue_loader_dist_templateLoader_js_ref_5_node_modules_vue_loader_dist_index_js_ref_3_0_build_md_loader_index_js_select_md_vue_type_template_id_93644390__WEBPACK_IMPORTED_MODULE_0__[\"render\"]; });\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9leGFtcGxlcy9kb2NzL2VuLVVTL3NlbGVjdC5tZD80ODg5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBIiwiZmlsZSI6Ii4vZXhhbXBsZXMvZG9jcy9lbi1VUy9zZWxlY3QubWQ/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9OTM2NDQzOTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L3RlbXBsYXRlTG9hZGVyLmpzPz9yZWYtLTUhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9pbmRleC5qcz8/cmVmLS0zLTAhLi4vLi4vLi4vYnVpbGQvbWQtbG9hZGVyL2luZGV4LmpzIS4vc2VsZWN0Lm1kP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTkzNjQ0MzkwXCIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./examples/docs/en-US/select.md?vue&type=template&id=93644390\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/en-US/select.md?vue&type=script&lang=js":
/*!**********************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/vue-loader/dist??ref--3-0!./build/md-loader!./examples/docs/en-US/select.md?vue&type=script&lang=js ***!
  \**********************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var highlight_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! highlight.js */ \"./node_modules/highlight.js/lib/index.js\");\n/* harmony import */ var highlight_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(highlight_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm-bundler.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'component-doc',\n  components: {\n    \"element-demo0\": function () {\n      const {\n        renderList: _renderList,\n        Fragment: _Fragment,\n        openBlock: _openBlock,\n        createBlock: _createBlock,\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_option = _resolveComponent(\"el-option\");\n\n        const _component_el_select = _resolveComponent(\"el-select\");\n\n        return _openBlock(), _createBlock(_component_el_select, {\n          modelValue: _ctx.value,\n          \"onUpdate:modelValue\": $event => _ctx.value = $event,\n          placeholder: \"Select\"\n        }, {\n          default: _withCtx(() => [(_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.options, item => {\n            return _openBlock(), _createBlock(_component_el_option, {\n              key: item.value,\n              label: item.label,\n              value: item.value\n            }, null, 8\n            /* PROPS */\n            , [\"label\", \"value\"]);\n          }), 128\n          /* KEYED_FRAGMENT */\n          ))]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            options: [{\n              value: 'Option1',\n              label: 'Option1'\n            }, {\n              value: 'Option2',\n              label: 'Option2'\n            }, {\n              value: 'Option3',\n              label: 'Option3'\n            }, {\n              value: 'Option4',\n              label: 'Option4'\n            }, {\n              value: 'Option5',\n              label: 'Option5'\n            }],\n            value: ''\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo1\": function () {\n      const {\n        renderList: _renderList,\n        Fragment: _Fragment,\n        openBlock: _openBlock,\n        createBlock: _createBlock,\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_option = _resolveComponent(\"el-option\");\n\n        const _component_el_select = _resolveComponent(\"el-select\");\n\n        return _openBlock(), _createBlock(_component_el_select, {\n          modelValue: _ctx.value,\n          \"onUpdate:modelValue\": $event => _ctx.value = $event,\n          placeholder: \"Select\"\n        }, {\n          default: _withCtx(() => [(_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.options, item => {\n            return _openBlock(), _createBlock(_component_el_option, {\n              key: item.value,\n              label: item.label,\n              value: item.value,\n              disabled: item.disabled\n            }, null, 8\n            /* PROPS */\n            , [\"label\", \"value\", \"disabled\"]);\n          }), 128\n          /* KEYED_FRAGMENT */\n          ))]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            options: [{\n              value: 'Option1',\n              label: 'Option1'\n            }, {\n              value: 'Option2',\n              label: 'Option2',\n              disabled: true\n            }, {\n              value: 'Option3',\n              label: 'Option3'\n            }, {\n              value: 'Option4',\n              label: 'Option4'\n            }, {\n              value: 'Option5',\n              label: 'Option5'\n            }],\n            value: ''\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo2\": function () {\n      const {\n        renderList: _renderList,\n        Fragment: _Fragment,\n        openBlock: _openBlock,\n        createBlock: _createBlock,\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_option = _resolveComponent(\"el-option\");\n\n        const _component_el_select = _resolveComponent(\"el-select\");\n\n        return _openBlock(), _createBlock(_component_el_select, {\n          modelValue: _ctx.value,\n          \"onUpdate:modelValue\": $event => _ctx.value = $event,\n          disabled: \"\",\n          placeholder: \"Select\"\n        }, {\n          default: _withCtx(() => [(_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.options, item => {\n            return _openBlock(), _createBlock(_component_el_option, {\n              key: item.value,\n              label: item.label,\n              value: item.value\n            }, null, 8\n            /* PROPS */\n            , [\"label\", \"value\"]);\n          }), 128\n          /* KEYED_FRAGMENT */\n          ))]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            options: [{\n              value: 'Option1',\n              label: 'Option1'\n            }, {\n              value: 'Option2',\n              label: 'Option2'\n            }, {\n              value: 'Option3',\n              label: 'Option3'\n            }, {\n              value: 'Option4',\n              label: 'Option4'\n            }, {\n              value: 'Option5',\n              label: 'Option5'\n            }],\n            value: ''\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo3\": function () {\n      const {\n        renderList: _renderList,\n        Fragment: _Fragment,\n        openBlock: _openBlock,\n        createBlock: _createBlock,\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_option = _resolveComponent(\"el-option\");\n\n        const _component_el_select = _resolveComponent(\"el-select\");\n\n        return _openBlock(), _createBlock(_component_el_select, {\n          modelValue: _ctx.value,\n          \"onUpdate:modelValue\": $event => _ctx.value = $event,\n          clearable: \"\",\n          placeholder: \"Select\"\n        }, {\n          default: _withCtx(() => [(_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.options, item => {\n            return _openBlock(), _createBlock(_component_el_option, {\n              key: item.value,\n              label: item.label,\n              value: item.value\n            }, null, 8\n            /* PROPS */\n            , [\"label\", \"value\"]);\n          }), 128\n          /* KEYED_FRAGMENT */\n          ))]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            options: [{\n              value: 'Option1',\n              label: 'Option1'\n            }, {\n              value: 'Option2',\n              label: 'Option2'\n            }, {\n              value: 'Option3',\n              label: 'Option3'\n            }, {\n              value: 'Option4',\n              label: 'Option4'\n            }, {\n              value: 'Option5',\n              label: 'Option5'\n            }],\n            value: ''\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo4\": function () {\n      const {\n        renderList: _renderList,\n        Fragment: _Fragment,\n        openBlock: _openBlock,\n        createBlock: _createBlock,\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_option = _resolveComponent(\"el-option\");\n\n        const _component_el_select = _resolveComponent(\"el-select\");\n\n        return _openBlock(), _createBlock(_Fragment, null, [_createVNode(_component_el_select, {\n          modelValue: _ctx.value1,\n          \"onUpdate:modelValue\": $event => _ctx.value1 = $event,\n          multiple: \"\",\n          placeholder: \"Select\"\n        }, {\n          default: _withCtx(() => [(_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.options, item => {\n            return _openBlock(), _createBlock(_component_el_option, {\n              key: item.value,\n              label: item.label,\n              value: item.value\n            }, null, 8\n            /* PROPS */\n            , [\"label\", \"value\"]);\n          }), 128\n          /* KEYED_FRAGMENT */\n          ))]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"]), _createVNode(_component_el_select, {\n          modelValue: _ctx.value2,\n          \"onUpdate:modelValue\": $event => _ctx.value2 = $event,\n          multiple: \"\",\n          \"collapse-tags\": \"\",\n          style: {\n            \"margin-left\": \"20px\"\n          },\n          placeholder: \"Select\"\n        }, {\n          default: _withCtx(() => [(_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.options, item => {\n            return _openBlock(), _createBlock(_component_el_option, {\n              key: item.value,\n              label: item.label,\n              value: item.value\n            }, null, 8\n            /* PROPS */\n            , [\"label\", \"value\"]);\n          }), 128\n          /* KEYED_FRAGMENT */\n          ))]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"])], 64\n        /* STABLE_FRAGMENT */\n        );\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            options: [{\n              value: 'Option1',\n              label: 'Option1'\n            }, {\n              value: 'Option2',\n              label: 'Option2'\n            }, {\n              value: 'Option3',\n              label: 'Option3'\n            }, {\n              value: 'Option4',\n              label: 'Option4'\n            }, {\n              value: 'Option5',\n              label: 'Option5'\n            }],\n            value1: [],\n            value2: []\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo5\": function () {\n      const {\n        renderList: _renderList,\n        Fragment: _Fragment,\n        openBlock: _openBlock,\n        createBlock: _createBlock,\n        toDisplayString: _toDisplayString,\n        createVNode: _createVNode,\n        resolveComponent: _resolveComponent,\n        withCtx: _withCtx\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_option = _resolveComponent(\"el-option\");\n\n        const _component_el_select = _resolveComponent(\"el-select\");\n\n        return _openBlock(), _createBlock(_component_el_select, {\n          modelValue: _ctx.value,\n          \"onUpdate:modelValue\": $event => _ctx.value = $event,\n          placeholder: \"Select\"\n        }, {\n          default: _withCtx(() => [(_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.cities, item => {\n            return _openBlock(), _createBlock(_component_el_option, {\n              key: item.value,\n              label: item.label,\n              value: item.value\n            }, {\n              default: _withCtx(() => [_createVNode(\"span\", {\n                style: {\n                  \"float\": \"left\"\n                }\n              }, _toDisplayString(item.label), 1\n              /* TEXT */\n              ), _createVNode(\"span\", {\n                style: {\n                  \"float\": \"right\",\n                  \"color\": \"#8492a6\",\n                  \"font-size\": \"13px\"\n                }\n              }, _toDisplayString(item.value), 1\n              /* TEXT */\n              )]),\n              _: 2\n            }, 1032\n            /* PROPS, DYNAMIC_SLOTS */\n            , [\"label\", \"value\"]);\n          }), 128\n          /* KEYED_FRAGMENT */\n          ))]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            cities: [{\n              value: 'Beijing',\n              label: 'Beijing'\n            }, {\n              value: 'Shanghai',\n              label: 'Shanghai'\n            }, {\n              value: 'Nanjing',\n              label: 'Nanjing'\n            }, {\n              value: 'Chengdu',\n              label: 'Chengdu'\n            }, {\n              value: 'Shenzhen',\n              label: 'Shenzhen'\n            }, {\n              value: 'Guangzhou',\n              label: 'Guangzhou'\n            }],\n            value: ''\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo6\": function () {\n      const {\n        renderList: _renderList,\n        Fragment: _Fragment,\n        openBlock: _openBlock,\n        createBlock: _createBlock,\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_option = _resolveComponent(\"el-option\");\n\n        const _component_el_option_group = _resolveComponent(\"el-option-group\");\n\n        const _component_el_select = _resolveComponent(\"el-select\");\n\n        return _openBlock(), _createBlock(_component_el_select, {\n          modelValue: _ctx.value,\n          \"onUpdate:modelValue\": $event => _ctx.value = $event,\n          placeholder: \"Select\"\n        }, {\n          default: _withCtx(() => [(_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.options, group => {\n            return _openBlock(), _createBlock(_component_el_option_group, {\n              key: group.label,\n              label: group.label\n            }, {\n              default: _withCtx(() => [(_openBlock(true), _createBlock(_Fragment, null, _renderList(group.options, item => {\n                return _openBlock(), _createBlock(_component_el_option, {\n                  key: item.value,\n                  label: item.label,\n                  value: item.value\n                }, null, 8\n                /* PROPS */\n                , [\"label\", \"value\"]);\n              }), 128\n              /* KEYED_FRAGMENT */\n              ))]),\n              _: 2\n            }, 1032\n            /* PROPS, DYNAMIC_SLOTS */\n            , [\"label\"]);\n          }), 128\n          /* KEYED_FRAGMENT */\n          ))]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            options: [{\n              label: 'Popular cities',\n              options: [{\n                value: 'Shanghai',\n                label: 'Shanghai'\n              }, {\n                value: 'Beijing',\n                label: 'Beijing'\n              }]\n            }, {\n              label: 'City name',\n              options: [{\n                value: 'Chengdu',\n                label: 'Chengdu'\n              }, {\n                value: 'Shenzhen',\n                label: 'Shenzhen'\n              }, {\n                value: 'Guangzhou',\n                label: 'Guangzhou'\n              }, {\n                value: 'Dalian',\n                label: 'Dalian'\n              }]\n            }],\n            value: ''\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo7\": function () {\n      const {\n        renderList: _renderList,\n        Fragment: _Fragment,\n        openBlock: _openBlock,\n        createBlock: _createBlock,\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_option = _resolveComponent(\"el-option\");\n\n        const _component_el_select = _resolveComponent(\"el-select\");\n\n        return _openBlock(), _createBlock(_component_el_select, {\n          modelValue: _ctx.value,\n          \"onUpdate:modelValue\": $event => _ctx.value = $event,\n          filterable: \"\",\n          placeholder: \"Select\"\n        }, {\n          default: _withCtx(() => [(_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.options, item => {\n            return _openBlock(), _createBlock(_component_el_option, {\n              key: item.value,\n              label: item.label,\n              value: item.value\n            }, null, 8\n            /* PROPS */\n            , [\"label\", \"value\"]);\n          }), 128\n          /* KEYED_FRAGMENT */\n          ))]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            options: [{\n              value: 'Option1',\n              label: 'Option1'\n            }, {\n              value: 'Option2',\n              label: 'Option2'\n            }, {\n              value: 'Option3',\n              label: 'Option3'\n            }, {\n              value: 'Option4',\n              label: 'Option4'\n            }, {\n              value: 'Option5',\n              label: 'Option5'\n            }],\n            value: ''\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo8\": function () {\n      const {\n        renderList: _renderList,\n        Fragment: _Fragment,\n        openBlock: _openBlock,\n        createBlock: _createBlock,\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_option = _resolveComponent(\"el-option\");\n\n        const _component_el_select = _resolveComponent(\"el-select\");\n\n        return _openBlock(), _createBlock(_component_el_select, {\n          modelValue: _ctx.value,\n          \"onUpdate:modelValue\": $event => _ctx.value = $event,\n          multiple: \"\",\n          filterable: \"\",\n          remote: \"\",\n          \"reserve-keyword\": \"\",\n          placeholder: \"Please enter a keyword\",\n          \"remote-method\": _ctx.remoteMethod,\n          loading: _ctx.loading\n        }, {\n          default: _withCtx(() => [(_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.options, item => {\n            return _openBlock(), _createBlock(_component_el_option, {\n              key: item.value,\n              label: item.label,\n              value: item.value\n            }, null, 8\n            /* PROPS */\n            , [\"label\", \"value\"]);\n          }), 128\n          /* KEYED_FRAGMENT */\n          ))]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\", \"remote-method\", \"loading\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            options: [],\n            value: [],\n            list: [],\n            loading: false,\n            states: [\"Alabama\", \"Alaska\", \"Arizona\", \"Arkansas\", \"California\", \"Colorado\", \"Connecticut\", \"Delaware\", \"Florida\", \"Georgia\", \"Hawaii\", \"Idaho\", \"Illinois\", \"Indiana\", \"Iowa\", \"Kansas\", \"Kentucky\", \"Louisiana\", \"Maine\", \"Maryland\", \"Massachusetts\", \"Michigan\", \"Minnesota\", \"Mississippi\", \"Missouri\", \"Montana\", \"Nebraska\", \"Nevada\", \"New Hampshire\", \"New Jersey\", \"New Mexico\", \"New York\", \"North Carolina\", \"North Dakota\", \"Ohio\", \"Oklahoma\", \"Oregon\", \"Pennsylvania\", \"Rhode Island\", \"South Carolina\", \"South Dakota\", \"Tennessee\", \"Texas\", \"Utah\", \"Vermont\", \"Virginia\", \"Washington\", \"West Virginia\", \"Wisconsin\", \"Wyoming\"]\n          };\n        },\n\n        mounted() {\n          this.list = this.states.map(item => {\n            return {\n              value: `value:${item}`,\n              label: `label:${item}`\n            };\n          });\n        },\n\n        methods: {\n          remoteMethod(query) {\n            if (query !== '') {\n              this.loading = true;\n              setTimeout(() => {\n                this.loading = false;\n                this.options = this.list.filter(item => {\n                  return item.label.toLowerCase().indexOf(query.toLowerCase()) > -1;\n                });\n              }, 200);\n            } else {\n              this.options = [];\n            }\n          }\n\n        }\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }(),\n    \"element-demo9\": function () {\n      const {\n        renderList: _renderList,\n        Fragment: _Fragment,\n        openBlock: _openBlock,\n        createBlock: _createBlock,\n        resolveComponent: _resolveComponent,\n        createVNode: _createVNode,\n        withCtx: _withCtx\n      } = vue__WEBPACK_IMPORTED_MODULE_1__;\n\n      function render(_ctx, _cache) {\n        const _component_el_option = _resolveComponent(\"el-option\");\n\n        const _component_el_select = _resolveComponent(\"el-select\");\n\n        return _openBlock(), _createBlock(_component_el_select, {\n          modelValue: _ctx.value,\n          \"onUpdate:modelValue\": $event => _ctx.value = $event,\n          multiple: \"\",\n          filterable: \"\",\n          \"allow-create\": \"\",\n          \"default-first-option\": \"\",\n          placeholder: \"Choose tags for your article\"\n        }, {\n          default: _withCtx(() => [(_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.options, item => {\n            return _openBlock(), _createBlock(_component_el_option, {\n              key: item.value,\n              label: item.label,\n              value: item.value\n            }, null, 8\n            /* PROPS */\n            , [\"label\", \"value\"]);\n          }), 128\n          /* KEYED_FRAGMENT */\n          ))]),\n          _: 1\n        }, 8\n        /* PROPS */\n        , [\"modelValue\", \"onUpdate:modelValue\"]);\n      }\n\n      const democomponentExport = {\n        data() {\n          return {\n            options: [{\n              value: 'HTML',\n              label: 'HTML'\n            }, {\n              value: 'CSS',\n              label: 'CSS'\n            }, {\n              value: 'JavaScript',\n              label: 'JavaScript'\n            }],\n            value: []\n          };\n        }\n\n      };\n      return {\n        mounted() {\n          this.$nextTick(() => {\n            const blocks = document.querySelectorAll('pre code:not(.hljs)');\n            Array.prototype.forEach.call(blocks, highlight_js__WEBPACK_IMPORTED_MODULE_0___default.a.highlightBlock);\n          });\n        },\n\n        render,\n        ...democomponentExport\n      };\n    }()\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/en-US/select.md?vue&type=script&lang=js\n");

/***/ }),

/***/ "./node_modules/vue-loader/dist/templateLoader.js?!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/en-US/select.md?vue&type=template&id=93644390":
/*!*****************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/dist/templateLoader.js??ref--5!./node_modules/vue-loader/dist??ref--3-0!./build/md-loader!./examples/docs/en-US/select.md?vue&type=template&id=93644390 ***!
  \*****************************************************************************************************************************************************************************************/
/*! exports provided: render */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return render; });\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm-bundler.js\");\n\n\nconst _hoisted_1 = { class: \"content element-doc\" }\nconst _hoisted_2 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h2\", { id: \"select\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#select\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Select\")\n], -1 /* HOISTED */)\nconst _hoisted_3 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"When there are plenty of options, use a drop-down menu to display and select desired ones.\", -1 /* HOISTED */)\nconst _hoisted_4 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"basic-usage\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#basic-usage\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Basic usage\")\n], -1 /* HOISTED */)\nconst _hoisted_5 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"v-model\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" is the value of \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"el-option\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" that is currently selected.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_6 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-select v-model=\\\"value\\\" placeholder=\\\"Select\\\">\\n    <el-option\\n      v-for=\\\"item in options\\\"\\n      :key=\\\"item.value\\\"\\n      :label=\\\"item.label\\\"\\n      :value=\\\"item.value\\\">\\n    </el-option>\\n  </el-select>\\n</template>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        options: [{\\n          value: 'Option1',\\n          label: 'Option1'\\n        }, {\\n          value: 'Option2',\\n          label: 'Option2'\\n        }, {\\n          value: 'Option3',\\n          label: 'Option3'\\n        }, {\\n          value: 'Option4',\\n          label: 'Option4'\\n        }, {\\n          value: 'Option5',\\n          label: 'Option5'\\n        }],\\n        value: ''\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_7 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"disabled-option\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#disabled-option\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Disabled option\")\n], -1 /* HOISTED */)\nconst _hoisted_8 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Set the value of \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"disabled\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" in \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"el-option\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" to \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"true\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" to disable this option.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_9 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-select v-model=\\\"value\\\" placeholder=\\\"Select\\\">\\n    <el-option\\n      v-for=\\\"item in options\\\"\\n      :key=\\\"item.value\\\"\\n      :label=\\\"item.label\\\"\\n      :value=\\\"item.value\\\"\\n      :disabled=\\\"item.disabled\\\">\\n    </el-option>\\n  </el-select>\\n</template>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        options: [{\\n          value: 'Option1',\\n          label: 'Option1'\\n        }, {\\n          value: 'Option2',\\n          label: 'Option2',\\n          disabled: true\\n        }, {\\n          value: 'Option3',\\n          label: 'Option3'\\n        }, {\\n          value: 'Option4',\\n          label: 'Option4'\\n        }, {\\n          value: 'Option5',\\n          label: 'Option5'\\n        }],\\n        value: ''\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_10 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"disabled-select\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#disabled-select\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Disabled select\")\n], -1 /* HOISTED */)\nconst _hoisted_11 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Disable the whole component.\", -1 /* HOISTED */)\nconst _hoisted_12 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Set \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"disabled\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" of \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"el-select\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" to make it disabled.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_13 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-select v-model=\\\"value\\\" disabled placeholder=\\\"Select\\\">\\n    <el-option\\n      v-for=\\\"item in options\\\"\\n      :key=\\\"item.value\\\"\\n      :label=\\\"item.label\\\"\\n      :value=\\\"item.value\\\">\\n    </el-option>\\n  </el-select>\\n</template>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        options: [{\\n          value: 'Option1',\\n          label: 'Option1'\\n        }, {\\n          value: 'Option2',\\n          label: 'Option2'\\n        }, {\\n          value: 'Option3',\\n          label: 'Option3'\\n        }, {\\n          value: 'Option4',\\n          label: 'Option4'\\n        }, {\\n          value: 'Option5',\\n          label: 'Option5'\\n        }],\\n        value: ''\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_14 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"clearable-single-select\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#clearable-single-select\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Clearable single select\")\n], -1 /* HOISTED */)\nconst _hoisted_15 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"You can clear Select using a clear icon.\", -1 /* HOISTED */)\nconst _hoisted_16 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Set \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"clearable\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" attribute for \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"el-select\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" and a clear icon will appear. Note that \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"clearable\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" is only for single select.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_17 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-select v-model=\\\"value\\\" clearable placeholder=\\\"Select\\\">\\n    <el-option\\n      v-for=\\\"item in options\\\"\\n      :key=\\\"item.value\\\"\\n      :label=\\\"item.label\\\"\\n      :value=\\\"item.value\\\">\\n    </el-option>\\n  </el-select>\\n</template>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        options: [{\\n          value: 'Option1',\\n          label: 'Option1'\\n        }, {\\n          value: 'Option2',\\n          label: 'Option2'\\n        }, {\\n          value: 'Option3',\\n          label: 'Option3'\\n        }, {\\n          value: 'Option4',\\n          label: 'Option4'\\n        }, {\\n          value: 'Option5',\\n          label: 'Option5'\\n        }],\\n        value: ''\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_18 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"basic-multiple-select\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#basic-multiple-select\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Basic multiple select\")\n], -1 /* HOISTED */)\nconst _hoisted_19 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Multiple select uses tags to display selected options.\", -1 /* HOISTED */)\nconst _hoisted_20 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Set \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"multiple\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" attribute for \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"el-select\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" to enable multiple mode. In this case, the value of \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"v-model\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" will be an array of selected options. By default the selected options will be displayed as Tags. You can collapse them to a text by using \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"collapse-tags\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" attribute.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_21 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-select v-model=\\\"value1\\\" multiple placeholder=\\\"Select\\\">\\n    <el-option\\n      v-for=\\\"item in options\\\"\\n      :key=\\\"item.value\\\"\\n      :label=\\\"item.label\\\"\\n      :value=\\\"item.value\\\">\\n    </el-option>\\n  </el-select>\\n  \\n  <el-select\\n    v-model=\\\"value2\\\"\\n    multiple\\n    collapse-tags\\n    style=\\\"margin-left: 20px;\\\"\\n    placeholder=\\\"Select\\\">\\n    <el-option\\n      v-for=\\\"item in options\\\"\\n      :key=\\\"item.value\\\"\\n      :label=\\\"item.label\\\"\\n      :value=\\\"item.value\\\">\\n    </el-option>\\n  </el-select>\\n</template>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        options: [{\\n          value: 'Option1',\\n          label: 'Option1'\\n        }, {\\n          value: 'Option2',\\n          label: 'Option2'\\n        }, {\\n          value: 'Option3',\\n          label: 'Option3'\\n        }, {\\n          value: 'Option4',\\n          label: 'Option4'\\n        }, {\\n          value: 'Option5',\\n          label: 'Option5'\\n        }],\\n        value1: [],\\n        value2: []\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_22 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"custom-template\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#custom-template\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Custom template\")\n], -1 /* HOISTED */)\nconst _hoisted_23 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"You can customize HTML templates for options.\", -1 /* HOISTED */)\nconst _hoisted_24 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Insert customized HTML templates into the slot of \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"el-option\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\".\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_25 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-select v-model=\\\"value\\\" placeholder=\\\"Select\\\">\\n    <el-option\\n      v-for=\\\"item in cities\\\"\\n      :key=\\\"item.value\\\"\\n      :label=\\\"item.label\\\"\\n      :value=\\\"item.value\\\">\\n      <span style=\\\"float: left\\\">{{ item.label }}</span>\\n      <span style=\\\"float: right; color: #8492a6; font-size: 13px\\\">{{ item.value }}</span>\\n    </el-option>\\n  </el-select>\\n</template>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        cities: [{\\n          value: 'Beijing',\\n          label: 'Beijing'\\n        }, {\\n          value: 'Shanghai',\\n          label: 'Shanghai'\\n        }, {\\n          value: 'Nanjing',\\n          label: 'Nanjing'\\n        }, {\\n          value: 'Chengdu',\\n          label: 'Chengdu'\\n        }, {\\n          value: 'Shenzhen',\\n          label: 'Shenzhen'\\n        }, {\\n          value: 'Guangzhou',\\n          label: 'Guangzhou'\\n        }],\\n        value: ''\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_26 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"grouping\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#grouping\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Grouping\")\n], -1 /* HOISTED */)\nconst _hoisted_27 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Display options in groups.\", -1 /* HOISTED */)\nconst _hoisted_28 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Use \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"el-option-group\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" to group the options, and its \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"label\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" attribute stands for the name of the group.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_29 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-select v-model=\\\"value\\\" placeholder=\\\"Select\\\">\\n    <el-option-group\\n      v-for=\\\"group in options\\\"\\n      :key=\\\"group.label\\\"\\n      :label=\\\"group.label\\\">\\n      <el-option\\n        v-for=\\\"item in group.options\\\"\\n        :key=\\\"item.value\\\"\\n        :label=\\\"item.label\\\"\\n        :value=\\\"item.value\\\">\\n      </el-option>\\n    </el-option-group>\\n  </el-select>\\n</template>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        options: [{\\n          label: 'Popular cities',\\n          options: [{\\n            value: 'Shanghai',\\n            label: 'Shanghai'\\n          }, {\\n            value: 'Beijing',\\n            label: 'Beijing'\\n          }]\\n        }, {\\n          label: 'City name',\\n          options: [{\\n            value: 'Chengdu',\\n            label: 'Chengdu'\\n          }, {\\n            value: 'Shenzhen',\\n            label: 'Shenzhen'\\n          }, {\\n            value: 'Guangzhou',\\n            label: 'Guangzhou'\\n          }, {\\n            value: 'Dalian',\\n            label: 'Dalian'\\n          }]\\n        }],\\n        value: ''\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_30 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"option-filtering\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#option-filtering\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Option filtering\")\n], -1 /* HOISTED */)\nconst _hoisted_31 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"You can filter options for your desired ones.\", -1 /* HOISTED */)\nconst _hoisted_32 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Adding \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"filterable\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" to \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"el-select\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" enables filtering. By default, Select will find all the options whose \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"label\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" attribute contains the input value. If you prefer other filtering strategies, you can pass the \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"filter-method\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\". \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"filter-method\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" is a \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"Function\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" that gets called when the input value changes, and its parameter is the current input value.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_33 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-select v-model=\\\"value\\\" filterable placeholder=\\\"Select\\\">\\n    <el-option\\n      v-for=\\\"item in options\\\"\\n      :key=\\\"item.value\\\"\\n      :label=\\\"item.label\\\"\\n      :value=\\\"item.value\\\">\\n    </el-option>\\n  </el-select>\\n</template>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        options: [{\\n          value: 'Option1',\\n          label: 'Option1'\\n        }, {\\n          value: 'Option2',\\n          label: 'Option2'\\n        }, {\\n          value: 'Option3',\\n          label: 'Option3'\\n        }, {\\n          value: 'Option4',\\n          label: 'Option4'\\n        }, {\\n          value: 'Option5',\\n          label: 'Option5'\\n        }],\\n        value: ''\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_34 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"remote-search\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#remote-search\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Remote Search\")\n], -1 /* HOISTED */)\nconst _hoisted_35 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Enter keywords and search data from server.\", -1 /* HOISTED */)\nconst _hoisted_36 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"Set the value of \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"filterable\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" and \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"remote\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" with \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"true\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" to enable remote search, and you should pass the \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"remote-method\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\". \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"remote-method\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" is a \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"Function\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" that gets called when the input value changes, and its parameter is the current input value. Note that if \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"el-option\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" is rendered with the \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"v-for\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" directive, you should add the \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"key\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" attribute for \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"el-option\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\". Its value needs to be unique, such as \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"item.value\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" in the following example.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_37 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-select\\n    v-model=\\\"value\\\"\\n    multiple\\n    filterable\\n    remote\\n    reserve-keyword\\n    placeholder=\\\"Please enter a keyword\\\"\\n    :remote-method=\\\"remoteMethod\\\"\\n    :loading=\\\"loading\\\">\\n    <el-option\\n      v-for=\\\"item in options\\\"\\n      :key=\\\"item.value\\\"\\n      :label=\\\"item.label\\\"\\n      :value=\\\"item.value\\\">\\n    </el-option>\\n  </el-select>\\n</template>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        options: [],\\n        value: [],\\n        list: [],\\n        loading: false,\\n        states: [\\\"Alabama\\\", \\\"Alaska\\\", \\\"Arizona\\\",\\n        \\\"Arkansas\\\", \\\"California\\\", \\\"Colorado\\\",\\n        \\\"Connecticut\\\", \\\"Delaware\\\", \\\"Florida\\\",\\n        \\\"Georgia\\\", \\\"Hawaii\\\", \\\"Idaho\\\", \\\"Illinois\\\",\\n        \\\"Indiana\\\", \\\"Iowa\\\", \\\"Kansas\\\", \\\"Kentucky\\\",\\n        \\\"Louisiana\\\", \\\"Maine\\\", \\\"Maryland\\\",\\n        \\\"Massachusetts\\\", \\\"Michigan\\\", \\\"Minnesota\\\",\\n        \\\"Mississippi\\\", \\\"Missouri\\\", \\\"Montana\\\",\\n        \\\"Nebraska\\\", \\\"Nevada\\\", \\\"New Hampshire\\\",\\n        \\\"New Jersey\\\", \\\"New Mexico\\\", \\\"New York\\\",\\n        \\\"North Carolina\\\", \\\"North Dakota\\\", \\\"Ohio\\\",\\n        \\\"Oklahoma\\\", \\\"Oregon\\\", \\\"Pennsylvania\\\",\\n        \\\"Rhode Island\\\", \\\"South Carolina\\\",\\n        \\\"South Dakota\\\", \\\"Tennessee\\\", \\\"Texas\\\",\\n        \\\"Utah\\\", \\\"Vermont\\\", \\\"Virginia\\\",\\n        \\\"Washington\\\", \\\"West Virginia\\\", \\\"Wisconsin\\\",\\n        \\\"Wyoming\\\"]\\n      }\\n    },\\n    mounted() {\\n      this.list = this.states.map(item => {\\n        return { value: `value:${item}`, label: `label:${item}` };\\n      });\\n    },\\n    methods: {\\n      remoteMethod(query) {\\n        if (query !== '') {\\n          this.loading = true;\\n          setTimeout(() => {\\n            this.loading = false;\\n            this.options = this.list.filter(item => {\\n              return item.label.toLowerCase()\\n                .indexOf(query.toLowerCase()) > -1;\\n            });\\n          }, 200);\\n        } else {\\n          this.options = [];\\n        }\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_38 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"h3\", { id: \"create-new-items\" }, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"a\", {\n    class: \"header-anchor\",\n    href: \"#create-new-items\"\n  }, \"¶\"),\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" Create new items\")\n], -1 /* HOISTED */)\nconst _hoisted_39 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, \"Create and select new items that are not included in select options\", -1 /* HOISTED */)\nconst _hoisted_40 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"p\", null, [\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\"By using the \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"allow-create\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" attribute, users can create new items by typing in the input box. Note that for \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"allow-create\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" to work, \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"filterable\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\" must be \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"true\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\". This example also demonstrates \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"default-first-option\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\". When this attribute is set to \"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", null, \"true\"),\n    /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createTextVNode\"])(\", you can select the first option in the current option list by hitting enter without having to navigate with mouse or arrow keys.\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_41 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"pre\", null, [\n  /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"code\", { class: \"html\" }, \"<template>\\n  <el-select\\n    v-model=\\\"value\\\"\\n    multiple\\n    filterable\\n    allow-create\\n    default-first-option\\n    placeholder=\\\"Choose tags for your article\\\">\\n    <el-option\\n      v-for=\\\"item in options\\\"\\n      :key=\\\"item.value\\\"\\n      :label=\\\"item.label\\\"\\n      :value=\\\"item.value\\\">\\n    </el-option>\\n  </el-select>\\n</template>\\n\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        options: [{\\n          value: 'HTML',\\n          label: 'HTML'\\n        }, {\\n          value: 'CSS',\\n          label: 'CSS'\\n        }, {\\n          value: 'JavaScript',\\n          label: 'JavaScript'\\n        }],\\n        value: []\\n      }\\n    }\\n  }\\n</script>\\n\")\n], -1 /* HOISTED */)\nconst _hoisted_42 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createStaticVNode\"])(\"<div class=\\\"tip\\\"><p>If the binding value of Select is an object, make sure to assign <code>value-key</code> as its unique identity key name.</p></div><h3 id=\\\"select-attributes\\\"><a class=\\\"header-anchor\\\" href=\\\"#select-attributes\\\">¶</a> Select Attributes</h3><table><thead><tr><th>Attribute</th><th>Description</th><th>Type</th><th>Accepted Values</th><th>Default</th></tr></thead><tbody><tr><td>value / v-model</td><td>binding value</td><td>boolean / string / number</td><td>—</td><td>—</td></tr><tr><td>multiple</td><td>whether multiple-select is activated</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>disabled</td><td>whether Select is disabled</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>value-key</td><td>unique identity key name for value, required when value is an object</td><td>string</td><td>—</td><td>value</td></tr><tr><td>size</td><td>size of Input</td><td>string</td><td>large/small/mini</td><td>—</td></tr><tr><td>clearable</td><td>whether select can be cleared</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>collapse-tags</td><td>whether to collapse tags to a text when multiple selecting</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>multiple-limit</td><td>maximum number of options user can select when <code>multiple</code> is <code>true</code>. No limit when set to 0</td><td>number</td><td>—</td><td>0</td></tr><tr><td>name</td><td>the name attribute of select input</td><td>string</td><td>—</td><td>—</td></tr><tr><td>autocomplete</td><td>the autocomplete attribute of select input</td><td>string</td><td>—</td><td>off</td></tr><tr><td>auto-complete</td><td>@DEPRECATED in next major version</td><td>string</td><td>—</td><td>off</td></tr><tr><td>placeholder</td><td>placeholder</td><td>string</td><td>—</td><td>Select</td></tr><tr><td>filterable</td><td>whether Select is filterable</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>allow-create</td><td>whether creating new items is allowed. To use this, <code>filterable</code> must be true</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>filter-method</td><td>custom filter method</td><td>function</td><td>—</td><td>—</td></tr><tr><td>remote</td><td>whether options are loaded from server</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>remote-method</td><td>custom remote search method</td><td>function</td><td>—</td><td>—</td></tr><tr><td>loading</td><td>whether Select is loading data from server</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>loading-text</td><td>displayed text while loading data from server</td><td>string</td><td>—</td><td>Loading</td></tr><tr><td>no-match-text</td><td>displayed text when no data matches the filtering query, you can also use slot <code>empty</code></td><td>string</td><td>—</td><td>No matching data</td></tr><tr><td>no-data-text</td><td>displayed text when there is no options, you can also use slot <code>empty</code></td><td>string</td><td>—</td><td>No data</td></tr><tr><td>popper-class</td><td>custom class name for Select&#39;s dropdown</td><td>string</td><td>—</td><td>—</td></tr><tr><td>reserve-keyword</td><td>when <code>multiple</code> and <code>filter</code> is true, whether to reserve current keyword after selecting an option</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>default-first-option</td><td>select first matching option on enter key. Use with <code>filterable</code> or <code>remote</code></td><td>boolean</td><td>-</td><td>false</td></tr><tr><td>popper-append-to-body</td><td>whether to append the popper menu to body. If the positioning of the popper is wrong, you can try to set this prop to false</td><td>boolean</td><td>-</td><td>true</td></tr><tr><td>automatic-dropdown</td><td>for non-filterable Select, this prop decides if the option menu pops up when the input is focused</td><td>boolean</td><td>-</td><td>false</td></tr></tbody></table><h3 id=\\\"select-events\\\"><a class=\\\"header-anchor\\\" href=\\\"#select-events\\\">¶</a> Select Events</h3><table><thead><tr><th>Event Name</th><th>Description</th><th>Parameters</th></tr></thead><tbody><tr><td>change</td><td>triggers when the selected value changes</td><td>current selected value</td></tr><tr><td>visible-change</td><td>triggers when the dropdown appears/disappears</td><td>true when it appears, and false otherwise</td></tr><tr><td>remove-tag</td><td>triggers when a tag is removed in multiple mode</td><td>removed tag value</td></tr><tr><td>clear</td><td>triggers when the clear icon is clicked in a clearable Select</td><td>—</td></tr><tr><td>blur</td><td>triggers when Input blurs</td><td>(event: Event)</td></tr><tr><td>focus</td><td>triggers when Input focuses</td><td>(event: Event)</td></tr></tbody></table><h3 id=\\\"select-slots\\\"><a class=\\\"header-anchor\\\" href=\\\"#select-slots\\\">¶</a> Select Slots</h3><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>—</td><td>Option component list</td></tr><tr><td>prefix</td><td>content as Select prefix</td></tr><tr><td>empty</td><td>content when there is no options</td></tr></tbody></table><h3 id=\\\"option-group-attributes\\\"><a class=\\\"header-anchor\\\" href=\\\"#option-group-attributes\\\">¶</a> Option Group Attributes</h3><table><thead><tr><th>Attribute</th><th>Description</th><th>Type</th><th>Accepted Values</th><th>Default</th></tr></thead><tbody><tr><td>label</td><td>name of the group</td><td>string</td><td>—</td><td>—</td></tr><tr><td>disabled</td><td>whether to disable all options in this group</td><td>boolean</td><td>—</td><td>false</td></tr></tbody></table><h3 id=\\\"option-attributes\\\"><a class=\\\"header-anchor\\\" href=\\\"#option-attributes\\\">¶</a> Option Attributes</h3><table><thead><tr><th>Attribute</th><th>Description</th><th>Type</th><th>Accepted Values</th><th>Default</th></tr></thead><tbody><tr><td>value</td><td>value of option</td><td>string/number/object</td><td>—</td><td>—</td></tr><tr><td>label</td><td>label of option, same as <code>value</code> if omitted</td><td>string/number</td><td>—</td><td>—</td></tr><tr><td>disabled</td><td>whether option is disabled</td><td>boolean</td><td>—</td><td>false</td></tr></tbody></table><h3 id=\\\"methods\\\"><a class=\\\"header-anchor\\\" href=\\\"#methods\\\">¶</a> Methods</h3><table><thead><tr><th>Method</th><th>Description</th><th>Parameters</th></tr></thead><tbody><tr><td>focus</td><td>focus the Input component</td><td>-</td></tr><tr><td>blur</td><td>blur the Input component, and hide the dropdown</td><td>-</td></tr></tbody></table>\", 13)\n\nfunction render(_ctx, _cache) {\n  const _component_element_demo0 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo0\")\n  const _component_demo_block = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"demo-block\")\n  const _component_element_demo1 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo1\")\n  const _component_element_demo2 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo2\")\n  const _component_element_demo3 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo3\")\n  const _component_element_demo4 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo4\")\n  const _component_element_demo5 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo5\")\n  const _component_element_demo6 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo6\")\n  const _component_element_demo7 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo7\")\n  const _component_element_demo8 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo8\")\n  const _component_element_demo9 = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"resolveComponent\"])(\"element-demo9\")\n\n  return (Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"openBlock\"])(), Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createBlock\"])(\"section\", _hoisted_1, [\n    _hoisted_2,\n    _hoisted_3,\n    _hoisted_4,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo0)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_6\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_5\n      ]),\n      _: 1\n    }),\n    _hoisted_7,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo1)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_9\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_8\n      ]),\n      _: 1\n    }),\n    _hoisted_10,\n    _hoisted_11,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo2)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_13\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_12\n      ]),\n      _: 1\n    }),\n    _hoisted_14,\n    _hoisted_15,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo3)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_17\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_16\n      ]),\n      _: 1\n    }),\n    _hoisted_18,\n    _hoisted_19,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo4)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_21\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_20\n      ]),\n      _: 1\n    }),\n    _hoisted_22,\n    _hoisted_23,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo5)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_25\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_24\n      ]),\n      _: 1\n    }),\n    _hoisted_26,\n    _hoisted_27,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo6)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_29\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_28\n      ]),\n      _: 1\n    }),\n    _hoisted_30,\n    _hoisted_31,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo7)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_33\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_32\n      ]),\n      _: 1\n    }),\n    _hoisted_34,\n    _hoisted_35,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo8)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_37\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_36\n      ]),\n      _: 1\n    }),\n    _hoisted_38,\n    _hoisted_39,\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_demo_block, null, {\n      source: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(_component_element_demo9)\n      ]),\n      highlight: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_41\n      ]),\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withCtx\"])(() => [\n        _hoisted_40\n      ]),\n      _: 1\n    }),\n    _hoisted_42\n  ]))\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vue-loader/dist/templateLoader.js?!./node_modules/vue-loader/dist/index.js?!./build/md-loader/index.js!./examples/docs/en-US/select.md?vue&type=template&id=93644390\n");

/***/ })

}]);